var Apiclient = require('apiclient');
var sha1 = require('sha1');
var validator = require('validator');
var bytes = require('bytes');
var uniqid = require('uniqid');
var yamlconfig = require('yaml-config');
var path = require('path');

var configYaml = yamlconfig.readConfig(path.resolve('../../application/config/config.yml'));

var host = configYaml.fhir.host;
var port = configYaml.fhir.port;

//event emitter
const EventEmitter = require('events');
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();

//phoenix
//query data melalui rest phoenix
var seedPhoenix = require(path.resolve('../../application/config/seed_phoenix.json'));
seedPhoenix.base.hostname = configYaml.phoenix.host;
seedPhoenix.base.port = configYaml.phoenix.port;

var Api = new Apiclient(seedPhoenix);

seedPhoenixFHIR = require(path.resolve('../../application/config/seed_phoenix_fhir.json'));
seedPhoenixFHIR.base.hostname = configYaml.phoenix.host;
seedPhoenixFHIR.base.port = configYaml.phoenix.port;

var ApiFHIR = new Apiclient(seedPhoenixFHIR);

var controller = {
	get: {
		identityAssuranceLevel: function getIdentityAssuranceLevel(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('identityAssuranceLevel', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getIdentityAssuranceLevel"
								});
							} else {
								//cek apakah ada error atau tidak
								var assuranceLevel = JSON.parse(body);
								//cek apakah ada error atau tidak
								if (assuranceLevel.err_code == 0) {
									//cek jumdata dulu
									if (assuranceLevel.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": assuranceLevel.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Identity Assurance Level is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": assuranceLevel.error,
										"application": "Api FHIR",
										"function": "getIdentityAssuranceLevel"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							//method, endpoint, params, options, callback
							ApiFHIR.get('identityAssuranceLevel', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getIdentityAssuranceLevel"
									});
								} else {
									//cek apakah ada error atau tidak
									var assuranceLevel = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (assuranceLevel.err_code == 0) {
										//cek jumdata dulu
										if (assuranceLevel.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": assuranceLevel.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Identity Assurance Level is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": assuranceLevel.error,
											"application": "Api FHIR",
											"function": "getIdentityAssuranceLevel"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}
					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		identityAssuranceLevelCode: function getIdentityAssuranceLevelCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						//method, endpoint, params, options, callback
						ApiFHIR.get('identityAssuranceLevelCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getIdentityAssuranceLevelCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var assuranceLevel = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (assuranceLevel.err_code == 0) {
									//cek jumdata dulu
									if (assuranceLevel.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": assuranceLevel.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Identity Assurance Level Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": assuranceLevel.error,
										"application": "Api FHIR",
										"function": "getIdentityAssuranceLevelCode"
									});
								}
							}
						})

					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		administrativeGender: function getAdministrativeGender(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('administrativeGender', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAdministrativeGender"
								});
							} else {
								//cek apakah ada error atau tidak
								var administrativeGender = JSON.parse(body);
								//cek apakah ada error atau tidak
								if (administrativeGender.err_code == 0) {
									//cek jumdata dulu
									if (administrativeGender.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": administrativeGender.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Administrative Gender is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": administrativeGender.error,
										"application": "Api FHIR",
										"function": "getAdministrativeGender"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							//method, endpoint, params, options, callback
							ApiFHIR.get('administrativeGender', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getAdministrativeGender"
									});
								} else {
									//cek apakah ada error atau tidak
									var administrativeGender = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (administrativeGender.err_code == 0) {
										//cek jumdata dulu
										if (administrativeGender.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": administrativeGender.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Administrative Gender is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": administrativeGender.error,
											"application": "Api FHIR",
											"function": "getAdministrativeGender"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}
					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		administrativeGenderCode: function getAdministrativeGenderCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						//method, endpoint, params, options, callback
						ApiFHIR.get('administrativeGenderCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAdministrativeGenderCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var administrativeGender = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (administrativeGender.err_code == 0) {
									//cek jumdata dulu
									if (administrativeGender.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": administrativeGender.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Administrative Gender Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": administrativeGender.error,
										"application": "Api FHIR",
										"function": "getAdministrativeGender"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		maritalStatus: function getMaritalStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('maritalStatus', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getMaritalStatus"
								});
							} else {
								//cek apakah ada error atau tidak
								var maritalStatus = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (maritalStatus.err_code == 0) {
									//cek jumdata dulu
									if (maritalStatus.data.length > 0) {
										for (i = 0; i < maritalStatus.data.length; i++) {
											maritalStatus.data[i].system = host + ':' + port + '/' + apikey + '/' + maritalStatus.data[i].system;
										}
										res.json({
											"err_code": 0,
											"data": maritalStatus.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Marital Status is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": maritalStatus.error,
										"application": "Api FHIR",
										"function": "getMaritalStatus"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('maritalStatus', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getMaritalStatus"
									});
								} else {
									//cek apakah ada error atau tidak
									var maritalStatus = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (maritalStatus.err_code == 0) {
										//cek jumdata dulu
										if (maritalStatus.data.length > 0) {
											maritalStatus.data[0].system = host + ':' + port + '/' + apikey + '/' + maritalStatus.data[0].system;
											res.json({
												"err_code": 0,
												"data": maritalStatus.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Marital Status is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": maritalStatus.error,
											"application": "Api FHIR",
											"function": "getMaritalStatus"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		maritalStatusCode: function getMaritalStatusCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toUpperCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('maritalStatusCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getMaritalStatus"
								});
							} else {
								//cek apakah ada error atau tidak
								var maritalStatus = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (maritalStatus.err_code == 0) {
									//cek jumdata dulu
									if (maritalStatus.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": maritalStatus.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Marital Status Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": maritalStatus.error,
										"application": "Api FHIR",
										"function": "getMaritalStatus"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		contactRole: function getContactRole(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('contactRole', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getContactRole"
								});
							} else {
								//cek apakah ada error atau tidak
								var contactRole = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (contactRole.err_code == 0) {
									//cek jumdata dulu
									if (contactRole.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": contactRole.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Contact Role is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": contactRole.error,
										"application": "Api FHIR",
										"function": "getContactRole"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('contactRole', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getContactRole"
									});
								} else {
									//cek apakah ada error atau tidak
									var contactRole = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (contactRole.err_code == 0) {
										//cek jumdata dulu
										if (contactRole.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": contactRole.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Contact Role is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": contactRole.error,
											"application": "Api FHIR",
											"function": "getContactRole"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		contactRoleCode: function getContactRoleCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toUpperCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('contactRoleCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getContactRoleCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var contactRole = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (contactRole.err_code == 0) {
									//cek jumdata dulu
									if (contactRole.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": contactRole.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Contact Role Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": contactRole.error,
										"application": "Api FHIR",
										"function": "getContactRole"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		animalSpecies: function getAnimalSpecies(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('animalSpecies', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAnimalSpecies"
								});
							} else {
								//cek apakah ada error atau tidak
								var animalSpecies = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (animalSpecies.err_code == 0) {
									//cek jumdata dulu
									if (animalSpecies.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": animalSpecies.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Animal Species is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": animalSpecies.error,
										"application": "Api FHIR",
										"function": "getAnimalSpecies"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('animalSpecies', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getAnimalSpecies"
									});
								} else {
									//cek apakah ada error atau tidak
									var animalSpecies = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (animalSpecies.err_code == 0) {
										//cek jumdata dulu
										if (animalSpecies.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": animalSpecies.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Animal Species is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": animalSpecies.error,
											"application": "Api FHIR",
											"function": "getAnimalSpecies"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		animalSpeciesCode: function getAnimalSpeciesCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('animalSpeciesCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAnimalSpeciesCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var animalSpecies = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (animalSpecies.err_code == 0) {
									//cek jumdata dulu
									if (animalSpecies.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": animalSpecies.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Animal Species Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": animalSpecies.error,
										"application": "Api FHIR",
										"function": "getAnimalSpeciesCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		animalBreeds: function getAnimalBreeds(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('animalBreeds', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAnimalBreeds"
								});
							} else {
								//cek apakah ada error atau tidak
								var animalBreeds = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (animalBreeds.err_code == 0) {
									//cek jumdata dulu
									if (animalBreeds.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": animalBreeds.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Animal Breeds is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": animalBreeds.error,
										"application": "Api FHIR",
										"function": "getAnimalBreeds"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('animalBreeds', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getAnimalBreeds"
									});
								} else {
									//cek apakah ada error atau tidak
									var animalBreeds = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (animalBreeds.err_code == 0) {
										//cek jumdata dulu
										if (animalBreeds.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": animalBreeds.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Animal Breeds is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": animalBreeds.error,
											"application": "Api FHIR",
											"function": "getAnimalBreeds"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		animalBreedsCode: function getAnimalBreedsCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('animalBreedsCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAnimalBreedsCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var animalBreeds = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (animalBreeds.err_code == 0) {
									//cek jumdata dulu
									if (animalBreeds.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": animalBreeds.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Animal Breeds Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": animalBreeds.error,
										"application": "Api FHIR",
										"function": "getAnimalBreedsCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		animalGenderStatus: function getAnimalGenderStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('animalGenderStatus', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAnimalGenderStatus"
								});
							} else {
								//cek apakah ada error atau tidak
								var animalGenderStatus = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (animalGenderStatus.err_code == 0) {
									//cek jumdata dulu
									if (animalGenderStatus.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": animalGenderStatus.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Animal Gender Status is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": animalGenderStatus.error,
										"application": "Api FHIR",
										"function": "getAnimalGenderStatus"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('animalGenderStatus', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getAnimalGenderStatus"
									});
								} else {
									//cek apakah ada error atau tidak
									var animalGenderStatus = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (animalGenderStatus.err_code == 0) {
										//cek jumdata dulu
										if (animalGenderStatus.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": animalGenderStatus.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Animal Gender Status is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": animalGenderStatus.error,
											"application": "Api FHIR",
											"function": "getAnimalGenderStatus"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		animalGenderStatusCode: function getAnimalGenderStatusCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('animalGenderStatusCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAnimalGenderStatusCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var animalGenderStatus = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (animalGenderStatus.err_code == 0) {
									//cek jumdata dulu
									if (animalGenderStatus.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": animalGenderStatus.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Animal Gender Status Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": animalGenderStatus.error,
										"application": "Api FHIR",
										"function": "getAnimalGenderStatusCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		languages: function getLanguages(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('languages', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getLanguages"
								});
							} else {
								//cek apakah ada error atau tidak
								var languages = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (languages.err_code == 0) {
									//cek jumdata dulu
									if (languages.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": languages.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Languages is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": languages.error,
										"application": "Api FHIR",
										"function": "getLanguages"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('languages', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getLanguages"
									});
								} else {
									//cek apakah ada error atau tidak
									var languages = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (languages.err_code == 0) {
										//cek jumdata dulu
										if (languages.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": languages.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Languages is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": languages.error,
											"application": "Api FHIR",
											"function": "getLanguages"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		languagesCode: function getLanguagesCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,-]/gi, '').trim();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('languagesCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getLanguagesCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var languages = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (languages.err_code == 0) {
									//cek jumdata dulu
									if (languages.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": languages.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Languages code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": languages.error,
										"application": "Api FHIR",
										"function": "getLanguagesCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		linkType: function getLinkType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('linkType', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getLinkType"
								});
							} else {
								//cek apakah ada error atau tidak
								var linkType = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (linkType.err_code == 0) {
									//cek jumdata dulu
									if (linkType.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": linkType.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Link Type is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": linkType.error,
										"application": "Api FHIR",
										"function": "getLinkType"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('linkType', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getLinkType"
									});
								} else {
									//cek apakah ada error atau tidak
									var linkType = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (linkType.err_code == 0) {
										//cek jumdata dulu
										if (linkType.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": linkType.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Link Type is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": linkType.error,
											"application": "Api FHIR",
											"function": "getLinkType"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		linkTypeCode: function getLinkTypeCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,-]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('linkTypeCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getLinkTypeCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var linkType = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (linkType.err_code == 0) {
									//cek jumdata dulu
									if (linkType.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": linkType.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Link Type code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": linkType.error,
										"application": "Api FHIR",
										"function": "getLinkTypeCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		relatedPersonRelationshipType: function getRelatedPersonRelationshipType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('relatedPersonRelationshipType', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getRelatedPersonRelationshipType"
								});
							} else {
								//cek apakah ada error atau tidak
								var relatedPersonRelationshipType = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (relatedPersonRelationshipType.err_code == 0) {
									//cek jumdata dulu
									if (relatedPersonRelationshipType.data.length > 0) {
										for (i = 0; i < relatedPersonRelationshipType.data.length; i++) {
											relatedPersonRelationshipType.data[i].system = host + ':' + port + '/' + apikey + '/' + relatedPersonRelationshipType.data[i].system;
										}

										res.json({
											"err_code": 0,
											"data": relatedPersonRelationshipType.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Related Person Relationship Type is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": relatedPersonRelationshipType.error,
										"application": "Api FHIR",
										"function": "getRelatedPersonRelationshipType"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('relatedPersonRelationshipType', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getRelatedPersonRelationshipType"
									});
								} else {
									//cek apakah ada error atau tidak
									var relatedPersonRelationshipType = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (relatedPersonRelationshipType.err_code == 0) {
										//cek jumdata dulu
										if (relatedPersonRelationshipType.data.length > 0) {

											relatedPersonRelationshipType.data[0].system = host + ':' + port + '/' + apikey + '/' + relatedPersonRelationshipType.data[0].system;

											res.json({
												"err_code": 0,
												"data": relatedPersonRelationshipType.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Related Person Relationship Type is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": relatedPersonRelationshipType.error,
											"application": "Api FHIR",
											"function": "getRelatedPersonRelationshipType"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		relatedPersonRelationshipTypeCode: function getRelatedPersonRelationshipTypeCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toUpperCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('relatedPersonRelationshipTypeCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getRelatedPersonRelationshipTypeCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var relatedPersonRelationshipType = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (relatedPersonRelationshipType.err_code == 0) {
									//cek jumdata dulu
									if (relatedPersonRelationshipType.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": relatedPersonRelationshipType.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Related Person Relationship Type Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": relatedPersonRelationshipType.error,
										"application": "Api FHIR",
										"function": "getRelatedPersonRelationshipTypeCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		groupType: function getGroupType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('groupType', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getGroupType"
								});
							} else {
								//cek apakah ada error atau tidak
								var groupType = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (groupType.err_code == 0) {
									//cek jumdata dulu
									if (groupType.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": groupType.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Group Type is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": groupType.error,
										"application": "Api FHIR",
										"function": "getGroupType"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('groupType', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getGroupType"
									});
								} else {
									//cek apakah ada error atau tidak
									var groupType = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (groupType.err_code == 0) {
										//cek jumdata dulu
										if (groupType.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": groupType.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Group Type is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": groupType.error,
											"application": "Api FHIR",
											"function": "getGroupType"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		groupTypeCode: function getGroupTypeCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('groupTypeCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getGroupTypeCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var groupType = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (groupType.err_code == 0) {
									//cek jumdata dulu
									if (groupType.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": groupType.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Group Type Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": groupType.error,
										"application": "Api FHIR",
										"function": "getGroupTypeCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		identifierUse: function getIdentifierUse(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('identifierUse', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getIdentifierUse"
								});
							} else {
								//cek apakah ada error atau tidak
								var identifierUse = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (identifierUse.err_code == 0) {
									//cek jumdata dulu
									if (identifierUse.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": identifierUse.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Identifier Use is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": identifierUse.error,
										"application": "Api FHIR",
										"function": "getIdentifierUse"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('identifierUse', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getIdentifierUse"
									});
								} else {
									//cek apakah ada error atau tidak
									var identifierUse = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (identifierUse.err_code == 0) {
										//cek jumdata dulu
										if (identifierUse.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": identifierUse.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Identifier Use is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": identifierUse.error,
											"application": "Api FHIR",
											"function": "getIdentifierUse"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		identifierUseCode: function getIdentifierUseCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('identifierUseCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getIdentifierUseCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var identifierUse = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (identifierUse.err_code == 0) {
									//cek jumdata dulu
									if (identifierUse.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": identifierUse.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Identifier Use Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": identifierUse.error,
										"application": "Api FHIR",
										"function": "getIdentifierUseCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		identifierType: function getIdentifierType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('identifierType', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getIdentifierType"
								});
							} else {
								//cek apakah ada error atau tidak
								var identifierType = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (identifierType.err_code == 0) {
									//cek jumdata dulu
									if (identifierType.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": identifierType.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Identifier Type is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": identifierType.error,
										"application": "Api FHIR",
										"function": "getIdentifierType"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('identifierType', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getIdentifierUse"
									});
								} else {
									//cek apakah ada error atau tidak
									var identifierType = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (identifierType.err_code == 0) {
										//cek jumdata dulu
										if (identifierType.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": identifierType.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Identifier Type is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": identifierType.error,
											"application": "Api FHIR",
											"function": "getIdentifierType"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		identifierTypeCode: function getIdentifierTypeCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').toUpperCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('identifierTypeCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getIdentifierTypeCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var identifierType = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (identifierType.err_code == 0) {
									//cek jumdata dulu
									if (identifierType.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": identifierType.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Identifier Type Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": identifierType.error,
										"application": "Api FHIR",
										"function": "getIdentifierTypeCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		nameUse: function getNameUse(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('nameUse', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getNameUse"
								});
							} else {
								//cek apakah ada error atau tidak
								var nameUse = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (nameUse.err_code == 0) {
									//cek jumdata dulu
									if (nameUse.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": nameUse.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Name Use is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": nameUse.error,
										"application": "Api FHIR",
										"function": "getNameUse"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('nameUse', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getNameUse"
									});
								} else {
									//cek apakah ada error atau tidak
									var nameUse = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (nameUse.err_code == 0) {
										//cek jumdata dulu
										if (nameUse.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": nameUse.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Name Use is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": nameUse.error,
											"application": "Api FHIR",
											"function": "getNameUse"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		nameUseCode: function getNameUseCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('nameUseCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getNameUseCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var nameUse = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (nameUse.err_code == 0) {
									//cek jumdata dulu
									if (nameUse.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": nameUse.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Name Use Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": nameUse.error,
										"application": "Api FHIR",
										"function": "getNameUseCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		contactPointSystem: function getContactPointSystem(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('contactPointSystem', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getContactPointSystem"
								});
							} else {
								//cek apakah ada error atau tidak
								var contactPointSystem = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (contactPointSystem.err_code == 0) {
									//cek jumdata dulu
									if (contactPointSystem.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": contactPointSystem.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Contact Point System is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": contactPointSystem.error,
										"application": "Api FHIR",
										"function": "getContactPointSystem"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('contactPointSystem', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getContactPointSystem"
									});
								} else {
									//cek apakah ada error atau tidak
									var contactPointSystem = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (contactPointSystem.err_code == 0) {
										//cek jumdata dulu
										if (contactPointSystem.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": contactPointSystem.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Contact Point System is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": contactPointSystem.error,
											"application": "Api FHIR",
											"function": "getContactPointSystem"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		contactPointSystemCode: function getContactPointSystemCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('contactPointSystemCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getContactPointSystemCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var contactPointSystem = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (contactPointSystem.err_code == 0) {
									//cek jumdata dulu
									if (contactPointSystem.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": contactPointSystem.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Contact Point System Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": contactPointSystem.error,
										"application": "Api FHIR",
										"function": "getContactPointSystemCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		contactPointUse: function getContactPointUse(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('contactPointUse', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getContactPointUse"
								});
							} else {
								//cek apakah ada error atau tidak
								var contactPointUse = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (contactPointUse.err_code == 0) {
									//cek jumdata dulu
									if (contactPointUse.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": contactPointUse.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Contact Point Use is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": contactPointUse.error,
										"application": "Api FHIR",
										"function": "getContactPointUse"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('contactPointUse', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getContactPointUse"
									});
								} else {
									//cek apakah ada error atau tidak
									var contactPointUse = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (contactPointUse.err_code == 0) {
										//cek jumdata dulu
										if (contactPointUse.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": contactPointUse.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Contact Point Use is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": contactPointUse.error,
											"application": "Api FHIR",
											"function": "getContactPointUse"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		contactPointUseCode: function getContactPointUseCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('contactPointUseCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getContactPointUseCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var contactPointUse = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (contactPointUse.err_code == 0) {
									//cek jumdata dulu
									if (contactPointUse.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": contactPointUse.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Contact Point Use Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": contactPointUse.error,
										"application": "Api FHIR",
										"function": "getContactPointUseCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		addressUse: function getAddressUse(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('addressUse', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAddressUse"
								});
							} else {
								//cek apakah ada error atau tidak
								var addressUse = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (addressUse.err_code == 0) {
									//cek jumdata dulu
									if (addressUse.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": addressUse.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Address Use is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": addressUse.error,
										"application": "Api FHIR",
										"function": "getAddressUse"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('addressUse', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getAddressUse"
									});
								} else {
									//cek apakah ada error atau tidak
									var addressUse = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (addressUse.err_code == 0) {
										//cek jumdata dulu
										if (addressUse.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": addressUse.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Address Use is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": addressUse.error,
											"application": "Api FHIR",
											"function": "getAddressUse"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		addressUseCode: function getAddressUseCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('addressUseCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAddressUseCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var addressUse = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (addressUse.err_code == 0) {
									//cek jumdata dulu
									if (addressUse.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": addressUse.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Address Use Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": addressUse.error,
										"application": "Api FHIR",
										"function": "getAddressUseCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		addressType: function getAddressType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('addressType', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAddressType"
								});
							} else {
								//cek apakah ada error atau tidak
								var addressType = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (addressType.err_code == 0) {
									//cek jumdata dulu
									if (addressType.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": addressType.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Address Type is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": addressType.error,
										"application": "Api FHIR",
										"function": "getAddressType"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('addressType', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getAddressType"
									});
								} else {
									//cek apakah ada error atau tidak
									var addressType = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (addressType.err_code == 0) {
										//cek jumdata dulu
										if (addressType.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": addressType.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Address Type is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": addressType.error,
											"application": "Api FHIR",
											"function": "getAddressType"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		addressTypeCode: function getAddressTypeCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('addressTypeCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAddressTypeCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var addressType = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (addressType.err_code == 0) {
									//cek jumdata dulu
									if (addressType.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": addressType.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Address Type Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": addressType.error,
										"application": "Api FHIR",
										"function": "getAddressTypeCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		appointmentReasonCode: function getAppointmentReasonCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('appointmentReasonCode', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAppointmentReasonCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var appointmentReasonCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (appointmentReasonCode.err_code == 0) {
									//cek jumdata dulu
									if (appointmentReasonCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": appointmentReasonCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Appointment Reason Code is not found"
										});
									}
								} else {
									res.json(appointmentReasonCode);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('appointmentReasonCode', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getAppointmentReasonCode"
									});
								} else {
									//cek apakah ada error atau tidak
									var appointmentReasonCode = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (appointmentReasonCode.err_code == 0) {
										//cek jumdata dulu
										if (appointmentReasonCode.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": appointmentReasonCode.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Appointment Reason Code is not found"
											});
										}
									} else {
										res.json(appointmentReasonCode);
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		appointmentReasonCodeCode: function getAppointmentReasonCodeCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,-]/gi, '').trim().toUpperCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('appointmentReasonCodeCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAddressTypeCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var appointmentReasonCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (appointmentReasonCode.err_code == 0) {
									//cek jumdata dulu
									if (appointmentReasonCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": appointmentReasonCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Appointment Reason Code is not found"
										});
									}
								} else {
									res.json(appointmentReasonCode);
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		slotStatus: function getSlotStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('slotStatus', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getSlotStatus"
								});
							} else {
								//cek apakah ada error atau tidak
								var slotStatus = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (slotStatus.err_code == 0) {
									//cek jumdata dulu
									if (slotStatus.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": slotStatus.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Slot Status is not found"
										});
									}
								} else {
									res.json(slotStatus);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('slotStatus', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getSlotStatus"
									});
								} else {
									//cek apakah ada error atau tidak
									var slotStatus = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (slotStatus.err_code == 0) {
										//cek jumdata dulu
										if (slotStatus.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": slotStatus.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Slot Status is not found"
											});
										}
									} else {
										res.json(slotStatus);
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		slotStatusCode: function getSlotStatusCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,-]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('slotStatusCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getSlotStatusCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var slotStatus = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (slotStatus.err_code == 0) {
									//cek jumdata dulu
									if (slotStatus.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": slotStatus.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Slot Status Code is not found"
										});
									}
								} else {
									res.json(slotStatus);
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		appointmentStatus: function getAppointmentStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('appointmentStatus', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAppointmentStatus"
								});
							} else {
								//cek apakah ada error atau tidak
								var appointmentStatus = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (appointmentStatus.err_code == 0) {
									//cek jumdata dulu
									if (appointmentStatus.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": appointmentStatus.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Appointment Status is not found"
										});
									}
								} else {
									res.json(appointmentStatus);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('appointmentStatus', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getAppointmentStatus"
									});
								} else {
									//cek apakah ada error atau tidak
									var appointmentStatus = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (appointmentStatus.err_code == 0) {
										//cek jumdata dulu
										if (appointmentStatus.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": appointmentStatus.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Appointment Status is not found"
											});
										}
									} else {
										res.json(appointmentStatus);
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		appointmentStatusCode: function getAppointmentStatusCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,-]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('appointmentStatusCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAppointmentStatusCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var appointmentStatus = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (appointmentStatus.err_code == 0) {
									//cek jumdata dulu
									if (appointmentStatus.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": appointmentStatus.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Appointment Status Code is not found"
										});
									}
								} else {
									res.json(appointmentStatus);
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		participantRequired: function getParticipantRequired(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('participantRequired', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getParticipantRequired"
								});
							} else {
								//cek apakah ada error atau tidak
								var participantRequired = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (participantRequired.err_code == 0) {
									//cek jumdata dulu
									if (participantRequired.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": participantRequired.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Participant Required is not found"
										});
									}
								} else {
									res.json(participantRequired);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('participantRequired', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getParticipantRequired"
									});
								} else {
									//cek apakah ada error atau tidak
									var participantRequired = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (participantRequired.err_code == 0) {
										//cek jumdata dulu
										if (participantRequired.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": participantRequired.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Participant Required is not found"
											});
										}
									} else {
										res.json(participantRequired);
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		participantRequiredCode: function getParticipantRequiredCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,-]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('participantRequiredCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getParticipantRequiredCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var participantRequired = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (participantRequired.err_code == 0) {
									//cek jumdata dulu
									if (participantRequired.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": participantRequired.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Participant Required Code is not found"
										});
									}
								} else {
									res.json(participantRequired);
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		participationStatus: function getParticipationStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('participationStatus', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getParticipationStatus"
								});
							} else {
								//cek apakah ada error atau tidak
								var participationStatus = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (participationStatus.err_code == 0) {
									//cek jumdata dulu
									if (participationStatus.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": participationStatus.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Participation Status is not found"
										});
									}
								} else {
									res.json(participationStatus);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('participationStatus', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getParticipationStatus"
									});
								} else {
									//cek apakah ada error atau tidak
									var participationStatus = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (participationStatus.err_code == 0) {
										//cek jumdata dulu
										if (participationStatus.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": participationStatus.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Participation Status is not found"
											});
										}
									} else {
										res.json(participationStatus);
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		participationStatusCode: function getparticipationStatusCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,-]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('participationStatusCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getParticipationStatusCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var participationStatus = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (participationStatus.err_code == 0) {
									//cek jumdata dulu
									if (participationStatus.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": participationStatus.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Participant Status Code is not found"
										});
									}
								} else {
									res.json(participationStatus);
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		actEncounterCode: function getActEncounterCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('actEncounterCode', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getActEncounterCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var actEncounterCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (actEncounterCode.err_code == 0) {
									//cek jumdata dulu
									if (actEncounterCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": actEncounterCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Act Encounter Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": actEncounterCode.error,
										"application": "Api FHIR",
										"function": "getActEncounterCode"
									});
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('actEncounterCode', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getActEncounterCode"
									});
								} else {
									//cek apakah ada error atau tidak
									var actEncounterCode = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (actEncounterCode.err_code == 0) {
										//cek jumdata dulu
										if (actEncounterCode.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": actEncounterCode.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Act Encounter Code is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": actEncounterCode.error,
											"application": "Api FHIR",
											"function": "getActEncounterCode"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		actEncounterCodeCode: function getActEncounterCodeCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toUpperCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('actEncounterCodeCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getActEncounterCodeCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var addressType = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (addressType.err_code == 0) {
									//cek jumdata dulu
									if (addressType.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": addressType.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Act Encounter CodeCode Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": addressType.error,
										"application": "Api FHIR",
										"function": "getActEncounterCodeCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		actPriority: function getActPriority(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('actPriority', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getActPriority"
								});
							} else {
								//cek apakah ada error atau tidak
								var actPriority = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (actPriority.err_code == 0) {
									//cek jumdata dulu
									if (actPriority.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": actPriority.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Act Priority is not found "
										});
									}
								} else {
									res.json(actPriority);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('actPriority', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getActPriority"
									});
								} else {
									//cek apakah ada error atau tidak
									var actPriority = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (actPriority.err_code == 0) {
										//cek jumdata dulu
										if (actPriority.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": actPriority.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Act Priority is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": actPriority.error,
											"application": "Api FHIR",
											"function": "getActPriority"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		actPriorityCode: function getActPriorityCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toUpperCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('actPriorityCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getActPriorityCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var actPriorityCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (actPriorityCode.err_code == 0) {
									//cek jumdata dulu
									if (actPriorityCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": actPriorityCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "act Priority Code Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": actPriorityCode.error,
										"application": "Api FHIR",
										"function": "getActPriorityCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		accountStatus: function getAccountStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('accountStatus', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAccountStatus"
								});
							} else {
								//cek apakah ada error atau tidak
								var accountStatus = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (accountStatus.err_code == 0) {
									//cek jumdata dulu
									if (accountStatus.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": accountStatus.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Account Status is not found "
										});
									}
								} else {
									res.json(accountStatus);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('accountStatus', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getAccountStatus"
									});
								} else {
									//cek apakah ada error atau tidak
									var accountStatus = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (accountStatus.err_code == 0) {
										//cek jumdata dulu
										if (accountStatus.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": accountStatus.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Account Status is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": accountStatus.error,
											"application": "Api FHIR",
											"function": "getAccountStatus"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		accountStatusCode: function getAccountStatusCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('accountStatusCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAccountStatusCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var accountStatusCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (accountStatusCode.err_code == 0) {
									//cek jumdata dulu
									if (accountStatusCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": accountStatusCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Account Status Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": accountStatusCode.error,
										"application": "Api FHIR",
										"function": "getAccountStatusCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		accountType: function getAccountType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('accountType', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAccountType"
								});
							} else {
								//cek apakah ada error atau tidak
								var accountType = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (accountType.err_code == 0) {
									//cek jumdata dulu
									if (accountType.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": accountType.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Account Type is not found "
										});
									}
								} else {
									res.json(accountType);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('accountType', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getAccountType"
									});
								} else {
									//cek apakah ada error atau tidak
									var accountType = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (accountType.err_code == 0) {
										//cek jumdata dulu
										if (accountType.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": accountType.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Account Status is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": accountType.error,
											"application": "Api FHIR",
											"function": "getAccountType"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		accountTypeCode: function getAccountTypeCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase(); //.replace(/[^\w\s ,]/gi, '')

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('accountTypeCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getAccountTypeCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var accountTypeCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (accountTypeCode.err_code == 0) {
									//cek jum data dulu
									if (accountTypeCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": accountTypeCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Account Type Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": accountTypeCode.error,
										"application": "Api FHIR",
										"function": "getAccountTypeCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		diagnosisRole: function getDiagnosisRole(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('diagnosisRole', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getDiagnosisRole"
								});
							} else {
								//cek apakah ada error atau tidak
								var diagnosisRole = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (diagnosisRole.err_code == 0) {
									//cek jumdata dulu
									if (diagnosisRole.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": diagnosisRole.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Diagnosis Role Code is not found "
										});
									}
								} else {
									res.json(diagnosisRole);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('diagnosisRole', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getDiagnosisRole"
									});
								} else {
									//cek apakah ada error atau tidak
									var diagnosisRole = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (diagnosisRole.err_code == 0) {
										//cek jumdata dulu
										if (diagnosisRole.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": diagnosisRole.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Diagnosis Role Code is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": diagnosisRole.error,
											"application": "Api FHIR",
											"function": "getDiagnosisRole"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		diagnosisRoleCode: function getDiagnosisRoleCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('diagnosisRoleCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getDiagnosisRoleCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var diagnosisRoleCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (diagnosisRoleCode.err_code == 0) {
									//cek jum data dulu
									if (diagnosisRoleCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": diagnosisRoleCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Diagnosis Role Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": diagnosisRoleCode.error,
										"application": "Api FHIR",
										"function": "getDiagnosisRoleCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		encounterAdmitSource: function getEncounterAdmitSource(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('encounterAdmitSource', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterAdmitSource"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterAdmitSource = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (encounterAdmitSource.err_code == 0) {
									//cek jumdata dulu
									if (encounterAdmitSource.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterAdmitSource.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Admit Source is not found "
										});
									}
								} else {
									res.json(encounterAdmitSource);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('encounterAdmitSource', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getEncounterAdmitSource"
									});
								} else {
									//cek apakah ada error atau tidak
									var encounterAdmitSource = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (encounterAdmitSource.err_code == 0) {
										//cek jum data dulu
										if (encounterAdmitSource.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": encounterAdmitSource.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Encounter Admit Source is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": encounterAdmitSource.error,
											"application": "Api FHIR",
											"function": "getEncounterAdmitSource"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		encounterAdmitSourceCode: function getEncounterAdmitSourceCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase(); //.replace(/[^\w\s ,]/gi, '')

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('encounterAdmitSourceCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterAdmitSourceCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterAdmitSourceCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (encounterAdmitSourceCode.err_code == 0) {
									//cek jum data dulu
									if (encounterAdmitSourceCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterAdmitSourceCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter AdmitSource Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": encounterAdmitSourceCode.error,
										"application": "Api FHIR",
										"function": "getEncounterAdmitSourceCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		encounterDiet: function getEncounterDiet(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('encounterDiet', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterDiet"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterDiet = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (encounterDiet.err_code == 0) {
									//cek jumdata dulu
									if (encounterDiet.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterDiet.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Diet is not found "
										});
									}
								} else {
									res.json(encounterDiet);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('encounterDiet', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getEncounterDiet"
									});
								} else {
									//cek apakah ada error atau tidak
									var encounterDiet = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (encounterDiet.err_code == 0) {
										//cek jum data dulu
										if (encounterDiet.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": encounterDiet.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Encounter Diet is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": encounterDiet.error,
											"application": "Api FHIR",
											"function": "getEncounterDiet"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		encounterDietCode: function getEncounterDietCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase(); //.replace(/[^\w\s ,]/gi, '')

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('encounterDietCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterDietCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterDietCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (encounterDietCode.err_code == 0) {
									//cek jum data dulu
									if (encounterDietCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterDietCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Diet Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": encounterDietCode.error,
										"application": "Api FHIR",
										"function": "getEncounterDietCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		encounterDischargeDisposition: function getEncounterDischargeDisposition(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('encounterDischargeDisposition', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterDischargeDisposition"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterDischargeDisposition = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (encounterDischargeDisposition.err_code == 0) {
									//cek jumdata dulu
									if (encounterDischargeDisposition.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterDischargeDisposition.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Discharge Disposition is not found "
										});
									}
								} else {
									res.json(encounterDischargeDisposition);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('encounterDischargeDisposition', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getEncounterDischargeDisposition"
									});
								} else {
									//cek apakah ada error atau tidak
									var encounterDischargeDisposition = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (encounterDischargeDisposition.err_code == 0) {
										//cek jum data dulu
										if (encounterDischargeDisposition.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": encounterDischargeDisposition.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Encounter Discharge Disposition is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": encounterDischargeDisposition.error,
											"application": "Api FHIR",
											"function": "getEncounterDischargeDisposition"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		encounterDischargeDispositionCode: function getEncounterDischargeDispositionCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase(); //.replace(/[^\w\s ,]/gi, '')

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('encounterDischargeDispositionCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterDischargeDispositionCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterDischargeDispositionCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (encounterDischargeDispositionCode.err_code == 0) {
									//cek jum data dulu
									if (encounterDischargeDispositionCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterDischargeDispositionCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Discharge Disposition Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": encounterDischargeDispositionCode.error,
										"application": "Api FHIR",
										"function": "getEncounterDischargeDispositionCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		encounterLocationStatus: function getEncounterLocationStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('encounterLocationStatus', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterLocationStatus"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterLocationStatus = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (encounterLocationStatus.err_code == 0) {
									//cek jumdata dulu
									if (encounterLocationStatus.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterLocationStatus.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Location Status is not found "
										});
									}
								} else {
									res.json(encounterLocationStatus);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('encounterLocationStatus', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getEncounterLocationStatus"
									});
								} else {
									//cek apakah ada error atau tidak
									var encounterLocationStatus = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (encounterLocationStatus.err_code == 0) {
										//cek jum data dulu
										if (encounterLocationStatus.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": encounterLocationStatus.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Encounter Location Status is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": encounterLocationStatus.error,
											"application": "Api FHIR",
											"function": "getEncounterLocationStatus"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		encounterLocationStatusCode: function getEncounterLocationStatusCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('encounterLocationStatusCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterLocationStatusCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterLocationStatusCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (encounterLocationStatusCode.err_code == 0) {
									//cek jum data dulu
									if (encounterLocationStatusCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterLocationStatusCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Location Status Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": encounterLocationStatusCode.error,
										"application": "Api FHIR",
										"function": "getEncounterLocationStatusCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		encounterParticipantType: function getEncounterParticipantType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			//var code = req.params.code;
			//var display =req.params.display;
			//var definition =req.params.definition;
			//var system = req.params.system;


			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('encounterParticipantType', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterParticipantType"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterParticipantType = JSON.parse(body);
								host = host;
								port = port;
								//system =(+ host + ':' + port + '/'+ apikey +'/' +system+);
								//cara cek error
								//console.log (actEncounterCode)	//192.168.56.101:2008/90867b984d2a5038ee21a190996b900b/encounter-participant-type
								//cek apakah ada error atau tidak
								if (encounterParticipantType.err_code == 0) {
									//cek jumdata dulu
									if (encounterParticipantType.data.length > 0) {
										for (i = 0; i < encounterParticipantType.data.length; i++) {
											encounterParticipantType.data[i].system = host + ':' + port + '/' + apikey + '/' + encounterParticipantType.data[i].system;
										}

										res.json({
											"err_code": 0,
											"data": encounterParticipantType.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Participant Type is not found "
										});
									}
								} else {
									res.json(encounterParticipantType);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('encounterParticipantType', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getEncounterParticipantType"
									});
								} else {
									//cek apakah ada error atau tidak
									var encounterParticipantType = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (encounterParticipantType.err_code == 0) {
										//cek jum data dulu
										if (encounterParticipantType.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": encounterParticipantType.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Encounter Participant Type is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": encounterParticipantType.error,
											"application": "Api FHIR",
											"function": "getEncounterParticipantType"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		encounterParticipantTypeCode: function getEncounterParticipantTypeCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var system = req.params.system.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('encounterParticipantTypeCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterParticipantTypeCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterParticipantTypeCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (encounterParticipantTypeCode.err_code == 0) {
									//cek jum data dulu
									if (encounterParticipantTypeCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterParticipantTypeCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Participant Type Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": encounterParticipantTypeCode.error,
										"application": "Api FHIR",
										"function": "getEncounterParticipantTypeCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		encounterReason: function getEncounterReason(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('encounterReason', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterReason"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterReason = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (encounterReason.err_code == 0) {
									//cek jumdata dulu
									if (encounterReason.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterReason.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Reason is not found "
										});
									}
								} else {
									res.json(encounterReason);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('encounterReason', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getEncounterReason"
									});
								} else {
									//cek apakah ada error atau tidak
									var encounterReason = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (encounterReason.err_code == 0) {
										//cek jum data dulu
										if (encounterReason.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": encounterReason.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Encounter Reason is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": encounterReason.error,
											"application": "Api FHIR",
											"function": "getEncounterReason"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		encounterReasonCode: function getEncounterReasonCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('encounterReasonCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterReasonCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterReasonCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (encounterReasonCode.err_code == 0) {
									//cek jum data dulu
									if (encounterReasonCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterReasonCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Reason Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": encounterReasonCode.error,
										"application": "Api FHIR",
										"function": "getEncounterReasonCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		encounterSpecialCourtesy: function getEncounterSpecialCourtesy(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('encounterSpecialCourtesy', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterSpecialCourtesy"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterSpecialCourtesy = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (encounterSpecialCourtesy.err_code == 0) {
									//cek jumdata dulu
									if (encounterSpecialCourtesy.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterSpecialCourtesy.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Special Courtesy is not found "
										});
									}
								} else {
									res.json(encounterSpecialCourtesy);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('encounterSpecialCourtesy', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getEncounterSpecialCourtesy"
									});
								} else {
									//cek apakah ada error atau tidak
									var encounterSpecialCourtesy = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (encounterSpecialCourtesy.err_code == 0) {
										//cek jum data dulu
										if (encounterSpecialCourtesy.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": encounterSpecialCourtesy.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": " Encounter Special Courtesy is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": encounterSpecialCourtesy.error,
											"application": "Api FHIR",
											"function": "getEncounterSpecialCourtesy"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		encounterSpecialCourtesyCode: function getEncounterSpecialCourtesyCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toUpperCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('encounterSpecialCourtesyCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterSpecialCourtesyCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterSpecialCourtesyCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (encounterSpecialCourtesyCode.err_code == 0) {
									//cek jum data dulu
									if (encounterSpecialCourtesyCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterSpecialCourtesyCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Special Courtesy Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": encounterSpecialCourtesyCode.error,
										"application": "Api FHIR",
										"function": "getEncounterSpecialCourtesyCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		encounterSpecialArrangements: function getEncounterSpecialArrangements(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('encounterSpecialArrangements', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterSpecialArrangements"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterSpecialArrangements = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (encounterSpecialArrangements.err_code == 0) {
									//cek jumdata dulu
									if (encounterSpecialArrangements.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterSpecialArrangements.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Special Arrangements is not found "
										});
									}
								} else {
									res.json(encounterSpecialArrangements);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('encounterSpecialArrangements', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getEncounterSpecialArrangements"
									});
								} else {
									//cek apakah ada error atau tidak
									var encounterSpecialArrangements = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (encounterSpecialArrangements.err_code == 0) {
										//cek jum data dulu
										if (encounterSpecialArrangements.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": encounterSpecialArrangements.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": " Encounter Special Arrangements is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": encounterSpecialArrangements.error,
											"application": "Api FHIR",
											"function": "getEncounterSpecialArrangements"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		encounterSpecialArrangementsCode: function getEncounterSpecialArrangementsCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase(); //.replace(/[^\w\s ,]/gi, '')

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('encounterSpecialArrangementsCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterSpecialArrangementsCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterSpecialArrangementsCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (encounterSpecialArrangementsCode.err_code == 0) {
									//cek jum data dulu
									if (encounterSpecialArrangementsCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterSpecialArrangementsCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Special Arrangements Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": encounterSpecialArrangementsCode.error,
										"application": "Api FHIR",
										"function": "getEncounterSpecialArrangementsCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		encounterStatus: function getEncounterStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('encounterStatus', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterStatus"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterStatus = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (encounterStatus.err_code == 0) {
									//cek jumdata dulu
									if (encounterStatus.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterStatus.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Status is not found "
										});
									}
								} else {
									res.json(encounterStatus);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('encounterStatus', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getEncounterStatus"
									});
								} else {
									//cek apakah ada error atau tidak
									var encounterStatus = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (encounterStatus.err_code == 0) {
										//cek jum data dulu
										if (encounterStatus.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": encounterStatus.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": " Encounter Status is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": encounterStatus.error,
											"application": "Api FHIR",
											"function": "getEncounterStatus"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		encounterStatusCode: function getEncounterStatusCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('encounterStatusCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterStatusCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterStatusCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (encounterStatusCode.err_code == 0) {
									//cek jum data dulu
									if (encounterStatusCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterStatusCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Status Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": encounterStatusCode.error,
										"application": "Api FHIR",
										"function": "getEncounterStatusCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		encounterType: function getEncounterType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('encounterType', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterType"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterType = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (encounterType.err_code == 0) {
									//cek jumdata dulu
									if (encounterType.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterType.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Type is not found "
										});
									}
								} else {
									res.json(encounterType);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('encounterType', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getEncounterType"
									});
								} else {
									//cek apakah ada error atau tidak
									var encounterType = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (encounterType.err_code == 0) {
										//cek jum data dulu
										if (encounterType.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": encounterType.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": " Encounter Type is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": encounterType.error,
											"application": "Api FHIR",
											"function": "getEncounterType"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		encounterTypeCode: function getEncounterTypeCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace("/", "<or>").trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('encounterTypeCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEncounterTypeCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var encounterTypeCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (encounterTypeCode.err_code == 0) {
									//cek jum data dulu
									if (encounterTypeCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": encounterTypeCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Encounter Type Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": encounterTypeCode.error,
										"application": "Api FHIR",
										"function": "getEncounterTypeCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		episodeOfCareStatus: function getEpisodeOfCareStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('episodeOfCareStatus', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEpisodeOfCareStatus"
								});
							} else {
								//cek apakah ada error atau tidak
								var episodeOfCareStatus = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (episodeOfCareStatus.err_code == 0) {
									//cek jumdata dulu
									if (episodeOfCareStatus.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": episodeOfCareStatus.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Episode Of Care Status is not found "
										});
									}
								} else {
									res.json(episodeOfCareStatus);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('episodeOfCareStatus', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getEpisodeOfCareStatus"
									});
								} else {
									//cek apakah ada error atau tidak
									var episodeOfCareStatus = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (episodeOfCareStatus.err_code == 0) {
										//cek jum data dulu
										if (episodeOfCareStatus.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": episodeOfCareStatus.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Episode Of Care Status is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": episodeOfCareStatus.error,
											"application": "Api FHIR",
											"function": "getEpisodeOfCareStatus"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		episodeOfCareStatusCode: function getEpisodeOfCareStatusCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('episodeOfCareStatusCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEpisodeOfCareStatusCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var episodeOfCareStatusCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (episodeOfCareStatusCode.err_code == 0) {
									//cek jum data dulu
									if (episodeOfCareStatusCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": episodeOfCareStatusCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Episode Of Care Status Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": episodeOfCareStatusCode.error,
										"application": "Api FHIR",
										"function": "getEpisodeOfCareStatusCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		episodeOfCareType: function getEpisodeOfCareType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('episodeOfCareType', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEpisodeOfCareType"
								});
							} else {
								//cek apakah ada error atau tidak
								var episodeOfCareType = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (episodeOfCareType.err_code == 0) {
									//cek jumdata dulu
									if (episodeOfCareType.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": episodeOfCareType.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Episode Of Care Type is not found "
										});
									}
								} else {
									res.json(episodeOfCareType);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('episodeOfCareType', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getEpisodeOfCareType"
									});
								} else {
									//cek apakah ada error atau tidak
									var episodeOfCareType = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (episodeOfCareType.err_code == 0) {
										//cek jum data dulu
										if (episodeOfCareType.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": episodeOfCareType.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": " Episode Of Care Type is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": episodeOfCareType.error,
											"application": "Api FHIR",
											"function": "getEpisodeOfCareType"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		episodeOfCareTypeCode: function getEpisodeOfCareTypeCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('episodeOfCareTypeCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getEpisodeOfCareTypeCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var episodeOfCareTypeCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (episodeOfCareTypeCode.err_code == 0) {
									//cek jum data dulu
									if (episodeOfCareTypeCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": episodeOfCareTypeCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Episode Of Care  Type Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": episodeOfCareTypeCode.error,
										"application": "Api FHIR",
										"function": "getEpisodeOfCareTypeCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		flagStatus: function getFlagStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('flagStatus', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getFlagStatus"
								});
							} else {
								//cek apakah ada error atau tidak
								var flagStatus = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (flagStatus.err_code == 0) {
									//cek jumdata dulu
									if (flagStatus.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": flagStatus.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Flag Status is not found "
										});
									}
								} else {
									res.json(flagStatus);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('flagStatus', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getFlagStatus"
									});
								} else {
									//cek apakah ada error atau tidak
									var flagStatus = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (flagStatus.err_code == 0) {
										//cek jum data dulu
										if (flagStatus.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": flagStatus.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": " Flag Status is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": flagStatus.error,
											"application": "Api FHIR",
											"function": "getFlagStatus"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		flagStatusCode: function getFlagStatusCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('flagStatusCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getFlagStatusCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var flagStatusCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (flagStatusCode.err_code == 0) {
									//cek jum data dulu
									if (flagStatusCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": flagStatusCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Flag Status Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": flagStatusCode.error,
										"application": "Api FHIR",
										"function": "getFlagStatusCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		flagCategory: function getFlagCategory(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('flagCategory', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getFlagCategory"
								});
							} else {
								//cek apakah ada error atau tidak
								var flagCategory = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (flagCategory.err_code == 0) {
									//cek jumdata dulu
									if (flagCategory.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": flagCategory.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Flag  Category is not found "
										});
									}
								} else {
									res.json(flagCategory);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('flagCategory', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getFlagCategory"
									});
								} else {
									//cek apakah ada error atau tidak
									var flagCategory = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (flagCategory.err_code == 0) {
										//cek jum data dulu
										if (flagCategory.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": flagCategory.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Flag  Category is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": flagCategory.error,
											"application": "Api FHIR",
											"function": "getFlagCategory"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		flagCategoryCode: function getFlagCategoryCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('flagCategoryCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getFlagCategoryCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var flagCategoryCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (flagCategoryCode.err_code == 0) {
									//cek jum data dulu
									if (flagCategoryCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": flagCategoryCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Flag  Category Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": flagCategoryCode.error,
										"application": "Api FHIR",
										"function": "getFlagCategoryCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		flagCode: function getFlagCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('flagCode', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getFlagCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var flagCode = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (flagCode.err_code == 0) {
									//cek jumdata dulu
									if (flagCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": flagCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Flag Code is not found "
										});
									}
								} else {
									res.json(flagCode);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('flagCode', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getFlagCode"
									});
								} else {
									//cek apakah ada error atau tidak
									var flagCode = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (flagCode.err_code == 0) {
										//cek jum data dulu
										if (flagCode.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": flagCode.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Flag Code is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": flagCode.error,
											"application": "Api FHIR",
											"function": "getFlagCode"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		flagCodeCode: function getFlagCodeCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('flagCodeCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getFlagCodeCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var flagCodeCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (flagCodeCode.err_code == 0) {
									//cek jum data dulu
									if (flagCodeCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": flagCodeCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Flag Code Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": flagCodeCode.error,
										"application": "Api FHIR",
										"function": "getFlagCodeCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		reAdmissionIndicator: function getReAdmissionIndicator(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			checkApikey(apikey, ipAddres, function (result) {
				if (result.err_code == 0) {
					if (_id == "" || typeof _id == 'undefined') {
						//method, endpoint, params, options, callback
						ApiFHIR.get('reAdmissionIndicator', {
							"apikey": apikey,
							"_id": 0
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getReAdmissionIndicator"
								});
							} else {
								//cek apakah ada error atau tidak
								var reAdmissionIndicator = JSON.parse(body);
								//cara cek error
								//console.log (actEncounterCode)
								//cek apakah ada error atau tidak
								if (reAdmissionIndicator.err_code == 0) {
									//cek jumdata dulu
									if (reAdmissionIndicator.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": reAdmissionIndicator.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Re Admission Indicator is not found "
										});
									}
								} else {
									res.json(reAdmissionIndicator);
								}
							}
						})
					} else {
						if (validator.isInt(_id)) {
							ApiFHIR.get('reAdmissionIndicator', {
								"apikey": apikey,
								"_id": _id
							}, {}, function (error, response, body) {
								if (error) {
									res.json({
										"err_code": 1,
										"err_msg": error,
										"application": "Api FHIR",
										"function": "getReAdmissionIndicator"
									});
								} else {
									//cek apakah ada error atau tidak
									var reAdmissionIndicator = JSON.parse(body);

									//cek apakah ada error atau tidak
									if (reAdmissionIndicator.err_code == 0) {
										//cek jum data dulu
										if (reAdmissionIndicator.data.length > 0) {
											res.json({
												"err_code": 0,
												"data": reAdmissionIndicator.data
											});
										} else {
											res.json({
												"err_code": 2,
												"err_msg": "Re Admission Indicator is not found"
											});
										}
									} else {
										res.json({
											"err_code": 3,
											"err_msg": reAdmissionIndicator.error,
											"application": "Api FHIR",
											"function": "getReAdmissionIndicator"
										});
									}
								}
							})
						} else {
							res.json({
								"err_code": 4,
								"err_msg": "Id must be a number."
							});
						}

					}
				} else {
					result.err_code = 500;
					res.json(result);
				}
			});
		},
		reAdmissionIndicatorCode: function getReAdmissionIndicatorCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if (code == "" || typeof code == 'undefined') {
				res.json({
					"err_code": 4,
					"err_msg": "Code is required."
				});
			} else {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						ApiFHIR.get('reAdmissionIndicatorCode', {
							"apikey": apikey,
							"code": code
						}, {}, function (error, response, body) {
							if (error) {
								res.json({
									"err_code": 1,
									"err_msg": error,
									"application": "Api FHIR",
									"function": "getReAdmissionIndicatorCode"
								});
							} else {
								//cek apakah ada error atau tidak
								var reAdmissionIndicatorCode = JSON.parse(body);

								//cek apakah ada error atau tidak
								if (reAdmissionIndicatorCode.err_code == 0) {
									//cek jum data dulu
									if (reAdmissionIndicatorCode.data.length > 0) {
										res.json({
											"err_code": 0,
											"data": reAdmissionIndicatorCode.data
										});
									} else {
										res.json({
											"err_code": 2,
											"err_msg": "Re Admission Indicator Code is not found"
										});
									}
								} else {
									res.json({
										"err_code": 3,
										"err_msg": reAdmissionIndicatorCode.error,
										"application": "Api FHIR",
										"function": "getReAdmissionIndicatorCode"
									});
								}
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			}
		},
		udiEntryType: function getUdiEntryType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('udiEntryType', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getUdiEntryType"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var udiEntryType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(udiEntryType.err_code == 0){
								  	//cek jumdata dulu
								  	if(udiEntryType.data.length > 0){
								  		res.json({"err_code": 0, "data":udiEntryType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Udi Entry Type is not found"});	
								  	}
							  	}else{
							  		res.json(udiEntryType);
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('udiEntryType', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getUdiEntryType"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var udiEntryType = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(udiEntryType.err_code == 0){
									  	//cek jumdata dulu
									  	if(udiEntryType.data.length > 0){
									  		res.json({"err_code": 0, "data":udiEntryType.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Udi Entry Type is not found"});	
									  	}
								  	}else{
								  		res.json(udiEntryType);
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		udiEntryTypeCode: function getUdiEntryTypeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('udiEntryTypeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getUdiEntryTypeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var udiEntryType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(udiEntryType.err_code == 0){
								  	//cek jumdata dulu
								  	if(udiEntryType.data.length > 0){
								  		res.json({"err_code": 0, "data":udiEntryType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Udi Entry Type Code is not found"});	
								  	}
							  	}else{
							  		res.json(udiEntryType);
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}
		},
		deviceStatus: function getDeviceStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('deviceStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDeviceStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var deviceStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(deviceStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(deviceStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":deviceStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Device Status is not found"});	
								  	}
							  	}else{
							  		res.json(deviceStatus);
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('deviceStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDeviceStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var deviceStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(deviceStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(deviceStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":deviceStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Device Status is not found"});	
									  	}
								  	}else{
								  		res.json(deviceStatus);
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		deviceStatusCode: function getDeviceStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('udiEntryTypeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getUdiEntryTypeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var udiEntryType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(udiEntryType.err_code == 0){
								  	//cek jumdata dulu
								  	if(udiEntryType.data.length > 0){
								  		res.json({"err_code": 0, "data":udiEntryType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Udi Entry Type Code is not found"});	
								  	}
							  	}else{
							  		res.json(udiEntryType);
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}
		},
		deviceKind: function getdeviceKind(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('deviceKind', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getdeviceKind"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var deviceKind = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(deviceKind.err_code == 0){
								  	//cek jumdata dulu
								  	if(deviceKind.data.length > 0){
								  		res.json({"err_code": 0, "data":deviceKind.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Device Kind is not found"});	
								  	}
							  	}else{
							  		res.json(deviceKind);
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('deviceKind', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getdeviceKind"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var deviceKind = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(deviceKind.err_code == 0){
									  	//cek jumdata dulu
									  	if(deviceKind.data.length > 0){
									  		res.json({"err_code": 0, "data":deviceKind.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Device Kind is not found"});	
									  	}
								  	}else{
								  		res.json(deviceKind);
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		deviceKindCode: function getdeviceKindCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('deviceKindCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getdeviceKindCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var deviceKind = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(deviceKind.err_code == 0){
								  	//cek jumdata dulu
								  	if(deviceKind.data.length > 0){
								  		res.json({"err_code": 0, "data":deviceKind.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Device Kind Code is not found"});	
								  	}
							  	}else{
							  		res.json(deviceKind);
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}
		},
		deviceSafety: function getDeviceSafety(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('deviceSafety', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDeviceSafety"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var deviceSafety = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(deviceSafety.err_code == 0){
								  	//cek jumdata dulu
								  	if(deviceSafety.data.length > 0){
								  		res.json({"err_code": 0, "data":deviceSafety.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Device Safety is not found"});	
								  	}
							  	}else{
							  		res.json(deviceSafety);
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('deviceSafety', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDeviceSafety"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var deviceSafety = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(deviceSafety.err_code == 0){
									  	//cek jumdata dulu
									  	if(deviceSafety.data.length > 0){
									  		res.json({"err_code": 0, "data":deviceSafety.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Device Safety is not found"});	
									  	}
								  	}else{
								  		res.json(deviceSafety);
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		deviceSafetyCode: function getDeviceSafetyCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toUpperCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('deviceSafetyCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDeviceSafetyCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var deviceSafety = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(deviceSafety.err_code == 0){
								  	//cek jumdata dulu
								  	if(deviceSafety.data.length > 0){
								  		res.json({"err_code": 0, "data":deviceSafety.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Device Safety Code is not found"});	
								  	}
							  	}else{
							  		res.json(deviceSafety);
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}
		},
		operationalStatus: function getOperationalStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('operationalStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getOperationalStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var operationalStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(operationalStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(operationalStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":operationalStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Operational Status is not found"});	
								  	}
							  	}else{
							  		res.json(operationalStatus);
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('operationalStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getOperationalStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var operationalStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(operationalStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(operationalStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":operationalStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Operational Status is not found"});	
									  	}
								  	}else{
								  		res.json(operationalStatus);
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		operationalStatusCode: function getOperationalStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,-]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('operationalStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getOperationalStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var operationalStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(operationalStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(operationalStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":operationalStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Operational Status Code is not found"});	
								  	}
							  	}else{
							  		res.json(operationalStatus);
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}
		},
		parameterGroup: function getParameterGroup(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('parameterGroup', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getParameterGroup"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var parameterGroup = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(parameterGroup.err_code == 0){
								  	//cek jumdata dulu
								  	if(parameterGroup.data.length > 0){
								  		res.json({"err_code": 0, "data":parameterGroup.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Parameter Group is not found"});	
								  	}
							  	}else{
							  		res.json(parameterGroup);
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('parameterGroup', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getParameterGroup"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var parameterGroup = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(parameterGroup.err_code == 0){
									  	//cek jumdata dulu
									  	if(parameterGroup.data.length > 0){
									  		res.json({"err_code": 0, "data":parameterGroup.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Parameter Group is not found"});	
									  	}
								  	}else{
								  		res.json(parameterGroup);
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		parameterGroupCode: function getParameterGroupCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,-]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('parameterGroupCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getParameterGroupCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var parameterGroup = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(parameterGroup.err_code == 0){
								  	//cek jumdata dulu
								  	if(parameterGroup.data.length > 0){
								  		res.json({"err_code": 0, "data":parameterGroup.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Parameter Group Code is not found"});	
								  	}
							  	}else{
							  		res.json(parameterGroup);
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}
		},
		measurementPrinciple: function getMeasurementPrinciple(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('measurementPrinciple', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMeasurementPrinciple"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var measurementPrinciple = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(measurementPrinciple.err_code == 0){
								  	//cek jumdata dulu
								  	if(measurementPrinciple.data.length > 0){
								  		res.json({"err_code": 0, "data":measurementPrinciple.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Measurement Principle is not found"});	
								  	}
							  	}else{
							  		res.json(measurementPrinciple);
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('measurementPrinciple', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMeasurementPrinciple"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var measurementPrinciple = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(measurementPrinciple.err_code == 0){
									  	//cek jumdata dulu
									  	if(measurementPrinciple.data.length > 0){
									  		res.json({"err_code": 0, "data":measurementPrinciple.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Measurement Principle is not found"});	
									  	}
								  	}else{
								  		res.json(measurementPrinciple);
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		measurementPrincipleCode: function getMeasurementPrincipleCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,-]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('measurementPrincipleCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMeasurementPrincipleCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var measurementPrinciple = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(measurementPrinciple.err_code == 0){
								  	//cek jumdata dulu
								  	if(measurementPrinciple.data.length > 0){
								  		res.json({"err_code": 0, "data":measurementPrinciple.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Measurement Principle Code is not found"});	
								  	}
							  	}else{
							  		res.json(measurementPrinciple);
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}
		},
		specificationType: function getSpecificationType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('specificationType', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getSpecificationType"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var specificationType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(specificationType.err_code == 0){
								  	//cek jumdata dulu
								  	if(specificationType.data.length > 0){
								  		res.json({"err_code": 0, "data":specificationType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Specification Type is not found"});	
								  	}
							  	}else{
							  		res.json(specificationType);
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('specificationType', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getSpecificationType"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var specificationType = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(specificationType.err_code == 0){
									  	//cek jumdata dulu
									  	if(specificationType.data.length > 0){
									  		res.json({"err_code": 0, "data":specificationType.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Specification Type is not found"});	
									  	}
								  	}else{
								  		res.json(specificationType);
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		specificationTypeCode: function getSpecificationTypeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,-]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('specificationTypeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getSpecificationTypeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var specificationType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(specificationType.err_code == 0){
								  	//cek jumdata dulu
								  	if(specificationType.data.length > 0){
								  		res.json({"err_code": 0, "data":specificationType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Specification Type Code is not found"});	
								  	}
							  	}else{
							  		res.json(specificationType);
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}
		},
		metricOperationalStatus: function getMetricOperationalStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('metricOperationalStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMetricOperationalStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var metricOperationalStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(metricOperationalStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(metricOperationalStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":metricOperationalStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Metric Operational Status is not found"});	
								  	}
							  	}else{
							  		res.json(metricOperationalStatus);
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('metricOperationalStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMetricOperationalStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var metricOperationalStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(metricOperationalStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(metricOperationalStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":metricOperationalStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Metric Operational Status is not found"});	
									  	}
								  	}else{
								  		res.json(metricOperationalStatus);
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		metricOperationalStatusCode: function getMetricOperationalStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,-]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('metricOperationalStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMetricOperationalStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var metricOperationalStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(metricOperationalStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(metricOperationalStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":metricOperationalStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Metric Operational Status Code is not found"});	
								  	}
							  	}else{
							  		res.json(metricOperationalStatus);
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}
		},
		deviceMetricType: function getDeviceMetricType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('deviceMetricType', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDeviceMetricType"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var deviceMetricType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(deviceMetricType.err_code == 0){
								  	//cek jumdata dulu
								  	if(deviceMetricType.data.length > 0){
								  		res.json({"err_code": 0, "data":deviceMetricType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Device Metric Type is not found"});	
								  	}
							  	}else{
							  		res.json(deviceMetricType);
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('deviceMetricType', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDeviceMetricType"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var deviceMetricType = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(deviceMetricType.err_code == 0){
									  	//cek jumdata dulu
									  	if(deviceMetricType.data.length > 0){
									  		res.json({"err_code": 0, "data":deviceMetricType.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Device Metric Type is not found"});	
									  	}
								  	}else{
								  		res.json(deviceMetricType);
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		deviceMetricTypeCode: function getDeviceMetricTypeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,-:]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('deviceMetricTypeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDeviceMetricTypeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var deviceMetricType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(deviceMetricType.err_code == 0){
								  	//cek jumdata dulu
								  	if(deviceMetricType.data.length > 0){
								  		res.json({"err_code": 0, "data":deviceMetricType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Device Metric Type Code is not found"});	
								  	}
							  	}else{
							  		res.json(deviceMetricType);
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}
		},
		metricColor: function getMetricColor(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('metricColor', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMetricColor"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var metricColor = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(metricColor.err_code == 0){
								  	//cek jumdata dulu
								  	if(metricColor.data.length > 0){
								  		res.json({"err_code": 0, "data":metricColor.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Metric Color is not found"});	
								  	}
							  	}else{
							  		res.json(metricColor);
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('metricColor', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMetricColor"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var metricColor = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(metricColor.err_code == 0){
									  	//cek jumdata dulu
									  	if(metricColor.data.length > 0){
									  		res.json({"err_code": 0, "data":metricColor.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Metric Color is not found"});	
									  	}
								  	}else{
								  		res.json(metricColor);
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		metricColorCode: function getMetricColorCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,-:]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('metricColorCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMetricColorCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var metricColor = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(metricColor.err_code == 0){
								  	//cek jumdata dulu
								  	if(metricColor.data.length > 0){
								  		res.json({"err_code": 0, "data":metricColor.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Metric Color Code is not found"});	
								  	}
							  	}else{
							  		res.json(metricColor);
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}
		},
		metricCategory: function getMetricCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('metricCategory', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMetricCategory"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var metricCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(metricCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(metricCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":metricCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Metric Category is not found"});	
								  	}
							  	}else{
							  		res.json(metricCategory);
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('metricCategory', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMetricCategory"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var metricCategory = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(metricCategory.err_code == 0){
									  	//cek jumdata dulu
									  	if(metricCategory.data.length > 0){
									  		res.json({"err_code": 0, "data":metricCategory.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Metric Category is not found"});	
									  	}
								  	}else{
								  		res.json(metricCategory);
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		metricCategoryCode: function getMetricCategoryCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,-:]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('metricCategoryCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMetricCategoryCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var metricCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(metricCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(metricCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":metricCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Metric Category Code is not found"});	
								  	}
							  	}else{
							  		res.json(metricCategory);
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}
		},
		metricCalibrationType: function getMetricCalibrationType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('metricCalibrationType', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMetricCalibrationType"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var metricCalibrationType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(metricCalibrationType.err_code == 0){
								  	//cek jumdata dulu
								  	if(metricCalibrationType.data.length > 0){
								  		res.json({"err_code": 0, "data":metricCalibrationType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Metric Calibration Type is not found"});	
								  	}
							  	}else{
							  		res.json(metricCalibrationType);
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('metricCalibrationType', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMetricCalibrationType"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var metricCalibrationType = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(metricCalibrationType.err_code == 0){
									  	//cek jumdata dulu
									  	if(metricCalibrationType.data.length > 0){
									  		res.json({"err_code": 0, "data":metricCalibrationType.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Metric Calibration Type is not found"});	
									  	}
								  	}else{
								  		res.json(metricCalibrationType);
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		metricCalibrationTypeCode: function getMetricCalibrationTypeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,-:]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('metricCalibrationTypeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMetricCalibrationTypeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var metricCalibrationType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(metricCalibrationType.err_code == 0){
								  	//cek jumdata dulu
								  	if(metricCalibrationType.data.length > 0){
								  		res.json({"err_code": 0, "data":metricCalibrationType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Metric Calibration Type Code is not found"});	
								  	}
							  	}else{
							  		res.json(metricCalibrationType);
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}
		},
		metricCalibrationState: function getMetricCalibrationState(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('metricCalibrationState', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMetricCalibrationState"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var metricCalibrationState = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(metricCalibrationState.err_code == 0){
								  	//cek jumdata dulu
								  	if(metricCalibrationState.data.length > 0){
								  		res.json({"err_code": 0, "data":metricCalibrationState.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Metric Calibration State is not found"});	
								  	}
							  	}else{
							  		res.json(metricCalibrationState);
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('metricCalibrationState', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMetricCalibrationState"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var metricCalibrationState = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(metricCalibrationState.err_code == 0){
									  	//cek jumdata dulu
									  	if(metricCalibrationState.data.length > 0){
									  		res.json({"err_code": 0, "data":metricCalibrationState.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Metric Calibration State is not found"});	
									  	}
								  	}else{
								  		res.json(metricCalibrationState);
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		metricCalibrationStateCode: function getMetricCalibrationStateCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,-:]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('metricCalibrationStateCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMetricCalibrationStateCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var metricCalibrationState = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(metricCalibrationState.err_code == 0){
								  	//cek jumdata dulu
								  	if(metricCalibrationState.data.length > 0){
								  		res.json({"err_code": 0, "data":metricCalibrationState.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Metric Calibration State Code is not found"});	
								  	}
							  	}else{
							  		res.json(metricCalibrationState);
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}
		},
    substanceStatus: function getSubstanceStatus(req, res){
      var ipAddres = req.connection.remoteAddress;
      var apikey = req.params.apikey;
      var _id = req.params._id;

      
      checkApikey(apikey, ipAddres, function(result){
        if(result.err_code == 0){
          if(_id == "" || typeof _id == 'undefined'){
            //method, endpoint, params, options, callback
            ApiFHIR.get('substanceStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
              if(error){
                  res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getSubstanceStatus"});
                }else{
                  //cek apakah ada error atau tidak
                  var substanceStatus = JSON.parse(body); 
                  
                  //cek apakah ada error atau tidak
                  if(substanceStatus.err_code == 0){
                    //cek jumdata dulu
                    if(substanceStatus.data.length > 0){
                      res.json({"err_code": 0, "data":substanceStatus.data});
                    }else{
                      res.json({"err_code": 2, "err_msg": "Substance Status is not found"});  
                    }
                  }else{
                    res.json(substanceStatus);
                  }
                }
            })  
          }else{
            if(validator.isInt(_id)){
              ApiFHIR.get('substanceStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
                if(error){
                    res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getSubstanceStatus"});
                  }else{
                    //cek apakah ada error atau tidak
                    var substanceStatus = JSON.parse(body); 
                    
                    //cek apakah ada error atau tidak
                    if(substanceStatus.err_code == 0){
                      //cek jumdata dulu
                      if(substanceStatus.data.length > 0){
                        res.json({"err_code": 0, "data":substanceStatus.data});
                      }else{
                        res.json({"err_code": 2, "err_msg": "Substance Status is not found"});  
                      }
                    }else{
                      res.json(substanceStatus);
                    }
                  }
              })
            }else{
              res.json({"err_code": 4, "err_msg": "Id must be a number."});
            }
            
          }
        }else{
          result.err_code = 500;
          res.json(result);
        } 
      });
    },
    substanceStatusCode: function getSubstanceStatusCode(req, res){
      var ipAddres = req.connection.remoteAddress;
      var apikey = req.params.apikey;
      var code = req.params.code.replace(/[^\w\s ,-:]/gi, '').trim().toLowerCase();

      if(code == "" || typeof code == 'undefined'){
        res.json({"err_code": 4, "err_msg": "Code is required."});
      }else{
        checkApikey(apikey, ipAddres, function(result){
          if(result.err_code == 0){ 
            ApiFHIR.get('substanceStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
              if(error){
                  res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getSubstanceStatusCode"});
                }else{
                  //cek apakah ada error atau tidak
                  var substanceStatus = JSON.parse(body); 
                  
                  //cek apakah ada error atau tidak
                  if(substanceStatus.err_code == 0){
                    //cek jumdata dulu
                    if(substanceStatus.data.length > 0){
                      res.json({"err_code": 0, "data":substanceStatus.data});
                    }else{
                      res.json({"err_code": 2, "err_msg": "Substance Status Code is not found"}); 
                    }
                  }else{
                    res.json(substanceStatus);
                  }
                }
            })
          }else{
            result.err_code = 500;
            res.json(result);
          } 
        });
      }
    },
    substanceCategory: function getSubstanceCategory(req, res){
      var ipAddres = req.connection.remoteAddress;
      var apikey = req.params.apikey;
      var _id = req.params._id;

      
      checkApikey(apikey, ipAddres, function(result){
        if(result.err_code == 0){
          if(_id == "" || typeof _id == 'undefined'){
            //method, endpoint, params, options, callback
            ApiFHIR.get('substanceCategory', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
              if(error){
                  res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getSubstanceCategory"});
                }else{
                  //cek apakah ada error atau tidak
                  var substanceCategory = JSON.parse(body); 
                  
                  //cek apakah ada error atau tidak
                  if(substanceCategory.err_code == 0){
                    //cek jumdata dulu
                    if(substanceCategory.data.length > 0){
                      res.json({"err_code": 0, "data":substanceCategory.data});
                    }else{
                      res.json({"err_code": 2, "err_msg": "Substance Category is not found"});  
                    }
                  }else{
                    res.json(substanceCategory);
                  }
                }
            })  
          }else{
            if(validator.isInt(_id)){
              ApiFHIR.get('substanceCategory', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
                if(error){
                    res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getSubstanceCategory"});
                  }else{
                    //cek apakah ada error atau tidak
                    var substanceCategory = JSON.parse(body); 
                    
                    //cek apakah ada error atau tidak
                    if(substanceCategory.err_code == 0){
                      //cek jumdata dulu
                      if(substanceCategory.data.length > 0){
                        res.json({"err_code": 0, "data":substanceCategory.data});
                      }else{
                        res.json({"err_code": 2, "err_msg": "Substance Category is not found"});  
                      }
                    }else{
                      res.json(substanceCategory);
                    }
                  }
              })
            }else{
              res.json({"err_code": 4, "err_msg": "Id must be a number."});
            }
            
          }
        }else{
          result.err_code = 500;
          res.json(result);
        } 
      });
    },
    substanceCategoryCode: function getSubstanceCategoryCode(req, res){
      var ipAddres = req.connection.remoteAddress;
      var apikey = req.params.apikey;
      var code = req.params.code.replace(/[^\w\s ,-:]/gi, '').trim().toLowerCase();

      if(code == "" || typeof code == 'undefined'){
        res.json({"err_code": 4, "err_msg": "Code is required."});
      }else{
        checkApikey(apikey, ipAddres, function(result){
          if(result.err_code == 0){ 
            ApiFHIR.get('substanceCategoryCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
              if(error){
                  res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getSubstanceCategoryCode"});
                }else{
                  //cek apakah ada error atau tidak
                  var substanceCategory = JSON.parse(body); 
                  
                  //cek apakah ada error atau tidak
                  if(substanceCategory.err_code == 0){
                    //cek jumdata dulu
                    if(substanceCategory.data.length > 0){
                      res.json({"err_code": 0, "data":substanceCategory.data});
                    }else{
                      res.json({"err_code": 2, "err_msg": "Substance Category Code is not found"}); 
                    }
                  }else{
                    res.json(substanceCategory);
                  }
                }
            })
          }else{
            result.err_code = 500;
            res.json(result);
          } 
        });
      }
    },
    substanceCode: function getSubstanceCode(req, res){
      var ipAddres = req.connection.remoteAddress;
      var apikey = req.params.apikey;
      var _id = req.params._id;

      
      checkApikey(apikey, ipAddres, function(result){
        if(result.err_code == 0){
          if(_id == "" || typeof _id == 'undefined'){
            //method, endpoint, params, options, callback
            ApiFHIR.get('substanceCode', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
              if(error){
                  res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getSubstanceCode"});
                }else{
                  //cek apakah ada error atau tidak
                  var substanceCode = JSON.parse(body); 
                  
                  //cek apakah ada error atau tidak
                  if(substanceCode.err_code == 0){
                    //cek jumdata dulu
                    if(substanceCode.data.length > 0){
                      res.json({"err_code": 0, "data":substanceCode.data});
                    }else{
                      res.json({"err_code": 2, "err_msg": "Substance Code is not found"});  
                    }
                  }else{
                    res.json(substanceCode);
                  }
                }
            })  
          }else{
            if(validator.isInt(_id)){
              ApiFHIR.get('substanceCode', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
                if(error){
                    res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getSubstanceCode"});
                  }else{
                    //cek apakah ada error atau tidak
                    var substanceCode = JSON.parse(body); 
                    
                    //cek apakah ada error atau tidak
                    if(substanceCode.err_code == 0){
                      //cek jumdata dulu
                      if(substanceCode.data.length > 0){
                        res.json({"err_code": 0, "data":substanceCode.data});
                      }else{
                        res.json({"err_code": 2, "err_msg": "Substance Code is not found"});  
                      }
                    }else{
                      res.json(substanceCode);
                    }
                  }
              })
            }else{
              res.json({"err_code": 4, "err_msg": "Id must be a number."});
            }
            
          }
        }else{
          result.err_code = 500;
          res.json(result);
        } 
      });
    },
    substanceCodeCode: function getSubstanceCodeCode(req, res){
      var ipAddres = req.connection.remoteAddress;
      var apikey = req.params.apikey;
      var code = req.params.code.replace(/[^\w\s ,-:]/gi, '').trim().toLowerCase();

      if(code == "" || typeof code == 'undefined'){
        res.json({"err_code": 4, "err_msg": "Code is required."});
      }else{
        checkApikey(apikey, ipAddres, function(result){
          if(result.err_code == 0){ 
            ApiFHIR.get('substanceCodeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
              if(error){
                  res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getSubstanceCodeCode"});
                }else{
                  //cek apakah ada error atau tidak
                  var substanceCode = JSON.parse(body); 
                  
                  //cek apakah ada error atau tidak
                  if(substanceCode.err_code == 0){
                    //cek jumdata dulu
                    if(substanceCode.data.length > 0){
                      res.json({"err_code": 0, "data":substanceCode.data});
                    }else{
                      res.json({"err_code": 2, "err_msg": "Substance Code, code is not found"}); 
                    }
                  }else{
                    res.json(substanceCode);
                  }
                }
            })
          }else{
            result.err_code = 500;
            res.json(result);
          } 
        });
      }
    },
		organizationType: function getOrganizationType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('organizationType', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getOrganizationType"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var organizationType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(organizationType.err_code == 0){
								  	//cek jumdata dulu
								  	if(organizationType.data.length > 0){
								  		res.json({"err_code": 0, "data":organizationType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Organization Type is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": organizationType.error, "application": "Api FHIR", "function": "getOrganizationType"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('organizationType', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getOrganizationType"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var organizationType = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(organizationType.err_code == 0){
									  	//cek jumdata dulu
									  	if(organizationType.data.length > 0){
									  		res.json({"err_code": 0, "data":organizationType.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Organization Type is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": organizationType.error, "application": "Api FHIR", "function": "getOrganizationType"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		organizationTypeCode: function getOrganizationTypeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('organizationTypeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getOrganizationTypeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var organizationType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(organizationType.err_code == 0){
								  	//cek jumdata dulu
								  	if(organizationType.data.length > 0){
								  		res.json({"err_code": 0, "data":organizationType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Organization Type Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": organizationType.error, "application": "Api FHIR", "function": "getOrganizationTypeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		contactentityType: function getContactentityType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('contactentityType', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getContactentityType"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var contactentityType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(contactentityType.err_code == 0){
								  	//cek jumdata dulu
								  	if(contactentityType.data.length > 0){
								  		res.json({"err_code": 0, "data":contactentityType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Contact Entity Type is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": contactentityType.error, "application": "Api FHIR", "function": "getContactentityType"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('contactentityType', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getContactentityType"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var contactentityType = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(contactentityType.err_code == 0){
									  	//cek jumdata dulu
									  	if(contactentityType.data.length > 0){
									  		res.json({"err_code": 0, "data":contactentityType.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Contact Entity Type is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": contactentityType.error, "application": "Api FHIR", "function": "getContactentityType"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		contactentityTypeCode: function getContactentityTypeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toUpperCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('contactentityTypeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getContactentityTypeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var contactentityType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(contactentityType.err_code == 0){
								  	//cek jumdata dulu
								  	if(contactentityType.data.length > 0){
								  		res.json({"err_code": 0, "data":contactentityType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Contactentity Type Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": contactentityType.error, "application": "Api FHIR", "function": "getContactentityTypeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		locationStatus: function getLocationStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('locationStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getLocationStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var locationStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(locationStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(locationStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":locationStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Location Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": locationStatus.error, "application": "Api FHIR", "function": "getLocationStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('locationStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getLocationStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var locationStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(locationStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(locationStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":locationStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Location Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": locationStatus.error, "application": "Api FHIR", "function": "getLocationStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		locationStatusCode: function getLocationStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('locationStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getLocationStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var locationStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(locationStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(locationStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":locationStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Location Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": locationStatus.error, "application": "Api FHIR", "function": "getLocationStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		bedStatus: function getBedStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('bedStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getBedStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var bedStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(bedStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(bedStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":bedStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Bed Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": bedStatus.error, "application": "Api FHIR", "function": "getBedStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('bedStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getBedStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var bedStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(bedStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(bedStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":bedStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Bed Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": bedStatus.error, "application": "Api FHIR", "function": "getBedStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		bedStatusCode: function getBedStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toUpperCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('bedStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getBedStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var bedStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(bedStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(bedStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":bedStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Bed Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": bedStatus.error, "application": "Api FHIR", "function": "getBedStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		locationMode: function getLocationMode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('locationMode', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getLocationMode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var locationMode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(locationMode.err_code == 0){
								  	//cek jumdata dulu
								  	if(locationMode.data.length > 0){
								  		res.json({"err_code": 0, "data":locationMode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Location Mode is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": locationMode.error, "application": "Api FHIR", "function": "getLocationMode"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('locationMode', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getLocationMode"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var locationMode = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(locationMode.err_code == 0){
									  	//cek jumdata dulu
									  	if(locationMode.data.length > 0){
									  		res.json({"err_code": 0, "data":locationMode.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Location Mode is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": locationMode.error, "application": "Api FHIR", "function": "getLocationMode"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		locationModeCode: function getLocationModeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('locationModeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getLocationModeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var locationMode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(locationMode.err_code == 0){
								  	//cek jumdata dulu
								  	if(locationMode.data.length > 0){
								  		res.json({"err_code": 0, "data":locationMode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Location Mode Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": locationMode.error, "application": "Api FHIR", "function": "getLocationModeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		serviceDeliveryLocationRoleType: function getServiceDeliveryLocationRoleType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('serviceDeliveryLocationRoleType', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getServiceDeliveryLocationRoleType"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var serviceDeliveryLocationRoleType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(serviceDeliveryLocationRoleType.err_code == 0){
								  	//cek jumdata dulu
								  	if(serviceDeliveryLocationRoleType.data.length > 0){
								  		res.json({"err_code": 0, "data":serviceDeliveryLocationRoleType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Service Delivery Location Role Type is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": serviceDeliveryLocationRoleType.error, "application": "Api FHIR", "function": "getServiceDeliveryLocationRoleType"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('serviceDeliveryLocationRoleType', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getServiceDeliveryLocationRoleType"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var serviceDeliveryLocationRoleType = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(serviceDeliveryLocationRoleType.err_code == 0){
									  	//cek jumdata dulu
									  	if(serviceDeliveryLocationRoleType.data.length > 0){
									  		res.json({"err_code": 0, "data":locationMode.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Service Delivery Location Role Type is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": serviceDeliveryLocationRoleType.error, "application": "Api FHIR", "function": "getServiceDeliveryLocationRoleType"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		serviceDeliveryLocationRoleTypeCode: function getServiceDeliveryLocationRoleTypeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toUpperCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('serviceDeliveryLocationRoleTypeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getServiceDeliveryLocationRoleTypeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var serviceDeliveryLocationRoleType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(serviceDeliveryLocationRoleType.err_code == 0){
								  	//cek jumdata dulu
								  	if(serviceDeliveryLocationRoleType.data.length > 0){
								  		res.json({"err_code": 0, "data":serviceDeliveryLocationRoleType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Service Delivery Location Role Type Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": serviceDeliveryLocationRoleType.error, "application": "Api FHIR", "function": "getServiceDeliveryLocationRoleTypeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		locationPhysicalType: function getLocationPhysicalType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('locationPhysicalType', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getLocationPhysicalType"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var locationPhysicalType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(locationPhysicalType.err_code == 0){
								  	//cek jumdata dulu
								  	if(locationPhysicalType.data.length > 0){
								  		res.json({"err_code": 0, "data":locationPhysicalType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Location Physical Type is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": locationPhysicalType.error, "application": "Api FHIR", "function": "getLocationPhysicalType"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('locationPhysicalType', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getLocationPhysicalType"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var locationPhysicalType = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(locationPhysicalType.err_code == 0){
									  	//cek jumdata dulu
									  	if(locationPhysicalType.data.length > 0){
									  		res.json({"err_code": 0, "data":locationPhysicalType.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Location Physical Type is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": locationPhysicalType.error, "application": "Api FHIR", "function": "getLocationPhysicalType"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		locationPhysicalTypeCode: function getLocationPhysicalTypeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('locationPhysicalTypeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getLocationPhysicalType"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var locationPhysicalType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(locationPhysicalType.err_code == 0){
								  	//cek jumdata dulu
								  	if(locationPhysicalType.data.length > 0){
								  		res.json({"err_code": 0, "data":locationPhysicalType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Location Physical Type Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": locationPhysicalType.error, "application": "Api FHIR", "function": "getLocationPhysicalTypeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		qualificationCode: function getQualificationCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('qualificationCode', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getQualificationCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var qualificationCode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(qualificationCode.err_code == 0){
								  	//cek jumdata dulu
								  	if(qualificationCode.data.length > 0){
								  		res.json({"err_code": 0, "data":qualificationCode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Qualification Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": qualificationCode.error, "application": "Api FHIR", "function": "getQualificationCode"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('qualificationCode', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getQualificationCode"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var qualificationCode = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(qualificationCode.err_code == 0){
									  	//cek jumdata dulu
									  	if(qualificationCode.data.length > 0){
									  		res.json({"err_code": 0, "data":qualificationCode.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Qualification Code is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": qualificationCode.error, "application": "Api FHIR", "function": "getQualificationCode"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		qualificationCodeCode: function getQualificationCodeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toUpperCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('qualificationCodeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getQualificationCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var qualificationCode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(qualificationCode.err_code == 0){
								  	//cek jumdata dulu
								  	if(qualificationCode.data.length > 0){
								  		res.json({"err_code": 0, "data":qualificationCode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Qualification Code Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": qualificationCode.error, "application": "Api FHIR", "function": "getQualificationCodeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		practitionerRoleCode: function getPractitionerRoleCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('practitionerRoleCode', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getPractitionerRoleCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var practitionerRoleCode = JSON.parse(body); 
							  	//cek apakah ada error atau tidak
							  	if(practitionerRoleCode.err_code == 0){
								  	//cek jumdata dulu
								  	if(practitionerRoleCode.data.length > 0){
								  		res.json({"err_code": 0, "data":practitionerRoleCode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Practitioner Role Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": practitionerRoleCode.error, "application": "Api FHIR", "function": "getPractitionerRoleCode"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('practitionerRoleCode', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getPractitionerRoleCode"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var practitionerRoleCode = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(practitionerRoleCode.err_code == 0){
									  	//cek jumdata dulu
									  	if(practitionerRoleCode.data.length > 0){
									  		res.json({"err_code": 0, "data":practitionerRoleCode.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Practitioner Role Code is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": practitionerRoleCode.error, "application": "Api FHIR", "function": "getPractitionerRoleCode"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		practitionerRoleCodeCode: function getPractitionerRoleCodeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('practitionerRoleCodeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getPractitionerRoleCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var practitionerRoleCode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(practitionerRoleCode.err_code == 0){
								  	//cek jumdata dulu
								  	if(practitionerRoleCode.data.length > 0){
								  		res.json({"err_code": 0, "data":practitionerRoleCode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Practitioner Role Code Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": practitionerRoleCode.error, "application": "Api FHIR", "function": "getPractitionerRoleCodeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		practiceCode: function getPracticeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('practiceCode', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getPracticeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var practiceCode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(practiceCode.err_code == 0){
								  	//cek jumdata dulu
								  	if(practiceCode.data.length > 0){
								  		res.json({"err_code": 0, "data":practiceCode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Practice Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": practiceCode.error, "application": "Api FHIR", "function": "getPracticeCode"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('practiceCode', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getPracticeCode"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var practiceCode = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(practiceCode.err_code == 0){
									  	//cek jumdata dulu
									  	if(practiceCode.data.length > 0){
									  		res.json({"err_code": 0, "data":practiceCode.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Practice Code is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": practiceCode.error, "application": "Api FHIR", "function": "getPracticeCode"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		practiceCodeCode: function getPracticeCodeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('practiceCodeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getPracticeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var practiceCode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(practiceCode.err_code == 0){
								  	//cek jumdata dulu
								  	if(practiceCode.data.length > 0){
								  		res.json({"err_code": 0, "data":practiceCode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Practice Code Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": practiceCode.error, "application": "Api FHIR", "function": "getPracticeCodeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		daysOfWeek: function getDaysOfWeek(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('daysOfWeek', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDaysOfWeek"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var daysOfWeek = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(daysOfWeek.err_code == 0){
								  	//cek jumdata dulu
								  	if(daysOfWeek.data.length > 0){
								  		res.json({"err_code": 0, "data":daysOfWeek.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Days Of Week is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": daysOfWeek.error, "application": "Api FHIR", "function": "getDaysOfWeek"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('daysOfWeek', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDaysOfWeek"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var daysOfWeek = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(daysOfWeek.err_code == 0){
									  	//cek jumdata dulu
									  	if(daysOfWeek.data.length > 0){
									  		res.json({"err_code": 0, "data":daysOfWeek.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Days Of Week is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": daysOfWeek.error, "application": "Api FHIR", "function": "getDaysOfWeek"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		daysOfWeekCode: function getDaysOfWeekCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('daysOfWeekCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDaysOfWeek"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var daysOfWeek = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(daysOfWeek.err_code == 0){
								  	//cek jumdata dulu
								  	if(daysOfWeek.data.length > 0){
								  		res.json({"err_code": 0, "data":daysOfWeek.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Days Of Week Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": daysOfWeek.error, "application": "Api FHIR", "function": "getDaysOfWeekCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		serviceCategory: function getServiceCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('serviceCategory', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getServiceCategory"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var serviceCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(serviceCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(serviceCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":serviceCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Service Category is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": serviceCategory.error, "application": "Api FHIR", "function": "getServiceCategory"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('serviceCategory', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getServiceCategory"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var serviceCategory = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(serviceCategory.err_code == 0){
									  	//cek jumdata dulu
									  	if(serviceCategory.data.length > 0){
									  		res.json({"err_code": 0, "data":serviceCategory.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Service Category is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": serviceCategory.error, "application": "Api FHIR", "function": "getServiceCategory"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		serviceCategoryCode: function getServiceCategoryCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			var code = req.params.code.replace(/[^\w\s ,]/gi, '');
			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('serviceCategoryCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getServiceCategory"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var serviceCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(serviceCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(serviceCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":serviceCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Service Category Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": serviceCategory.error, "application": "Api FHIR", "function": "getServiceCategoryCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		serviceType	: function getServiceType	(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('serviceType', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getServiceType	"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var serviceType	 = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(serviceType	.err_code == 0){
								  	//cek jumdata dulu
								  	if(serviceType	.data.length > 0){
								  		res.json({"err_code": 0, "data":serviceType	.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Service Type is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": serviceType	.error, "application": "Api FHIR", "function": "getServiceType"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('serviceType	', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getServiceType	"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var serviceType	 = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(serviceType	.err_code == 0){
									  	//cek jumdata dulu
									  	if(serviceType	.data.length > 0){
									  		res.json({"err_code": 0, "data":serviceType	.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Service Type is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": serviceType	.error, "application": "Api FHIR", "function": "getServiceType	"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		serviceTypeCode: function getServiceTypeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('serviceTypeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getServiceType	"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var serviceType	 = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(serviceType	.err_code == 0){
								  	//cek jumdata dulu
								  	if(serviceType	.data.length > 0){
								  		res.json({"err_code": 0, "data":serviceType	.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Service Type Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": serviceType	.error, "application": "Api FHIR", "function": "getServiceTypeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		serviceProvisionConditions: function getServiceProvisionConditions(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('serviceProvisionConditions', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getServiceProvisionConditions"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var serviceProvisionConditions = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(serviceProvisionConditions.err_code == 0){
								  	//cek jumdata dulu
								  	if(serviceProvisionConditions.data.length > 0){
								  		res.json({"err_code": 0, "data":serviceProvisionConditions.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Service Provision Conditions is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": serviceProvisionConditions.error, "application": "Api FHIR", "function": "getServiceProvisionConditions"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('serviceProvisionConditions', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getServiceProvisionConditions"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var serviceProvisionConditions = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(serviceProvisionConditions.err_code == 0){
									  	//cek jumdata dulu
									  	if(serviceProvisionConditions.data.length > 0){
									  		res.json({"err_code": 0, "data":serviceProvisionConditions.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Service Provision Conditions is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": serviceProvisionConditions.error, "application": "Api FHIR", "function": "getServiceProvisionConditions"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		serviceProvisionConditionsCode: function getServiceProvisionConditionsCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('serviceProvisionConditionsCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getServiceProvisionConditions"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var serviceProvisionConditions = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(serviceProvisionConditions.err_code == 0){
								  	//cek jumdata dulu
								  	if(serviceProvisionConditions.data.length > 0){
								  		res.json({"err_code": 0, "data":serviceProvisionConditions.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Service Provision Conditions Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": serviceProvisionConditions.error, "application": "Api FHIR", "function": "getServiceProvisionConditionsCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		serviceReferralMethod: function getServiceReferralMethod(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('serviceReferralMethod', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getServiceReferralMethod"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var serviceReferralMethod = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(serviceReferralMethod.err_code == 0){
								  	//cek jumdata dulu
								  	if(serviceReferralMethod.data.length > 0){
								  		res.json({"err_code": 0, "data":serviceReferralMethod.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Service Referral Method is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": serviceReferralMethod.error, "application": "Api FHIR", "function": "getServiceReferralMethod"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('serviceReferralMethod', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getServiceReferralMethod"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var serviceReferralMethod = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(serviceReferralMethod.err_code == 0){
									  	//cek jumdata dulu
									  	if(serviceReferralMethod.data.length > 0){
									  		res.json({"err_code": 0, "data":serviceReferralMethod.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Service Referral Method is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": serviceReferralMethod.error, "application": "Api FHIR", "function": "getServiceReferralMethod"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		serviceReferralMethodCode: function getServiceReferralMethodCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('serviceReferralMethodCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getServiceReferralMethod"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var serviceReferralMethod = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(serviceReferralMethod.err_code == 0){
								  	//cek jumdata dulu
								  	if(serviceReferralMethod.data.length > 0){
								  		res.json({"err_code": 0, "data":serviceReferralMethod.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Service Referral Method Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": serviceReferralMethod.error, "application": "Api FHIR", "function": "getServiceReferralMethodCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		endpointStatus: function getEndpointStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('endpointStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getEndpointStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var endpointStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(endpointStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(endpointStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":endpointStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "End Point Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": endpointStatus.error, "application": "Api FHIR", "function": "getEndpointStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('endpointStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getEndpointStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var endpointStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(endpointStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(endpointStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":endpointStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "End Point Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": endpointStatus.error, "application": "Api FHIR", "function": "getEndpointStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		endpointStatusCode: function getEndpointStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('endpointStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getEndpointStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var endpointStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(endpointStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(endpointStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":endpointStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "End Point Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": endpointStatus.error, "application": "Api FHIR", "function": "getEndpointStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		endpointConnectionType: function getEndpointConnectionType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('endpointConnectionType', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getEndpointConnectionType"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var endpointConnectionType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(endpointConnectionType.err_code == 0){
								  	//cek jumdata dulu
								  	if(endpointConnectionType.data.length > 0){
								  		res.json({"err_code": 0, "data":endpointConnectionType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "End Point Connection Type is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": endpointConnectionType.error, "application": "Api FHIR", "function": "getEndpointConnectionType"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('endpointConnectionType', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getEndpointConnectionType"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var endpointConnectionType = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(endpointConnectionType.err_code == 0){
									  	//cek jumdata dulu
									  	if(endpointConnectionType.data.length > 0){
									  		res.json({"err_code": 0, "data":endpointConnectionType.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "End Point Connection Type is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": endpointConnectionType.error, "application": "Api FHIR", "function": "getEndpointConnectionType"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		endpointConnectionTypeCode: function getEndpointConnectionTypeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('endpointConnectionTypeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getEndpointConnectionType"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var endpointConnectionType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(endpointConnectionType.err_code == 0){
								  	//cek jumdata dulu
								  	if(endpointConnectionType.data.length > 0){
								  		res.json({"err_code": 0, "data":endpointConnectionType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "End Point Connection Type Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": endpointConnectionType.error, "application": "Api FHIR", "function": "getEndpointConnectionTypeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		endpointPayloadType: function getEndpointPayloadType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('endpointPayloadType', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getEndpointPayloadType"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var endpointPayloadType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(endpointPayloadType.err_code == 0){
								  	//cek jumdata dulu
								  	if(endpointPayloadType.data.length > 0){
								  		res.json({"err_code": 0, "data":endpointPayloadType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "End Point Payload Type is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": endpointPayloadType.error, "application": "Api FHIR", "function": "getEndpointPayloadType"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('endpointPayloadType', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getEndpointPayloadType"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var endpointPayloadType = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(endpointPayloadType.err_code == 0){
									  	//cek jumdata dulu
									  	if(endpointPayloadType.data.length > 0){
									  		res.json({"err_code": 0, "data":endpointPayloadType.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "End Point Payload Type is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": endpointPayloadType.error, "application": "Api FHIR", "function": "getEndpointPayloadType"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		endpointPayloadTypeCode: function getEndpointPayloadTypeCode(req, res){
			var ipAddres = req.Payload.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('endpointPayloadTypeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getEndpointPayloadType"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var endpointPayloadType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(endpointPayloadType.err_code == 0){
								  	//cek jumdata dulu
								  	if(endpointPayloadType.data.length > 0){
								  		res.json({"err_code": 0, "data":endpointPayloadType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "End Point Payload Type Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": endpointPayloadType.error, "application": "Api FHIR", "function": "getEndpointPayloadTypeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		adverseEventCategory: function getAdverseEventCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('adverseEventCategory', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "adverseEventCategory"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var adverseEventCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(adverseEventCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(adverseEventCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":adverseEventCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Adverse Event Category is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": adverseEventCategory.error, "application": "Api FHIR", "function": "getAdverseEventCategory"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('adverseEventCategory', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdverseEventCategory"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var adverseEventCategory = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(adverseEventCategory.err_code == 0){
									  	//cek jumdata dulu
									  	if(adverseEventCategory.data.length > 0){
									  		res.json({"err_code": 0, "data":adverseEventCategory.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Adverse Event Category is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": adverseEventCategory.error, "application": "Api FHIR", "function": "getAdverseEventCategory"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		adverseEventCategoryCode: function getAdverseEventCategoryCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toUpperCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('adverseEventCategoryCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdverseEventCategoryCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var adverseEventCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(adverseEventCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(adverseEventCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":adverseEventCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Adverse Event Category Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": adverseEventCategory.error, "application": "Api FHIR", "function": "getadverseEventCategoryCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		adverseEventType: function getAdverseEventType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('adverseEventType', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdverseEventType"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var adverseEventType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(adverseEventType.err_code == 0){
								  	//cek jumdata dulu
								  	if(adverseEventType.data.length > 0){
								  		res.json({"err_code": 0, "data":adverseEventType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Adverse Event Type is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": adverseEventType.error, "application": "Api FHIR", "function": "getAdverseEventType"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('adverseEventType', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdverseEventType"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var adverseEventType = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(adverseEventType.err_code == 0){
									  	//cek jumdata dulu
									  	if(adverseEventType.data.length > 0){
									  		res.json({"err_code": 0, "data":adverseEventType.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Adverse Event Type is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": adverseEventType.error, "application": "Api FHIR", "function": "getAdverseEventType"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		adverseEventTypeCode: function getAdverseEventTypeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			var code = req.params.code.replace(/[^\w\s ,]/gi, '');
			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('adverseEventTypeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdverseEventType"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var adverseEventType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(adverseEventType.err_code == 0){
								  	//cek jumdata dulu
								  	if(adverseEventType.data.length > 0){
								  		res.json({"err_code": 0, "data":adverseEventType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Adverse Event Type Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": adverseEventType.error, "application": "Api FHIR", "function": "getAdverseEventTypeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		adverseEventSeriousness: function getAdverseEventSeriousness(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('adverseEventSeriousness', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "adverseEventSeriousness"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var adverseEventSeriousness = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(adverseEventSeriousness.err_code == 0){
								  	//cek jumdata dulu
								  	if(adverseEventSeriousness.data.length > 0){
								  		res.json({"err_code": 0, "data":adverseEventSeriousness.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Adverse Event Seriousness is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": adverseEventSeriousness.error, "application": "Api FHIR", "function": "getAdverseEventSeriousness"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('adverseEventSeriousness', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdverseEventSeriousness"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var adverseEventSeriousness = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(adverseEventSeriousness.err_code == 0){
									  	//cek jumdata dulu
									  	if(adverseEventSeriousness.data.length > 0){
									  		res.json({"err_code": 0, "data":adverseEventSeriousness.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Adverse Event Seriousness is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": adverseEventSeriousness.error, "application": "Api FHIR", "function": "getAdverseEventSeriousness"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		adverseEventSeriousnessCode: function getAdverseEventSeriousnessCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('adverseEventSeriousnessCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdverseEventSeriousnessCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var adverseEventSeriousness = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(adverseEventSeriousness.err_code == 0){
								  	//cek jumdata dulu
								  	if(adverseEventSeriousness.data.length > 0){
								  		res.json({"err_code": 0, "data":adverseEventSeriousness.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Adverse Event Seriousness Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": adverseEventSeriousness.error, "application": "Api FHIR", "function": "getadverseEventSeriousnessCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		adverseEventOutcome: function getAdverseEventOutcome(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('adverseEventOutcome', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "adverseEventOutcome"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var adverseEventOutcome = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(adverseEventOutcome.err_code == 0){
								  	//cek jumdata dulu
								  	if(adverseEventOutcome.data.length > 0){
								  		res.json({"err_code": 0, "data":adverseEventOutcome.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Adverse Event Outcome is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": adverseEventOutcome.error, "application": "Api FHIR", "function": "getAdverseEventOutcome"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('adverseEventOutcome', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdverseEventOutcome"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var adverseEventOutcome = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(adverseEventOutcome.err_code == 0){
									  	//cek jumdata dulu
									  	if(adverseEventOutcome.data.length > 0){
									  		res.json({"err_code": 0, "data":adverseEventOutcome.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Adverse Event Outcome is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": adverseEventOutcome.error, "application": "Api FHIR", "function": "getAdverseEventOutcome"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		adverseEventOutcomeCode: function getAdverseEventOutcomeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('adverseEventOutcomeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdverseEventOutcomeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var adverseEventOutcome = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(adverseEventOutcome.err_code == 0){
								  	//cek jumdata dulu
								  	if(adverseEventOutcome.data.length > 0){
								  		res.json({"err_code": 0, "data":adverseEventOutcome.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Adverse Event Outcome Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": adverseEventOutcome.error, "application": "Api FHIR", "function": "getadverseEventOutcomeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		adverseEventCausality: function getAdverseEventCausality(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('adverseEventCausality', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "adverseEventCausality"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var adverseEventCausality = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(adverseEventCausality.err_code == 0){
								  	//cek jumdata dulu
								  	if(adverseEventCausality.data.length > 0){
								  		res.json({"err_code": 0, "data":adverseEventCausality.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Adverse Event Causality is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": adverseEventCausality.error, "application": "Api FHIR", "function": "getAdverseEventCausality"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('adverseEventCausality', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdverseEventCausality"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var adverseEventCausality = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(adverseEventCausality.err_code == 0){
									  	//cek jumdata dulu
									  	if(adverseEventCausality.data.length > 0){
									  		res.json({"err_code": 0, "data":adverseEventCausality.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Adverse Event Causality is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": adverseEventCausality.error, "application": "Api FHIR", "function": "getAdverseEventCausality"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		adverseEventCausalityCode: function getAdverseEventCausalityCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('adverseEventCausalityCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdverseEventCausalityCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var adverseEventCausality = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(adverseEventCausality.err_code == 0){
								  	//cek jumdata dulu
								  	if(adverseEventCausality.data.length > 0){
								  		res.json({"err_code": 0, "data":adverseEventCausality.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Adverse Event Causality Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": adverseEventCausality.error, "application": "Api FHIR", "function": "getadverseEventCausalityCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		adverseEventCausalityAssess: function getAdverseEventCausalityAssess(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('adverseEventCausalityAssess', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "adverseEventCausalityAssess"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var adverseEventCausalityAssess = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(adverseEventCausalityAssess.err_code == 0){
								  	//cek jumdata dulu
								  	if(adverseEventCausalityAssess.data.length > 0){
								  		res.json({"err_code": 0, "data":adverseEventCausalityAssess.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Adverse Event CausalityAssess is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": adverseEventCausalityAssess.error, "application": "Api FHIR", "function": "getAdverseEventCausalityAssess"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('adverseEventCausalityAssess', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdverseEventCausalityAssess"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var adverseEventCausalityAssess = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(adverseEventCausalityAssess.err_code == 0){
									  	//cek jumdata dulu
									  	if(adverseEventCausalityAssess.data.length > 0){
									  		res.json({"err_code": 0, "data":adverseEventCausalityAssess.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Adverse Event CausalityAssess is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": adverseEventCausalityAssess.error, "application": "Api FHIR", "function": "getAdverseEventCausalityAssess"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		adverseEventCausalityAssessCode: function getAdverseEventCausalityAssessCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('adverseEventCausalityAssessCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdverseEventCausalityAssessCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var adverseEventCausalityAssess = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(adverseEventCausalityAssess.err_code == 0){
								  	//cek jumdata dulu
								  	if(adverseEventCausalityAssess.data.length > 0){
								  		res.json({"err_code": 0, "data":adverseEventCausalityAssess.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Adverse Event CausalityAssess Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": adverseEventCausalityAssess.error, "application": "Api FHIR", "function": "getadverseEventCausalityAssessCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		adverseEventCausalityMethod: function getAdverseEventCausalityMethod(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('adverseEventCausalityMethod', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "adverseEventCausalityMethod"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var adverseEventCausalityMethod = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(adverseEventCausalityMethod.err_code == 0){
								  	//cek jumdata dulu
								  	if(adverseEventCausalityMethod.data.length > 0){
								  		res.json({"err_code": 0, "data":adverseEventCausalityMethod.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Adverse Event CausalityMethod is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": adverseEventCausalityMethod.error, "application": "Api FHIR", "function": "getAdverseEventCausalityMethod"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('adverseEventCausalityMethod', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdverseEventCausalityMethod"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var adverseEventCausalityMethod = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(adverseEventCausalityMethod.err_code == 0){
									  	//cek jumdata dulu
									  	if(adverseEventCausalityMethod.data.length > 0){
									  		res.json({"err_code": 0, "data":adverseEventCausalityMethod.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Adverse Event CausalityMethod is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": adverseEventCausalityMethod.error, "application": "Api FHIR", "function": "getAdverseEventCausalityMethod"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		adverseEventCausalityMethodCode: function getAdverseEventCausalityMethodCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('adverseEventCausalityMethodCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdverseEventCausalityMethodCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var adverseEventCausalityMethod = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(adverseEventCausalityMethod.err_code == 0){
								  	//cek jumdata dulu
								  	if(adverseEventCausalityMethod.data.length > 0){
								  		res.json({"err_code": 0, "data":adverseEventCausalityMethod.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Adverse Event CausalityMethod Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": adverseEventCausalityMethod.error, "application": "Api FHIR", "function": "getadverseEventCausalityMethodCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		adverseEventCausalityResult: function getAdverseEventCausalityResult(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('adverseEventCausalityResult', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "adverseEventCausalityResult"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var adverseEventCausalityResult = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(adverseEventCausalityResult.err_code == 0){
								  	//cek jumdata dulu
								  	if(adverseEventCausalityResult.data.length > 0){
								  		res.json({"err_code": 0, "data":adverseEventCausalityResult.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Adverse Event Causality Result is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": adverseEventCausalityResult.error, "application": "Api FHIR", "function": "getAdverseEventCausalityResult"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('adverseEventCausalityResult', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdverseEventCausalityResult"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var adverseEventCausalityResult = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(adverseEventCausalityResult.err_code == 0){
									  	//cek jumdata dulu
									  	if(adverseEventCausalityResult.data.length > 0){
									  		res.json({"err_code": 0, "data":adverseEventCausalityResult.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Adverse Event Causality Result is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": adverseEventCausalityResult.error, "application": "Api FHIR", "function": "getAdverseEventCausalityResult"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		adverseEventCausalityResultCode: function getAdverseEventCausalityResultCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('adverseEventCausalityResultCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdverseEventCausalityResultCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var adverseEventCausalityResult = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(adverseEventCausalityResult.err_code == 0){
								  	//cek jumdata dulu
								  	if(adverseEventCausalityResult.data.length > 0){
								  		res.json({"err_code": 0, "data":adverseEventCausalityResult.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Adverse Event Causality Result Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": adverseEventCausalityResult.error, "application": "Api FHIR", "function": "getadverseEventCausalityResultCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		allergyClinicalStatus: function getAllergyClinicalStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('allergyClinicalStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "allergyClinicalStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var allergyClinicalStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(allergyClinicalStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(allergyClinicalStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":allergyClinicalStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Allergy Clinical Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": allergyClinicalStatus.error, "application": "Api FHIR", "function": "getAllergyClinicalStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('allergyClinicalStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAllergyClinicalStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var allergyClinicalStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(allergyClinicalStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(allergyClinicalStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":allergyClinicalStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Allergy Clinical Status  is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": allergyClinicalStatus.error, "application": "Api FHIR", "function": "getAllergyClinicalStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		allergyClinicalStatusCode: function getAllergyClinicalStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('allergyClinicalStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAllergyClinicalStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var allergyClinicalStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(allergyClinicalStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(allergyClinicalStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":allergyClinicalStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Allergy Clinical Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": allergyClinicalStatus.error, "application": "Api FHIR", "function": "getAllergyClinicalStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		allergyVerificationStatus: function getAllergyVerificationStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('allergyVerificationStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "allergyVerificationStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var allergyVerificationStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(allergyVerificationStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(allergyVerificationStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":allergyVerificationStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Allergy Verification Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": allergyVerificationStatus.error, "application": "Api FHIR", "function": "getAllergyVerificationStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('allergyVerificationStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAllergyVerificationStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var allergyVerificationStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(allergyVerificationStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(allergyVerificationStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":allergyVerificationStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Allergy Verification Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": allergyVerificationStatus.error, "application": "Api FHIR", "function": "getAllergyVerificationStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		allergyVerificationStatusCode: function getAllergyVerificationStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('allergyVerificationStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAllergyVerificationStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var allergyVerificationStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(allergyVerificationStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(allergyVerificationStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":allergyVerificationStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Allergy Verification Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": allergyVerificationStatus.error, "application": "Api FHIR", "function": "getAllergyVerificationStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		allergyIntoleranceType: function getAllergyIntoleranceType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('allergyIntoleranceType', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "allergyIntoleranceType"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var allergyIntoleranceType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(allergyIntoleranceType.err_code == 0){
								  	//cek jumdata dulu
								  	if(allergyIntoleranceType.data.length > 0){
								  		res.json({"err_code": 0, "data":allergyIntoleranceType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Allergy Intolerance Type is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": allergyIntoleranceType.error, "application": "Api FHIR", "function": "getAllergyIntoleranceType"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('allergyIntoleranceType', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAllergyIntoleranceType"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var allergyIntoleranceType = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(allergyIntoleranceType.err_code == 0){
									  	//cek jumdata dulu
									  	if(allergyIntoleranceType.data.length > 0){
									  		res.json({"err_code": 0, "data":allergyIntoleranceType.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Allergy Intolerance Type is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": allergyIntoleranceType.error, "application": "Api FHIR", "function": "getAllergyIntoleranceType"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		allergyIntoleranceTypeCode: function getAllergyIntoleranceTypeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('allergyIntoleranceTypeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAllergyIntoleranceTypeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var allergyIntoleranceType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(allergyIntoleranceType.err_code == 0){
								  	//cek jumdata dulu
								  	if(allergyIntoleranceType.data.length > 0){
								  		res.json({"err_code": 0, "data":allergyIntoleranceType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Aallergy Intolerance Type Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": allergyIntoleranceType.error, "application": "Api FHIR", "function": "getAllergyIntoleranceTypeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		allergyIntoleranceCategory: function getAllergyIntoleranceCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('allergyIntoleranceCategory', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "allergyIntoleranceCategory"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var allergyIntoleranceCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(allergyIntoleranceCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(allergyIntoleranceCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":allergyIntoleranceCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Allergy Intolerance Category is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": allergyIntoleranceCategory.error, "application": "Api FHIR", "function": "getAllergyIntoleranceCategory"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('allergyIntoleranceCategory', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAllergyIntoleranceCategory"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var allergyIntoleranceCategory = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(allergyIntoleranceCategory.err_code == 0){
									  	//cek jumdata dulu
									  	if(allergyIntoleranceCategory.data.length > 0){
									  		res.json({"err_code": 0, "data":allergyIntoleranceCategory.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Allergy Intolerance Category is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": allergyIntoleranceCategory.error, "application": "Api FHIR", "function": "getAllergyIntoleranceCategory"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		allergyIntoleranceCategoryCode: function getAllergyIntoleranceCategoryCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('allergyIntoleranceCategoryCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAllergyIntoleranceCategoryCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var allergyIntoleranceCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(allergyIntoleranceCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(allergyIntoleranceCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":allergyIntoleranceCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Allergy Intolerance Category Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": allergyIntoleranceCategory.error, "application": "Api FHIR", "function": "getAllergyIntoleranceCategoryCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		allergyIntoleranceCriticality: function getAllergyIntoleranceCriticality(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('allergyIntoleranceCriticality', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "allergyIntoleranceCriticality"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var allergyIntoleranceCriticality = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(allergyIntoleranceCriticality.err_code == 0){
								  	//cek jumdata dulu
								  	if(allergyIntoleranceCriticality.data.length > 0){
								  		res.json({"err_code": 0, "data":allergyIntoleranceCriticality.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Allergy Intolerance Criticality is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": allergyIntoleranceCriticality.error, "application": "Api FHIR", "function": "getAllergyIntoleranceCriticality"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('allergyIntoleranceCriticality', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAllergyIntoleranceCriticality"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var allergyIntoleranceCriticality = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(allergyIntoleranceCriticality.err_code == 0){
									  	//cek jumdata dulu
									  	if(allergyIntoleranceCriticality.data.length > 0){
									  		res.json({"err_code": 0, "data":allergyIntoleranceCriticality.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Allergy Intolerance Criticality is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": allergyIntoleranceCriticality.error, "application": "Api FHIR", "function": "getAllergyIntoleranceCriticality"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		allergyIntoleranceCriticalityCode: function getAllergyIntoleranceCriticalityCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('allergyIntoleranceCriticalityCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAllergyIntoleranceCriticalityCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var allergyIntoleranceCriticality = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(allergyIntoleranceCriticality.err_code == 0){
								  	//cek jumdata dulu
								  	if(allergyIntoleranceCriticality.data.length > 0){
								  		res.json({"err_code": 0, "data":allergyIntoleranceCriticality.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Allergy Intolerance Criticality Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": allergyIntoleranceCriticality.error, "application": "Api FHIR", "function": "getAllergyIntoleranceCriticalityCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		allergyIntoleranceCode: function getAllergyIntoleranceCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('allergyIntoleranceCode', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "allergyIntoleranceCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var allergyIntoleranceCode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(allergyIntoleranceCode.err_code == 0){
								  	//cek jumdata dulu
								  	if(allergyIntoleranceCode.data.length > 0){
								  		res.json({"err_code": 0, "data":allergyIntoleranceCode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Allergy Intolerance Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": allergyIntoleranceCode.error, "application": "Api FHIR", "function": "getAllergyIntoleranceCode"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('allergyIntoleranceCode', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAllergyIntoleranceCode"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var allergyIntoleranceCode = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(allergyIntoleranceCode.err_code == 0){
									  	//cek jumdata dulu
									  	if(allergyIntoleranceCode.data.length > 0){
									  		res.json({"err_code": 0, "data":allergyIntoleranceCode.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Allergy Intolerance Code is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": allergyIntoleranceCode.error, "application": "Api FHIR", "function": "getAllergyIntoleranceCode"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		allergyIntoleranceCodeCode: function getAllergyIntoleranceCodeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('allergyIntoleranceCodeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAllergyIntoleranceCodeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var allergyIntoleranceCode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(allergyIntoleranceCode.err_code == 0){
								  	//cek jumdata dulu
								  	if(allergyIntoleranceCode.data.length > 0){
								  		res.json({"err_code": 0, "data":allergyIntoleranceCode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Allergy Intolerance Code Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": allergyIntoleranceCode.error, "application": "Api FHIR", "function": "getAllergyIntoleranceCodeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		substanceCode: function getSubstanceCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('substanceCode', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "substanceCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var substanceCode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(substanceCode.err_code == 0){
								  	//cek jumdata dulu
								  	if(substanceCode.data.length > 0){
								  		res.json({"err_code": 0, "data":substanceCode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Substance Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": substanceCode.error, "application": "Api FHIR", "function": "getSubstanceCode"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('substanceCode', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getSubstanceCode"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var substanceCode = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(substanceCode.err_code == 0){
									  	//cek jumdata dulu
									  	if(substanceCode.data.length > 0){
									  		res.json({"err_code": 0, "data":substanceCode.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Substance Code is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": substanceCode.error, "application": "Api FHIR", "function": "getSubstanceCode"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		substanceCodeCode: function getSubstanceCodeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('substanceCodeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getSubstanceCodeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var substanceCode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(substanceCode.err_code == 0){
								  	//cek jumdata dulu
								  	if(substanceCode.data.length > 0){
								  		res.json({"err_code": 0, "data":substanceCode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Substance Code Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": substanceCode.error, "application": "Api FHIR", "function": "getSubstanceCodeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		clinicalFindings: function getClinicalFindings(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('clinicalFindings', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "clinicalFindings"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var clinicalFindings = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(clinicalFindings.err_code == 0){
								  	//cek jumdata dulu
								  	if(clinicalFindings.data.length > 0){
								  		res.json({"err_code": 0, "data":clinicalFindings.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Clinical Findings is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": clinicalFindings.error, "application": "Api FHIR", "function": "getClinicalFindings"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('clinicalFindings', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getClinicalFindings"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var clinicalFindings = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(clinicalFindings.err_code == 0){
									  	//cek jumdata dulu
									  	if(clinicalFindings.data.length > 0){
									  		res.json({"err_code": 0, "data":clinicalFindings.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Clinical Findings Code is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": clinicalFindings.error, "application": "Api FHIR", "function": "getClinicalFindings"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		clinicalFindingsCode: function getClinicalFindingsCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('clinicalFindingsCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getClinicalFindingsCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var clinicalFindings = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(clinicalFindings.err_code == 0){
								  	//cek jumdata dulu
								  	if(clinicalFindings.data.length > 0){
								  		res.json({"err_code": 0, "data":clinicalFindings.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Clinical Findings Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": clinicalFindings.error, "application": "Api FHIR", "function": "getClinicalFindingsCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		reactionEventSeverity: function getReactionEventSeverity(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('reactionEventSeverity', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "reactionEventSeverity"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var reactionEventSeverity = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(reactionEventSeverity.err_code == 0){
								  	//cek jumdata dulu
								  	if(reactionEventSeverity.data.length > 0){
								  		res.json({"err_code": 0, "data":reactionEventSeverity.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Reaction Event Severity is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": reactionEventSeverity.error, "application": "Api FHIR", "function": "getReactionEventSeverity"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('reactionEventSeverity', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getReactionEventSeverity"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var reactionEventSeverity = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(reactionEventSeverity.err_code == 0){
									  	//cek jumdata dulu
									  	if(reactionEventSeverity.data.length > 0){
									  		res.json({"err_code": 0, "data":reactionEventSeverity.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Reaction Event Severity is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": reactionEventSeverity.error, "application": "Api FHIR", "function": "getReactionEventSeverity"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		reactionEventSeverityCode: function getReactionEventSeverityCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('reactionEventSeverityCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getReactionEventSeverityCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var reactionEventSeverity = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(reactionEventSeverity.err_code == 0){
								  	//cek jumdata dulu
								  	if(reactionEventSeverity.data.length > 0){
								  		res.json({"err_code": 0, "data":reactionEventSeverity.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Reaction Event Severity Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": reactionEventSeverity.error, "application": "Api FHIR", "function": "getReactionEventSeverityCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		routeCodes: function getRouteCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('routeCodes', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "routeCodes"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var routeCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(routeCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(routeCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":routeCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Route Codes is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": routeCodes.error, "application": "Api FHIR", "function": "getRouteCodes"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('routeCodes', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getRouteCodes"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var routeCodes = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(routeCodes.err_code == 0){
									  	//cek jumdata dulu
									  	if(routeCodes.data.length > 0){
									  		res.json({"err_code": 0, "data":routeCodes.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Route Codes is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": routeCodes.error, "application": "Api FHIR", "function": "getRouteCodes"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		routeCodesCode: function getRouteCodesCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('routeCodesCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getRouteCodesCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var routeCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(routeCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(routeCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":routeCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Route Codes Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": routeCodes.error, "application": "Api FHIR", "function": "getRouteCodesCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		carePlanStatus: function getCarePlanStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('carePlanStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "carePlanStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var carePlanStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(carePlanStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(carePlanStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":carePlanStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Care Plan Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": carePlanStatus.error, "application": "Api FHIR", "function": "getCarePlanStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('carePlanStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getCarePlanStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var carePlanStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(carePlanStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(carePlanStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":carePlanStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Care Plan Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": carePlanStatus.error, "application": "Api FHIR", "function": "getCarePlanStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		carePlanStatusCode: function getCarePlanStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('carePlanStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getCarePlanStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var carePlanStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(carePlanStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(carePlanStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":carePlanStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Care Plan Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": carePlanStatus.error, "application": "Api FHIR", "function": "getCarePlanStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		carePlanIntent: function getCarePlanIntent(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('carePlanIntent', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "carePlanIntent"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var carePlanIntent = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(carePlanIntent.err_code == 0){
								  	//cek jumdata dulu
								  	if(carePlanIntent.data.length > 0){
								  		res.json({"err_code": 0, "data":carePlanIntent.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Care Plan Intent is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": carePlanIntent.error, "application": "Api FHIR", "function": "getCarePlanIntent"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('carePlanIntent', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getCarePlanIntent"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var carePlanIntent = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(carePlanIntent.err_code == 0){
									  	//cek jumdata dulu
									  	if(carePlanIntent.data.length > 0){
									  		res.json({"err_code": 0, "data":carePlanIntent.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Care Plan Intent is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": carePlanIntent.error, "application": "Api FHIR", "function": "getCarePlanIntent"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		carePlanIntentCode: function getCarePlanIntentCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('carePlanIntentCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getCarePlanIntentCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var carePlanIntent = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(carePlanIntent.err_code == 0){
								  	//cek jumdata dulu
								  	if(carePlanIntent.data.length > 0){
								  		res.json({"err_code": 0, "data":carePlanIntent.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Care Plan Intent Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": carePlanIntent.error, "application": "Api FHIR", "function": "getCarePlanIntentCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		carePlanCategory: function getCarePlanCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('carePlanCategory', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "carePlanCategory"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var carePlanCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(carePlanCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(carePlanCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":carePlanCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Care Plan Category is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": carePlanCategory.error, "application": "Api FHIR", "function": "getCarePlanCategory"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('carePlanCategory', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getCarePlanCategory"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var carePlanCategory = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(carePlanCategory.err_code == 0){
									  	//cek jumdata dulu
									  	if(carePlanCategory.data.length > 0){
									  		res.json({"err_code": 0, "data":carePlanCategory.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Care Plan Category is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": carePlanCategory.error, "application": "Api FHIR", "function": "getCarePlanCategory"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		carePlanCategoryCode: function getCarePlanCategoryCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('carePlanCategoryCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getCarePlanCategoryCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var carePlanCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(carePlanCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(carePlanCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":carePlanCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Care Plan Category Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": carePlanCategory.error, "application": "Api FHIR", "function": "getCarePlanCategoryCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		carePlanActivityOutcome: function getCarePlanActivityOutcome(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('carePlanActivityOutcome', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "carePlanActivityOutcome"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var carePlanActivityOutcome = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(carePlanActivityOutcome.err_code == 0){
								  	//cek jumdata dulu
								  	if(carePlanActivityOutcome.data.length > 0){
								  		res.json({"err_code": 0, "data":carePlanActivityOutcome.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Care Plan Activity Outcome is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": carePlanActivityOutcome.error, "application": "Api FHIR", "function": "getCarePlanActivityOutcome"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('carePlanActivityOutcome', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getCarePlanActivityOutcome"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var carePlanActivityOutcome = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(carePlanActivityOutcome.err_code == 0){
									  	//cek jumdata dulu
									  	if(carePlanActivityOutcome.data.length > 0){
									  		res.json({"err_code": 0, "data":carePlanActivityOutcome.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Care Plan Activity Outcome is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": carePlanActivityOutcome.error, "application": "Api FHIR", "function": "getCarePlanActivityOutcome"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		carePlanActivityOutcomeCode: function getCarePlanActivityOutcomeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('carePlanActivityOutcomeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getCarePlanActivityOutcomeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var carePlanActivityOutcome = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(carePlanActivityOutcome.err_code == 0){
								  	//cek jumdata dulu
								  	if(carePlanActivityOutcome.data.length > 0){
								  		res.json({"err_code": 0, "data":carePlanActivityOutcome.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Care Plan Activity Outcome Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": carePlanActivityOutcome.error, "application": "Api FHIR", "function": "getCarePlanActivityOutcomeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		carePlanActivityCategory: function getCarePlanActivityCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('carePlanActivityCategory', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "carePlanActivityCategory"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var carePlanActivityCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(carePlanActivityCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(carePlanActivityCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":carePlanActivityCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Care Plan Activity Category is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": carePlanActivityCategory.error, "application": "Api FHIR", "function": "getCarePlanActivityCategory"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('carePlanActivityCategory', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getCarePlanActivityCategory"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var carePlanActivityCategory = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(carePlanActivityCategory.err_code == 0){
									  	//cek jumdata dulu
									  	if(carePlanActivityCategory.data.length > 0){
									  		res.json({"err_code": 0, "data":carePlanActivityCategory.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Care Plan Activity Category is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": carePlanActivityCategory.error, "application": "Api FHIR", "function": "getCarePlanActivityCategory"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		carePlanActivityCategoryCode: function getCarePlanActivityCategoryCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('carePlanActivityCategoryCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getCarePlanActivityCategoryCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var carePlanActivityCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(carePlanActivityCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(carePlanActivityCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":carePlanActivityCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Care Plan Activity Category Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": carePlanActivityCategory.error, "application": "Api FHIR", "function": "getCarePlanActivityCategoryCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		carePlanActivity: function getCarePlanActivity(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('carePlanActivity', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "carePlanActivity"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var carePlanActivity = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(carePlanActivity.err_code == 0){
								  	//cek jumdata dulu
								  	if(carePlanActivity.data.length > 0){
								  		res.json({"err_code": 0, "data":carePlanActivity.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Care Plan Activity is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": carePlanActivity.error, "application": "Api FHIR", "function": "getCarePlanActivity"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('carePlanActivity', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getCarePlanActivity"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var carePlanActivity = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(carePlanActivity.err_code == 0){
									  	//cek jumdata dulu
									  	if(carePlanActivity.data.length > 0){
									  		res.json({"err_code": 0, "data":carePlanActivity.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Care Plan Activity is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": carePlanActivity.error, "application": "Api FHIR", "function": "getCarePlanActivity"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		carePlanActivityCode: function getCarePlanActivityCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('carePlanActivityCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getCarePlanActivityCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var carePlanActivity = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(carePlanActivity.err_code == 0){
								  	//cek jumdata dulu
								  	if(carePlanActivity.data.length > 0){
								  		res.json({"err_code": 0, "data":carePlanActivity.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Care Plan Activity Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": carePlanActivity.error, "application": "Api FHIR", "function": "getCarePlanActivityCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		activityReason: function getActivityReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('activityReason', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "activityReason"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var activityReason = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(activityReason.err_code == 0){
								  	//cek jumdata dulu
								  	if(activityReason.data.length > 0){
								  		res.json({"err_code": 0, "data":activityReason.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Activity Reason is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": activityReason.error, "application": "Api FHIR", "function": "getActivityReason"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('activityReason', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getActivityReason"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var activityReason = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(activityReason.err_code == 0){
									  	//cek jumdata dulu
									  	if(activityReason.data.length > 0){
									  		res.json({"err_code": 0, "data":activityReason.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Activity Reason is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": activityReason.error, "application": "Api FHIR", "function": "getActivityReason"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		activityReasonCode: function getActivityReasonCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('activityReasonCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getActivityReasonCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var activityReason = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(activityReason.err_code == 0){
								  	//cek jumdata dulu
								  	if(activityReason.data.length > 0){
								  		res.json({"err_code": 0, "data":activityReason.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Activity Reason Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": activityReason.error, "application": "Api FHIR", "function": "getActivityReasonCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		carePlanActivityStatus: function getCarePlanActivityStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('carePlanActivityStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "carePlanActivityStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var carePlanActivityStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(carePlanActivityStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(carePlanActivityStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":carePlanActivityStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Care Plan Activity Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": carePlanActivityStatus.error, "application": "Api FHIR", "function": "getCarePlanActivityStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('carePlanActivityStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getCarePlanActivityStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var carePlanActivityStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(carePlanActivityStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(carePlanActivityStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":carePlanActivityStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Care Plan Activity Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": carePlanActivityStatus.error, "application": "Api FHIR", "function": "getCarePlanActivityStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		carePlanActivityStatusCode: function getCarePlanActivityStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('carePlanActivityStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getCarePlanActivityStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var carePlanActivityStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(carePlanActivityStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(carePlanActivityStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":carePlanActivityStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Care Plan Activity Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": carePlanActivityStatus.error, "application": "Api FHIR", "function": "getCarePlanActivityStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		medicationCodes: function getMedicationCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('medicationCodes', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "medicationCodes"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Codes is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationCodes.error, "application": "Api FHIR", "function": "getMedicationCodes"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('medicationCodes', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationCodes"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var medicationCodes = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(medicationCodes.err_code == 0){
									  	//cek jumdata dulu
									  	if(medicationCodes.data.length > 0){
									  		res.json({"err_code": 0, "data":medicationCodes.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Cedication Codes is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": medicationCodes.error, "application": "Api FHIR", "function": "getMedicationCodes"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		medicationCodesCode: function getMedicationCodesCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('medicationCodesCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationCodesCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Codes Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationCodes.error, "application": "Api FHIR", "function": "getMedicationCodesCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		careTeamStatus: function getCareTeamStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('careTeamStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "careTeamStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var careTeamStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(careTeamStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(careTeamStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":careTeamStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Care Team Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": careTeamStatus.error, "application": "Api FHIR", "function": "getCareTeamStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('careTeamStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getCareTeamStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var careTeamStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(careTeamStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(careTeamStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":careTeamStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Care Team Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": careTeamStatus.error, "application": "Api FHIR", "function": "getCareTeamStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		careTeamStatusCode: function getCareTeamStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('careTeamStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getCareTeamStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var careTeamStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(careTeamStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(careTeamStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":careTeamStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Care Team Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": careTeamStatus.error, "application": "Api FHIR", "function": "getCareTeamStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		careTeamCategory: function getCareTeamCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('careTeamCategory', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "careTeamCategory"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var careTeamCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(careTeamCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(careTeamCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":careTeamCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Care Team Category is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": careTeamCategory.error, "application": "Api FHIR", "function": "getCareTeamCategory"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('careTeamCategory', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getCareTeamCategory"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var careTeamCategory = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(careTeamCategory.err_code == 0){
									  	//cek jumdata dulu
									  	if(careTeamCategory.data.length > 0){
									  		res.json({"err_code": 0, "data":careTeamCategory.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Care Team Category is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": careTeamCategory.error, "application": "Api FHIR", "function": "getCareTeamCategory"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		careTeamCategoryCode: function getCareTeamCategoryCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('careTeamCategoryCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getCareTeamCategoryCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var careTeamCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(careTeamCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(careTeamCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":careTeamCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Care Team Category Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": careTeamCategory.error, "application": "Api FHIR", "function": "getCareTeamCategoryCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		participantRole: function getParticipantRole(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('participantRole', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "participantRole"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var participantRole = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(participantRole.err_code == 0){
								  	//cek jumdata dulu
								  	if(participantRole.data.length > 0){
								  		res.json({"err_code": 0, "data":participantRole.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Participant Role is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": participantRole.error, "application": "Api FHIR", "function": "getParticipantRole"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('participantRole', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getParticipantRole"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var participantRole = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(participantRole.err_code == 0){
									  	//cek jumdata dulu
									  	if(participantRole.data.length > 0){
									  		res.json({"err_code": 0, "data":participantRole.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Participant Role is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": participantRole.error, "application": "Api FHIR", "function": "getParticipantRole"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		participantRoleCode: function getParticipantRoleCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('participantRoleCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getParticipantRoleCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var participantRole = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(participantRole.err_code == 0){
								  	//cek jumdata dulu
								  	if(participantRole.data.length > 0){
								  		res.json({"err_code": 0, "data":participantRole.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Participant Role Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": participantRole.error, "application": "Api FHIR", "function": "getParticipantRoleCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		clinicalImpressionStatus: function getClinicalImpressionStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('clinicalImpressionStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "clinicalImpressionStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var clinicalImpressionStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(clinicalImpressionStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(clinicalImpressionStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":clinicalImpressionStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Clinical Impression Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": clinicalImpressionStatus.error, "application": "Api FHIR", "function": "getClinicalImpressionStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('clinicalImpressionStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getClinicalImpressionStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var clinicalImpressionStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(clinicalImpressionStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(clinicalImpressionStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":clinicalImpressionStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Clinical Impression Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": clinicalImpressionStatus.error, "application": "Api FHIR", "function": "getClinicalImpressionStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		clinicalImpressionStatusCode: function getClinicalImpressionStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('clinicalImpressionStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getClinicalImpressionStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var clinicalImpressionStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(clinicalImpressionStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(clinicalImpressionStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":clinicalImpressionStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Clinical Impression Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": clinicalImpressionStatus.error, "application": "Api FHIR", "function": "getClinicalImpressionStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		investigationSets: function getInvestigationSets(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('investigationSets', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "investigationSets"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var investigationSets = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(investigationSets.err_code == 0){
								  	//cek jumdata dulu
								  	if(investigationSets.data.length > 0){
								  		res.json({"err_code": 0, "data":investigationSets.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Investigation Sets is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": investigationSets.error, "application": "Api FHIR", "function": "getInvestigationSets"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('investigationSets', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getInvestigationSets"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var investigationSets = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(investigationSets.err_code == 0){
									  	//cek jumdata dulu
									  	if(investigationSets.data.length > 0){
									  		res.json({"err_code": 0, "data":investigationSets.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Investigation Sets is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": investigationSets.error, "application": "Api FHIR", "function": "getInvestigationSets"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		investigationSetsCode: function getInvestigationSetsCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('investigationSetsCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getInvestigationSetsCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var investigationSets = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(investigationSets.err_code == 0){
								  	//cek jumdata dulu
								  	if(investigationSets.data.length > 0){
								  		res.json({"err_code": 0, "data":investigationSets.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Investigation Sets Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": investigationSets.error, "application": "Api FHIR", "function": "getInvestigationSetsCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		clinicalimpressionPrognosis: function getClinicalimpressionPrognosis(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('clinicalimpressionPrognosis', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "clinicalimpressionPrognosis"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var clinicalimpressionPrognosis = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(clinicalimpressionPrognosis.err_code == 0){
								  	//cek jumdata dulu
								  	if(clinicalimpressionPrognosis.data.length > 0){
								  		res.json({"err_code": 0, "data":clinicalimpressionPrognosis.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Clinicalimpression Prognosis is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": clinicalimpressionPrognosis.error, "application": "Api FHIR", "function": "getClinicalimpressionPrognosis"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('clinicalimpressionPrognosis', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getClinicalimpressionPrognosis"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var clinicalimpressionPrognosis = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(clinicalimpressionPrognosis.err_code == 0){
									  	//cek jumdata dulu
									  	if(clinicalimpressionPrognosis.data.length > 0){
									  		res.json({"err_code": 0, "data":clinicalimpressionPrognosis.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Clinicalimpression Prognosis is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": clinicalimpressionPrognosis.error, "application": "Api FHIR", "function": "getClinicalimpressionPrognosis"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		clinicalimpressionPrognosisCode: function getClinicalimpressionPrognosisCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('clinicalimpressionPrognosisCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getClinicalimpressionPrognosisCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var clinicalimpressionPrognosis = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(clinicalimpressionPrognosis.err_code == 0){
								  	//cek jumdata dulu
								  	if(clinicalimpressionPrognosis.data.length > 0){
								  		res.json({"err_code": 0, "data":clinicalimpressionPrognosis.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Clinicalimpression Prognosis Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": clinicalimpressionPrognosis.error, "application": "Api FHIR", "function": "getClinicalimpressionPrognosisCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		conditionClinical: function getConditionClinical(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('conditionClinical', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "conditionClinical"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var conditionClinical = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(conditionClinical.err_code == 0){
								  	//cek jumdata dulu
								  	if(conditionClinical.data.length > 0){
								  		res.json({"err_code": 0, "data":conditionClinical.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Condition Clinical is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": conditionClinical.error, "application": "Api FHIR", "function": "getConditionClinical"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('conditionClinical', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getConditionClinical"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var conditionClinical = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(conditionClinical.err_code == 0){
									  	//cek jumdata dulu
									  	if(conditionClinical.data.length > 0){
									  		res.json({"err_code": 0, "data":conditionClinical.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Condition Clinical is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": conditionClinical.error, "application": "Api FHIR", "function": "getConditionClinical"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		conditionClinicalCode: function getConditionClinicalCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('conditionClinicalCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getConditionClinicalCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var conditionClinical = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(conditionClinical.err_code == 0){
								  	//cek jumdata dulu
								  	if(conditionClinical.data.length > 0){
								  		res.json({"err_code": 0, "data":conditionClinical.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Condition Clinical Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": conditionClinical.error, "application": "Api FHIR", "function": "getConditionClinicalCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		conditionVerStatus: function getConditionVerStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('conditionVerStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "conditionVerStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var conditionVerStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(conditionVerStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(conditionVerStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":conditionVerStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Condition Ver Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": conditionVerStatus.error, "application": "Api FHIR", "function": "getConditionVerStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('conditionVerStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getConditionVerStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var conditionVerStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(conditionVerStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(conditionVerStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":conditionVerStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Condition Ver Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": conditionVerStatus.error, "application": "Api FHIR", "function": "getConditionVerStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		conditionVerStatusCode: function getConditionVerStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('conditionVerStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getConditionVerStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var conditionVerStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(conditionVerStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(conditionVerStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":conditionVerStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Condition Ver Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": conditionVerStatus.error, "application": "Api FHIR", "function": "getConditionVerStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		conditionCategory: function getConditionCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('conditionCategory', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "conditionCategory"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var conditionCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(conditionCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(conditionCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":conditionCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Condition Category is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": conditionCategory.error, "application": "Api FHIR", "function": "getConditionCategory"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('conditionCategory', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getConditionCategory"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var conditionCategory = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(conditionCategory.err_code == 0){
									  	//cek jumdata dulu
									  	if(conditionCategory.data.length > 0){
									  		res.json({"err_code": 0, "data":conditionCategory.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Condition Category is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": conditionCategory.error, "application": "Api FHIR", "function": "getConditionCategory"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		conditionCategoryCode: function getConditionCategoryCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			var code = req.params.code.trim().toLowerCase();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('conditionCategoryCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getConditionCategoryCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var conditionCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(conditionCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(conditionCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":conditionCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Condition Category Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": conditionCategory.error, "application": "Api FHIR", "function": "getConditionCategoryCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		conditionSeverity: function getConditionSeverity(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('conditionSeverity', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "conditionSeverity"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var conditionSeverity = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(conditionSeverity.err_code == 0){
								  	//cek jumdata dulu
								  	if(conditionSeverity.data.length > 0){
								  		res.json({"err_code": 0, "data":conditionSeverity.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Condition Severity is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": conditionSeverity.error, "application": "Api FHIR", "function": "getConditionSeverity"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('conditionSeverity', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getConditionSeverity"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var conditionSeverity = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(conditionSeverity.err_code == 0){
									  	//cek jumdata dulu
									  	if(conditionSeverity.data.length > 0){
									  		res.json({"err_code": 0, "data":conditionSeverity.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Condition Severity is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": conditionSeverity.error, "application": "Api FHIR", "function": "getConditionSeverity"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		conditionSeverityCode: function getConditionSeverityCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('conditionSeverityCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getConditionSeverityCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var conditionSeverity = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(conditionSeverity.err_code == 0){
								  	//cek jumdata dulu
								  	if(conditionSeverity.data.length > 0){
								  		res.json({"err_code": 0, "data":conditionSeverity.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Condition Severity Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": conditionSeverity.error, "application": "Api FHIR", "function": "getConditionSeverityCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		conditionCode: function getConditionCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('conditionCode', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "conditionCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var conditionCode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(conditionCode.err_code == 0){
								  	//cek jumdata dulu
								  	if(conditionCode.data.length > 0){
								  		res.json({"err_code": 0, "data":conditionCode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Condition Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": conditionCode.error, "application": "Api FHIR", "function": "getConditionCode"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('conditionCode', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getConditionCode"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var conditionCode = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(conditionCode.err_code == 0){
									  	//cek jumdata dulu
									  	if(conditionCode.data.length > 0){
									  		res.json({"err_code": 0, "data":conditionCode.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Condition Code is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": conditionCode.error, "application": "Api FHIR", "function": "getConditionCode"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		conditionCodeCode: function getConditionCodeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('conditionCodeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getConditionCodeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var conditionCode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(conditionCode.err_code == 0){
								  	//cek jumdata dulu
								  	if(conditionCode.data.length > 0){
								  		res.json({"err_code": 0, "data":conditionCode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "ConditionCode Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": conditionCode.error, "application": "Api FHIR", "function": "getConditionCodeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		bodySite: function getBodySite(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('bodySite', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "bodySite"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var bodySite = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(bodySite.err_code == 0){
								  	//cek jumdata dulu
								  	if(bodySite.data.length > 0){
								  		res.json({"err_code": 0, "data":bodySite.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Body Site is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": bodySite.error, "application": "Api FHIR", "function": "getBodySite"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('bodySite', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getBodySite"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var bodySite = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(bodySite.err_code == 0){
									  	//cek jumdata dulu
									  	if(bodySite.data.length > 0){
									  		res.json({"err_code": 0, "data":bodySite.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Body Site is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": bodySite.error, "application": "Api FHIR", "function": "getBodySite"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		bodySiteCode: function getBodySiteCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('bodySiteCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getBodySiteCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var bodySite = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(bodySite.err_code == 0){
								  	//cek jumdata dulu
								  	if(bodySite.data.length > 0){
								  		res.json({"err_code": 0, "data":bodySite.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Body Site Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": bodySite.error, "application": "Api FHIR", "function": "getBodySiteCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		conditionStage: function getConditionStage(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('conditionStage', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "conditionStage"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var conditionStage = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(conditionStage.err_code == 0){
								  	//cek jumdata dulu
								  	if(conditionStage.data.length > 0){
								  		res.json({"err_code": 0, "data":conditionStage.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Condition Stage is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": conditionStage.error, "application": "Api FHIR", "function": "getConditionStage"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('conditionStage', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getConditionStage"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var conditionStage = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(conditionStage.err_code == 0){
									  	//cek jumdata dulu
									  	if(conditionStage.data.length > 0){
									  		res.json({"err_code": 0, "data":conditionStage.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Condition Stage is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": conditionStage.error, "application": "Api FHIR", "function": "getConditionStage"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		conditionStageCode: function getConditionStageCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('conditionStageCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getConditionStageCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var conditionStage = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(conditionStage.err_code == 0){
								  	//cek jumdata dulu
								  	if(conditionStage.data.length > 0){
								  		res.json({"err_code": 0, "data":conditionStage.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Condition Stage Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": conditionStage.error, "application": "Api FHIR", "function": "getConditionStageCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		manifestationOrSymptom: function getManifestationOrSymptom(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('manifestationOrSymptom', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "manifestationOrSymptom"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var manifestationOrSymptom = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(manifestationOrSymptom.err_code == 0){
								  	//cek jumdata dulu
								  	if(manifestationOrSymptom.data.length > 0){
								  		res.json({"err_code": 0, "data":manifestationOrSymptom.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Manifestation Or Symptom is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": manifestationOrSymptom.error, "application": "Api FHIR", "function": "getManifestationOrSymptom"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('manifestationOrSymptom', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getManifestationOrSymptom"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var manifestationOrSymptom = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(manifestationOrSymptom.err_code == 0){
									  	//cek jumdata dulu
									  	if(manifestationOrSymptom.data.length > 0){
									  		res.json({"err_code": 0, "data":manifestationOrSymptom.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Manifestation Or Symptom is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": manifestationOrSymptom.error, "application": "Api FHIR", "function": "getManifestationOrSymptom"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		manifestationOrSymptomCode: function getManifestationOrSymptomCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('manifestationOrSymptomCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getManifestationOrSymptomCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var manifestationOrSymptom = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(manifestationOrSymptom.err_code == 0){
								  	//cek jumdata dulu
								  	if(manifestationOrSymptom.data.length > 0){
								  		res.json({"err_code": 0, "data":manifestationOrSymptom.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Manifestation Or Symptom Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": manifestationOrSymptom.error, "application": "Api FHIR", "function": "getManifestationOrSymptomCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		observationStatus: function getObservationStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('observationStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "observationStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var observationStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(observationStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(observationStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":observationStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Observation Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": observationStatus.error, "application": "Api FHIR", "function": "getObservationStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('observationStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getObservationStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var observationStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(observationStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(observationStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":observationStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Observation Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": observationStatus.error, "application": "Api FHIR", "function": "getObservationStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		observationStatusCode: function getObservationStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('observationStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getObservationStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var observationStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(observationStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(observationStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":observationStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Observation Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": observationStatus.error, "application": "Api FHIR", "function": "getObservationStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		detectedissueCategory: function getDetectedissueCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('detectedissueCategory', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "detectedissueCategory"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var detectedissueCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(detectedissueCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(detectedissueCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":detectedissueCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Detectedissue Category is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": detectedissueCategory.error, "application": "Api FHIR", "function": "getDetectedissueCategory"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('detectedissueCategory', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDetectedissueCategory"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var detectedissueCategory = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(detectedissueCategory.err_code == 0){
									  	//cek jumdata dulu
									  	if(detectedissueCategory.data.length > 0){
									  		res.json({"err_code": 0, "data":detectedissueCategory.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Detectedissue Category is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": detectedissueCategory.error, "application": "Api FHIR", "function": "getDetectedissueCategory"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		detectedissueCategoryCode: function getDetectedissueCategoryCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toUpperCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('detectedissueCategoryCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDetectedissueCategoryCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var detectedissueCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(detectedissueCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(detectedissueCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":detectedissueCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Detectedissue Category Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": detectedissueCategory.error, "application": "Api FHIR", "function": "getDetectedissueCategoryCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		detectedissueSeverity: function getDetectedissueSeverity(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('detectedissueSeverity', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "detectedissueSeverity"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var detectedissueSeverity = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(detectedissueSeverity.err_code == 0){
								  	//cek jumdata dulu
								  	if(detectedissueSeverity.data.length > 0){
								  		res.json({"err_code": 0, "data":detectedissueSeverity.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Detectedissue Severity is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": detectedissueSeverity.error, "application": "Api FHIR", "function": "getDetectedissueSeverity"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('detectedissueSeverity', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDetectedissueSeverity"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var detectedissueSeverity = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(detectedissueSeverity.err_code == 0){
									  	//cek jumdata dulu
									  	if(detectedissueSeverity.data.length > 0){
									  		res.json({"err_code": 0, "data":detectedissueSeverity.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Detectedissue Severity is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": detectedissueSeverity.error, "application": "Api FHIR", "function": "getDetectedissueSeverity"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		detectedissueSeverityCode: function getDetectedissueSeverityCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('detectedissueSeverityCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDetectedissueSeverityCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var detectedissueSeverity = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(detectedissueSeverity.err_code == 0){
								  	//cek jumdata dulu
								  	if(detectedissueSeverity.data.length > 0){
								  		res.json({"err_code": 0, "data":detectedissueSeverity.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Detectedissue Severity Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": detectedissueSeverity.error, "application": "Api FHIR", "function": "getDetectedissueSeverityCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		detectedissueMitigationAction: function getDetectedissueMitigationAction(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('detectedissueMitigationAction', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "detectedissueMitigationAction"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var detectedissueMitigationAction = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(detectedissueMitigationAction.err_code == 0){
								  	//cek jumdata dulu
								  	if(detectedissueMitigationAction.data.length > 0){
								  		res.json({"err_code": 0, "data":detectedissueMitigationAction.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Detectedissue Mitigation Action is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": detectedissueMitigationAction.error, "application": "Api FHIR", "function": "getDetectedissueMitigationAction"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('detectedissueMitigationAction', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDetectedissueMitigationAction"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var detectedissueMitigationAction = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(detectedissueMitigationAction.err_code == 0){
									  	//cek jumdata dulu
									  	if(detectedissueMitigationAction.data.length > 0){
									  		res.json({"err_code": 0, "data":detectedissueMitigationAction.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Detectedissue Mitigation Action is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": detectedissueMitigationAction.error, "application": "Api FHIR", "function": "getDetectedissueMitigationAction"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		detectedissueMitigationActionCode: function getDetectedissueMitigationActionCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('detectedissueMitigationActionCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDetectedissueMitigationActionCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var detectedissueMitigationAction = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(detectedissueMitigationAction.err_code == 0){
								  	//cek jumdata dulu
								  	if(detectedissueMitigationAction.data.length > 0){
								  		res.json({"err_code": 0, "data":detectedissueMitigationAction.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Detectedissue Mitigation Action Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": detectedissueMitigationAction.error, "application": "Api FHIR", "function": "getDetectedissueMitigationActionCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		historyStatus: function getHistoryStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('historyStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "historyStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var historyStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(historyStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(historyStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":historyStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "History Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": historyStatus.error, "application": "Api FHIR", "function": "getHistoryStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('historyStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getHistoryStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var historyStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(historyStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(historyStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":historyStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "History Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": historyStatus.error, "application": "Api FHIR", "function": "getHistoryStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		historyStatusCode: function getHistoryStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('historyStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getHistoryStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var historyStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(historyStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(historyStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":historyStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "History Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": historyStatus.error, "application": "Api FHIR", "function": "getHistoryStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		historyNotDoneReason: function getHistoryNotDoneReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('historyNotDoneReason', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "historyNotDoneReason"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var historyNotDoneReason = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(historyNotDoneReason.err_code == 0){
								  	//cek jumdata dulu
								  	if(historyNotDoneReason.data.length > 0){
								  		res.json({"err_code": 0, "data":historyNotDoneReason.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "History Not Done Reason is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": historyNotDoneReason.error, "application": "Api FHIR", "function": "getHistoryNotDoneReason"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('historyNotDoneReason', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getHistoryNotDoneReason"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var historyNotDoneReason = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(historyNotDoneReason.err_code == 0){
									  	//cek jumdata dulu
									  	if(historyNotDoneReason.data.length > 0){
									  		res.json({"err_code": 0, "data":historyNotDoneReason.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "History Not Done Reason is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": historyNotDoneReason.error, "application": "Api FHIR", "function": "getHistoryNotDoneReason"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		historyNotDoneReasonCode: function getHistoryNotDoneReasonCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('historyNotDoneReasonCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getHistoryNotDoneReasonCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var historyNotDoneReason = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(historyNotDoneReason.err_code == 0){
								  	//cek jumdata dulu
								  	if(historyNotDoneReason.data.length > 0){
								  		res.json({"err_code": 0, "data":historyNotDoneReason.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "History Not Done Reason Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": historyNotDoneReason.error, "application": "Api FHIR", "function": "getHistoryNotDoneReasonCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		familyMember: function getFamilyMember(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('familyMember', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "familyMember"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var familyMember = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(familyMember.err_code == 0){
								  	//cek jumdata dulu
								  	if(familyMember.data.length > 0){
								  		res.json({"err_code": 0, "data":familyMember.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Family Member is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": familyMember.error, "application": "Api FHIR", "function": "getFamilyMember"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('familyMember', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getFamilyMember"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var familyMember = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(familyMember.err_code == 0){
									  	//cek jumdata dulu
									  	if(familyMember.data.length > 0){
									  		res.json({"err_code": 0, "data":familyMember.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Family Member is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": familyMember.error, "application": "Api FHIR", "function": "getFamilyMember"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		familyMemberCode: function getFamilyMemberCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toUpperCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('familyMemberCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getFamilyMemberCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var familyMember = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(familyMember.err_code == 0){
								  	//cek jumdata dulu
								  	if(familyMember.data.length > 0){
								  		res.json({"err_code": 0, "data":familyMember.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Family Member Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": familyMember.error, "application": "Api FHIR", "function": "getFamilyMemberCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		conditionOutcome: function getConditionOutcome(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('conditionOutcome', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "conditionOutcome"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var conditionOutcome = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(conditionOutcome.err_code == 0){
								  	//cek jumdata dulu
								  	if(conditionOutcome.data.length > 0){
								  		res.json({"err_code": 0, "data":conditionOutcome.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Condition Outcome is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": conditionOutcome.error, "application": "Api FHIR", "function": "getConditionOutcome"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('conditionOutcome', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getConditionOutcome"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var conditionOutcome = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(conditionOutcome.err_code == 0){
									  	//cek jumdata dulu
									  	if(conditionOutcome.data.length > 0){
									  		res.json({"err_code": 0, "data":conditionOutcome.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Condition Outcome is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": conditionOutcome.error, "application": "Api FHIR", "function": "getConditionOutcome"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		conditionOutcomeCode: function getConditionOutcomeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('conditionOutcomeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getConditionOutcomeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var conditionOutcome = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(conditionOutcome.err_code == 0){
								  	//cek jumdata dulu
								  	if(conditionOutcome.data.length > 0){
								  		res.json({"err_code": 0, "data":conditionOutcome.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Condition Outcome Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": conditionOutcome.error, "application": "Api FHIR", "function": "getConditionOutcomeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		riskProbability: function getRiskProbability(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('riskProbability', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "riskProbability"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var riskProbability = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(riskProbability.err_code == 0){
								  	//cek jumdata dulu
								  	if(riskProbability.data.length > 0){
								  		res.json({"err_code": 0, "data":riskProbability.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Risk Probability is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": riskProbability.error, "application": "Api FHIR", "function": "getRiskProbability"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('riskProbability', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getRiskProbability"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var riskProbability = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(riskProbability.err_code == 0){
									  	//cek jumdata dulu
									  	if(riskProbability.data.length > 0){
									  		res.json({"err_code": 0, "data":riskProbability.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Risk Probability is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": riskProbability.error, "application": "Api FHIR", "function": "getRiskProbability"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		riskProbabilityCode: function getRiskProbabilityCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('riskProbabilityCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getRiskProbabilityCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var riskProbability = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(riskProbability.err_code == 0){
								  	//cek jumdata dulu
								  	if(riskProbability.data.length > 0){
								  		res.json({"err_code": 0, "data":riskProbability.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Risk Probability Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": riskProbability.error, "application": "Api FHIR", "function": "getRiskProbabilityCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		goalStatus: function getGoalStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('goalStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "goalStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var goalStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(goalStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(goalStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":goalStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Goal Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": goalStatus.error, "application": "Api FHIR", "function": "getGoalStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('goalStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getGoalStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var goalStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(goalStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(goalStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":goalStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Goal Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": goalStatus.error, "application": "Api FHIR", "function": "getGoalStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		goalStatusCode: function getGoalStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('goalStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getGoalStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var goalStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(goalStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(goalStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":goalStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Goal Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": goalStatus.error, "application": "Api FHIR", "function": "getGoalStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		goalCategory: function getGoalCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('goalCategory', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "goalCategory"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var goalCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(goalCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(goalCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":goalCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Goal Category is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": goalCategory.error, "application": "Api FHIR", "function": "getGoalCategory"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('goalCategory', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getGoalCategory"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var goalCategory = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(goalCategory.err_code == 0){
									  	//cek jumdata dulu
									  	if(goalCategory.data.length > 0){
									  		res.json({"err_code": 0, "data":goalCategory.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Goal Category is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": goalCategory.error, "application": "Api FHIR", "function": "getGoalCategory"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		goalCategoryCode: function getGoalCategoryCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('goalCategoryCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getGoalCategoryCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var goalCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(goalCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(goalCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":goalCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Goal Category Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": goalCategory.error, "application": "Api FHIR", "function": "getGoalCategoryCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		goalPriority: function getGoalPriority(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('goalPriority', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "goalPriority"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var goalPriority = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(goalPriority.err_code == 0){
								  	//cek jumdata dulu
								  	if(goalPriority.data.length > 0){
								  		res.json({"err_code": 0, "data":goalPriority.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Goal Priority is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": goalPriority.error, "application": "Api FHIR", "function": "getGoalPriority"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('goalPriority', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getGoalPriority"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var goalPriority = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(goalPriority.err_code == 0){
									  	//cek jumdata dulu
									  	if(goalPriority.data.length > 0){
									  		res.json({"err_code": 0, "data":goalPriority.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Goal Priority is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": goalPriority.error, "application": "Api FHIR", "function": "getGoalPriority"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		goalPriorityCode: function getGoalPriorityCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('goalPriorityCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getGoalPriorityCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var goalPriority = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(goalPriority.err_code == 0){
								  	//cek jumdata dulu
								  	if(goalPriority.data.length > 0){
								  		res.json({"err_code": 0, "data":goalPriority.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Goal Priority Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": goalPriority.error, "application": "Api FHIR", "function": "getGoalPriorityCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		goalStartEvent: function getGoalStartEvent(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('goalStartEvent', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "goalStartEvent"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var goalStartEvent = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(goalStartEvent.err_code == 0){
								  	//cek jumdata dulu
								  	if(goalStartEvent.data.length > 0){
								  		res.json({"err_code": 0, "data":goalStartEvent.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Goal Start Event is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": goalStartEvent.error, "application": "Api FHIR", "function": "getGoalStartEvent"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('goalStartEvent', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getGoalStartEvent"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var goalStartEvent = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(goalStartEvent.err_code == 0){
									  	//cek jumdata dulu
									  	if(goalStartEvent.data.length > 0){
									  		res.json({"err_code": 0, "data":goalStartEvent.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Goal Start Event is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": goalStartEvent.error, "application": "Api FHIR", "function": "getGoalStartEvent"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		goalStartEventCode: function getGoalStartEventCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('goalStartEventCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getGoalStartEventCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var goalStartEvent = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(goalStartEvent.err_code == 0){
								  	//cek jumdata dulu
								  	if(goalStartEvent.data.length > 0){
								  		res.json({"err_code": 0, "data":goalStartEvent.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Goal Start Event Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": goalStartEvent.error, "application": "Api FHIR", "function": "getGoalStartEventCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		observationCodes: function getObservationCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('observationCodes', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "observationCodes"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var observationCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(observationCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(observationCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":observationCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Observation Codes is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": observationCodes.error, "application": "Api FHIR", "function": "getObservationCodes"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('observationCodes', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getObservationCodes"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var observationCodes = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(observationCodes.err_code == 0){
									  	//cek jumdata dulu
									  	if(observationCodes.data.length > 0){
									  		res.json({"err_code": 0, "data":observationCodes.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Observation Codes is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": observationCodes.error, "application": "Api FHIR", "function": "getObservationCodes"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		observationCodesCode: function getObservationCodesCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('observationCodesCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getObservationCodesCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var observationCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(observationCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(observationCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":observationCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Observation Codes Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": observationCodes.error, "application": "Api FHIR", "function": "getObservationCodesCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		eventStatus: function getEventStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('eventStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "eventStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var eventStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(eventStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(eventStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":eventStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Event Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": eventStatus.error, "application": "Api FHIR", "function": "getEventStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('eventStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getEventStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var eventStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(eventStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(eventStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":eventStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Event Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": eventStatus.error, "application": "Api FHIR", "function": "getEventStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		eventStatusCode: function getEventStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('eventStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getEventStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var eventStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(eventStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(eventStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":eventStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Event Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": eventStatus.error, "application": "Api FHIR", "function": "getEventStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		procedureNotPerformedReason: function getProcedureNotPerformedReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('procedureNotPerformedReason', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "procedureNotPerformedReason"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var procedureNotPerformedReason = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(procedureNotPerformedReason.err_code == 0){
								  	//cek jumdata dulu
								  	if(procedureNotPerformedReason.data.length > 0){
								  		res.json({"err_code": 0, "data":procedureNotPerformedReason.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Procedure Not Performed Reason is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": procedureNotPerformedReason.error, "application": "Api FHIR", "function": "getProcedureNotPerformedReason"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('procedureNotPerformedReason', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getProcedureNotPerformedReason"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var procedureNotPerformedReason = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(procedureNotPerformedReason.err_code == 0){
									  	//cek jumdata dulu
									  	if(procedureNotPerformedReason.data.length > 0){
									  		res.json({"err_code": 0, "data":procedureNotPerformedReason.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Procedure Not Performed Reason is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": procedureNotPerformedReason.error, "application": "Api FHIR", "function": "getProcedureNotPerformedReason"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		procedureNotPerformedReasonCode: function getProcedureNotPerformedReasonCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('procedureNotPerformedReasonCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getProcedureNotPerformedReasonCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var procedureNotPerformedReason = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(procedureNotPerformedReason.err_code == 0){
								  	//cek jumdata dulu
								  	if(procedureNotPerformedReason.data.length > 0){
								  		res.json({"err_code": 0, "data":procedureNotPerformedReason.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Procedure Not Performed Reason Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": procedureNotPerformedReason.error, "application": "Api FHIR", "function": "getProcedureNotPerformedReasonCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		procedureCategory: function getProcedureCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('procedureCategory', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "procedureCategory"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var procedureCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(procedureCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(procedureCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":procedureCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Procedure Category is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": procedureCategory.error, "application": "Api FHIR", "function": "getProcedureCategory"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('procedureCategory', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getProcedureCategory"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var procedureCategory = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(procedureCategory.err_code == 0){
									  	//cek jumdata dulu
									  	if(procedureCategory.data.length > 0){
									  		res.json({"err_code": 0, "data":procedureCategory.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Procedure Category is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": procedureCategory.error, "application": "Api FHIR", "function": "getProcedureCategory"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		procedureCategoryCode: function getProcedureCategoryCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('procedureCategoryCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getProcedureCategoryCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var procedureCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(procedureCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(procedureCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":procedureCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Procedure Category Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": procedureCategory.error, "application": "Api FHIR", "function": "getProcedureCategoryCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		procedureCode: function getProcedureCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('procedureCode', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "procedureCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var procedureCode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(procedureCode.err_code == 0){
								  	//cek jumdata dulu
								  	if(procedureCode.data.length > 0){
								  		res.json({"err_code": 0, "data":procedureCode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Procedure Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": procedureCode.error, "application": "Api FHIR", "function": "getProcedureCode"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('procedureCode', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getProcedureCode"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var procedureCode = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(procedureCode.err_code == 0){
									  	//cek jumdata dulu
									  	if(procedureCode.data.length > 0){
									  		res.json({"err_code": 0, "data":procedureCode.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Procedure Code is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": procedureCode.error, "application": "Api FHIR", "function": "getProcedureCode"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		procedureCodeCode: function getProcedureCodeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('procedureCodeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getProcedureCodeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var procedureCode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(procedureCode.err_code == 0){
								  	//cek jumdata dulu
								  	if(procedureCode.data.length > 0){
								  		res.json({"err_code": 0, "data":procedureCode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Procedure Code Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": procedureCode.error, "application": "Api FHIR", "function": "getProcedureCodeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		performerRole: function getPerformerRole(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('performerRole', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "performerRole"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var performerRole = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(performerRole.err_code == 0){
								  	//cek jumdata dulu
								  	if(performerRole.data.length > 0){
								  		res.json({"err_code": 0, "data":performerRole.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Performer Role is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": performerRole.error, "application": "Api FHIR", "function": "getPerformerRole"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('performerRole', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getPerformerRole"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var performerRole = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(performerRole.err_code == 0){
									  	//cek jumdata dulu
									  	if(performerRole.data.length > 0){
									  		res.json({"err_code": 0, "data":performerRole.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Performer Role is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": performerRole.error, "application": "Api FHIR", "function": "getPerformerRole"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		performerRoleCode: function getPerformerRoleCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('performerRoleCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getPerformerRoleCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var performerRole = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(performerRole.err_code == 0){
								  	//cek jumdata dulu
								  	if(performerRole.data.length > 0){
								  		res.json({"err_code": 0, "data":performerRole.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Performer Role Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": performerRole.error, "application": "Api FHIR", "function": "getPerformerRoleCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		procedureReason: function getProcedureReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('procedureReason', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "procedureReason"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var procedureReason = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(procedureReason.err_code == 0){
								  	//cek jumdata dulu
								  	if(procedureReason.data.length > 0){
								  		res.json({"err_code": 0, "data":procedureReason.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Procedure Reason is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": procedureReason.error, "application": "Api FHIR", "function": "getProcedureReason"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('procedureReason', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getProcedureReason"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var procedureReason = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(procedureReason.err_code == 0){
									  	//cek jumdata dulu
									  	if(procedureReason.data.length > 0){
									  		res.json({"err_code": 0, "data":procedureReason.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Procedure Reason is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": procedureReason.error, "application": "Api FHIR", "function": "getProcedureReason"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		procedureReasonCode: function getProcedureReasonCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('procedureReasonCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getProcedureReasonCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var procedureReason = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(procedureReason.err_code == 0){
								  	//cek jumdata dulu
								  	if(procedureReason.data.length > 0){
								  		res.json({"err_code": 0, "data":procedureReason.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Procedure Reason Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": procedureReason.error, "application": "Api FHIR", "function": "getProcedureReasonCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		procedureOutcome: function getProcedureOutcome(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('procedureOutcome', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "procedureOutcome"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var procedureOutcome = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(procedureOutcome.err_code == 0){
								  	//cek jumdata dulu
								  	if(procedureOutcome.data.length > 0){
								  		res.json({"err_code": 0, "data":procedureOutcome.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Procedure Outcome is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": procedureOutcome.error, "application": "Api FHIR", "function": "getProcedureOutcome"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('procedureOutcome', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getProcedureOutcome"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var procedureOutcome = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(procedureOutcome.err_code == 0){
									  	//cek jumdata dulu
									  	if(procedureOutcome.data.length > 0){
									  		res.json({"err_code": 0, "data":procedureOutcome.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Procedure Outcome is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": procedureOutcome.error, "application": "Api FHIR", "function": "getProcedureOutcome"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		procedureOutcomeCode: function getProcedureOutcomeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('procedureOutcomeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getProcedureOutcomeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var procedureOutcome = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(procedureOutcome.err_code == 0){
								  	//cek jumdata dulu
								  	if(procedureOutcome.data.length > 0){
								  		res.json({"err_code": 0, "data":procedureOutcome.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Procedure Outcome Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": procedureOutcome.error, "application": "Api FHIR", "function": "getProcedureOutcomeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		procedureFollowup: function getProcedureFollowup(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('procedureFollowup', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "procedureFollowup"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var procedureFollowup = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(procedureFollowup.err_code == 0){
								  	//cek jumdata dulu
								  	if(procedureFollowup.data.length > 0){
								  		res.json({"err_code": 0, "data":procedureFollowup.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Procedure Followup is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": procedureFollowup.error, "application": "Api FHIR", "function": "getProcedureFollowup"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('procedureFollowup', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getProcedureFollowup"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var procedureFollowup = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(procedureFollowup.err_code == 0){
									  	//cek jumdata dulu
									  	if(procedureFollowup.data.length > 0){
									  		res.json({"err_code": 0, "data":procedureFollowup.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Procedure Followup is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": procedureFollowup.error, "application": "Api FHIR", "function": "getProcedureFollowup"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		procedureFollowupCode: function getProcedureFollowupCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('procedureFollowupCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getProcedureFollowupCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var procedureFollowup = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(procedureFollowup.err_code == 0){
								  	//cek jumdata dulu
								  	if(procedureFollowup.data.length > 0){
								  		res.json({"err_code": 0, "data":procedureFollowup.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Procedure Followup Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": procedureFollowup.error, "application": "Api FHIR", "function": "getProcedureFollowupCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		deviceAction: function getDeviceAction(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('deviceAction', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "deviceAction"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var deviceAction = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(deviceAction.err_code == 0){
								  	//cek jumdata dulu
								  	if(deviceAction.data.length > 0){
								  		res.json({"err_code": 0, "data":deviceAction.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Device Action is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": deviceAction.error, "application": "Api FHIR", "function": "getDeviceAction"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('deviceAction', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDeviceAction"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var deviceAction = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(deviceAction.err_code == 0){
									  	//cek jumdata dulu
									  	if(deviceAction.data.length > 0){
									  		res.json({"err_code": 0, "data":deviceAction.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Device Action is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": deviceAction.error, "application": "Api FHIR", "function": "getDeviceAction"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		deviceActionCode: function getDeviceActionCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('deviceActionCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDeviceActionCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var deviceAction = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(deviceAction.err_code == 0){
								  	//cek jumdata dulu
								  	if(deviceAction.data.length > 0){
								  		res.json({"err_code": 0, "data":deviceAction.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Device Action Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": deviceAction.error, "application": "Api FHIR", "function": "getDeviceActionCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		deviceKind: function getDeviceKind(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('deviceKind', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "deviceKind"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var deviceKind = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(deviceKind.err_code == 0){
								  	//cek jumdata dulu
								  	if(deviceKind.data.length > 0){
								  		res.json({"err_code": 0, "data":deviceKind.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Device Kind is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": deviceKind.error, "application": "Api FHIR", "function": "getDeviceKind"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('deviceKind', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDeviceKind"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var deviceKind = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(deviceKind.err_code == 0){
									  	//cek jumdata dulu
									  	if(deviceKind.data.length > 0){
									  		res.json({"err_code": 0, "data":deviceKind.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Device Kind is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": deviceKind.error, "application": "Api FHIR", "function": "getDeviceKind"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		deviceKindCode: function getDeviceKindCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('deviceKindCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getDeviceKindCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var deviceKind = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(deviceKind.err_code == 0){
								  	//cek jumdata dulu
								  	if(deviceKind.data.length > 0){
								  		res.json({"err_code": 0, "data":deviceKind.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Device Kind Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": deviceKind.error, "application": "Api FHIR", "function": "getDeviceKindCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		immunizationStatus: function getImmunizationStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('immunizationStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "immunizationStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var immunizationStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(immunizationStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(immunizationStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":immunizationStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": immunizationStatus.error, "application": "Api FHIR", "function": "getImmunizationStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('immunizationStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var immunizationStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(immunizationStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(immunizationStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":immunizationStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Immunization Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": immunizationStatus.error, "application": "Api FHIR", "function": "getImmunizationStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		immunizationStatusCode: function getImmunizationStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('immunizationStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var immunizationStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(immunizationStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(immunizationStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":immunizationStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": immunizationStatus.error, "application": "Api FHIR", "function": "getImmunizationStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		vaccineCode: function getvaccineCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('vaccineCode', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "vaccineCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var vaccineCode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(vaccineCode.err_code == 0){
								  	//cek jumdata dulu
								  	if(vaccineCode.data.length > 0){
								  		res.json({"err_code": 0, "data":vaccineCode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Vaccine Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": vaccineCode.error, "application": "Api FHIR", "function": "getvaccineCode"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('vaccineCode', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getvaccineCode"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var vaccineCode = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(vaccineCode.err_code == 0){
									  	//cek jumdata dulu
									  	if(vaccineCode.data.length > 0){
									  		res.json({"err_code": 0, "data":vaccineCode.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Vaccine Code is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": vaccineCode.error, "application": "Api FHIR", "function": "getvaccineCode"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		vaccineCodeCode: function getvaccineCodeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('vaccineCodeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getvaccineCodeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var vaccineCode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(vaccineCode.err_code == 0){
								  	//cek jumdata dulu
								  	if(vaccineCode.data.length > 0){
								  		res.json({"err_code": 0, "data":vaccineCode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Vaccine Code Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": vaccineCode.error, "application": "Api FHIR", "function": "getvaccineCodeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		immunizationOrigin: function getImmunizationOrigin(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('immunizationOrigin', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "immunizationOrigin"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var immunizationOrigin = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(immunizationOrigin.err_code == 0){
								  	//cek jumdata dulu
								  	if(immunizationOrigin.data.length > 0){
								  		res.json({"err_code": 0, "data":immunizationOrigin.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Origin is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": immunizationOrigin.error, "application": "Api FHIR", "function": "getImmunizationOrigin"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('immunizationOrigin', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationOrigin"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var immunizationOrigin = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(immunizationOrigin.err_code == 0){
									  	//cek jumdata dulu
									  	if(immunizationOrigin.data.length > 0){
									  		res.json({"err_code": 0, "data":immunizationOrigin.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Immunization Origin is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": immunizationOrigin.error, "application": "Api FHIR", "function": "getImmunizationOrigin"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		immunizationOriginCode: function getImmunizationOriginCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('immunizationOriginCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationOriginCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var immunizationOrigin = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(immunizationOrigin.err_code == 0){
								  	//cek jumdata dulu
								  	if(immunizationOrigin.data.length > 0){
								  		res.json({"err_code": 0, "data":immunizationOrigin.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Origin Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": immunizationOrigin.error, "application": "Api FHIR", "function": "getImmunizationOriginCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		immunizationSite: function getImmunizationSite(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('immunizationSite', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "immunizationSite"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var immunizationSite = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(immunizationSite.err_code == 0){
								  	//cek jumdata dulu
								  	if(immunizationSite.data.length > 0){
								  		res.json({"err_code": 0, "data":immunizationSite.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Site is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": immunizationSite.error, "application": "Api FHIR", "function": "getImmunizationSite"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('immunizationSite', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationSite"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var immunizationSite = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(immunizationSite.err_code == 0){
									  	//cek jumdata dulu
									  	if(immunizationSite.data.length > 0){
									  		res.json({"err_code": 0, "data":immunizationSite.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Immunization Site is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": immunizationSite.error, "application": "Api FHIR", "function": "getImmunizationSite"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		immunizationSiteCode: function getImmunizationSiteCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toUpperCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('immunizationSiteCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationSiteCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var immunizationSite = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(immunizationSite.err_code == 0){
								  	//cek jumdata dulu
								  	if(immunizationSite.data.length > 0){
								  		res.json({"err_code": 0, "data":immunizationSite.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Site Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": immunizationSite.error, "application": "Api FHIR", "function": "getImmunizationSiteCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		immunizationRoute: function getImmunizationRoutes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('immunizationRoute', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "immunizationRoute"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var immunizationRoute = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(immunizationRoute.err_code == 0){
								  	//cek jumdata dulu
								  	if(immunizationRoute.data.length > 0){
								  		res.json({"err_code": 0, "data":immunizationRoute.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Routes is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": immunizationRoute.error, "application": "Api FHIR", "function": "getImmunizationRoutes"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('immunizationRoute', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationRoutes"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var immunizationRoute = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(immunizationRoute.err_code == 0){
									  	//cek jumdata dulu
									  	if(immunizationRoute.data.length > 0){
									  		res.json({"err_code": 0, "data":immunizationRoute.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Immunization Routes is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": immunizationRoute.error, "application": "Api FHIR", "function": "getImmunizationRoutes"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		immunizationRouteCode: function getImmunizationRoutesCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toUpperCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('immunizationRouteCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationRoutesCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var immunizationRoute = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(immunizationRoute.err_code == 0){
								  	//cek jumdata dulu
								  	if(immunizationRoute.data.length > 0){
								  		res.json({"err_code": 0, "data":immunizationRoute.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Routes Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": immunizationRoute.error, "application": "Api FHIR", "function": "getImmunizationRoutesCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		immunizationRole: function getImmunizationRole(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('immunizationRole', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "immunizationRole"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var immunizationRole = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(immunizationRole.err_code == 0){
								  	//cek jumdata dulu
								  	if(immunizationRole.data.length > 0){
								  		res.json({"err_code": 0, "data":immunizationRole.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Role is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": immunizationRole.error, "application": "Api FHIR", "function": "getImmunizationRole"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('immunizationRole', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationRole"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var immunizationRole = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(immunizationRole.err_code == 0){
									  	//cek jumdata dulu
									  	if(immunizationRole.data.length > 0){
									  		res.json({"err_code": 0, "data":immunizationRole.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Immunization Role is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": immunizationRole.error, "application": "Api FHIR", "function": "getImmunizationRole"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		immunizationRoleCode: function getImmunizationRoleCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toUpperCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('immunizationRoleCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationRoleCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var immunizationRole = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(immunizationRole.err_code == 0){
								  	//cek jumdata dulu
								  	if(immunizationRole.data.length > 0){
								  		res.json({"err_code": 0, "data":immunizationRole.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Role Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": immunizationRole.error, "application": "Api FHIR", "function": "getImmunizationRoleCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		immunizationReason: function getImmunizationReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('immunizationReason', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "immunizationReason"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var immunizationReason = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(immunizationReason.err_code == 0){
								  	//cek jumdata dulu
								  	if(immunizationReason.data.length > 0){
								  		res.json({"err_code": 0, "data":immunizationReason.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Reason is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": immunizationReason.error, "application": "Api FHIR", "function": "getImmunizationReason"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('immunizationReason', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationReason"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var immunizationReason = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(immunizationReason.err_code == 0){
									  	//cek jumdata dulu
									  	if(immunizationReason.data.length > 0){
									  		res.json({"err_code": 0, "data":immunizationReason.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Immunization Reason is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": immunizationReason.error, "application": "Api FHIR", "function": "getImmunizationReason"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		immunizationReasonCode: function getImmunizationReasonCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('immunizationReasonCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationReasonCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var immunizationReason = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(immunizationReason.err_code == 0){
								  	//cek jumdata dulu
								  	if(immunizationReason.data.length > 0){
								  		res.json({"err_code": 0, "data":immunizationReason.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Reason Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": immunizationReason.error, "application": "Api FHIR", "function": "getImmunizationReasonCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		noImmunizationReason: function getNoImmunizationReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('noImmunizationReason', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "noImmunizationReason"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var noImmunizationReason = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(noImmunizationReason.err_code == 0){
								  	//cek jumdata dulu
								  	if(noImmunizationReason.data.length > 0){
								  		res.json({"err_code": 0, "data":noImmunizationReason.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "No Immunization Reason is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": noImmunizationReason.error, "application": "Api FHIR", "function": "getNoImmunizationReason"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('noImmunizationReason', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getNoImmunizationReason"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var noImmunizationReason = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(noImmunizationReason.err_code == 0){
									  	//cek jumdata dulu
									  	if(noImmunizationReason.data.length > 0){
									  		res.json({"err_code": 0, "data":noImmunizationReason.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "No Immunization Reason is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": noImmunizationReason.error, "application": "Api FHIR", "function": "getNoImmunizationReason"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		noImmunizationReasonCode: function getNoImmunizationReasonCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toUpperCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('noImmunizationReasonCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getNoImmunizationReasonCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var noImmunizationReason = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(noImmunizationReason.err_code == 0){
								  	//cek jumdata dulu
								  	if(noImmunizationReason.data.length > 0){
								  		res.json({"err_code": 0, "data":noImmunizationReason.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Reason Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": noImmunizationReason.error, "application": "Api FHIR", "function": "getNoImmunizationReasonCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		vaccinationProtocolDoseTarget: function getVaccinationProtocolDoseTarget(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('vaccinationProtocolDoseTarget', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "vaccinationProtocolDoseTarget"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var vaccinationProtocolDoseTarget = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(vaccinationProtocolDoseTarget.err_code == 0){
								  	//cek jumdata dulu
								  	if(vaccinationProtocolDoseTarget.data.length > 0){
								  		res.json({"err_code": 0, "data":vaccinationProtocolDoseTarget.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Vaccination Protocol Dose Target is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": vaccinationProtocolDoseTarget.error, "application": "Api FHIR", "function": "getVaccinationProtocolDoseTarget"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('vaccinationProtocolDoseTarget', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getVaccinationProtocolDoseTarget"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var vaccinationProtocolDoseTarget = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(vaccinationProtocolDoseTarget.err_code == 0){
									  	//cek jumdata dulu
									  	if(vaccinationProtocolDoseTarget.data.length > 0){
									  		res.json({"err_code": 0, "data":vaccinationProtocolDoseTarget.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Vaccination Protocol Dose Target is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": vaccinationProtocolDoseTarget.error, "application": "Api FHIR", "function": "getVaccinationProtocolDoseTarget"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		vaccinationProtocolDoseTargetCode: function getVaccinationProtocolDoseTargetCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toUpperCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('vaccinationProtocolDoseTargetCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getVaccinationProtocolDoseTargetCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var vaccinationProtocolDoseTarget = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(vaccinationProtocolDoseTarget.err_code == 0){
								  	//cek jumdata dulu
								  	if(vaccinationProtocolDoseTarget.data.length > 0){
								  		res.json({"err_code": 0, "data":vaccinationProtocolDoseTarget.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Vaccination Protocol Dose Target Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": vaccinationProtocolDoseTarget.error, "application": "Api FHIR", "function": "getVaccinationProtocolDoseTargetCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		vaccinationProtocolDoseStatus: function getVaccinationProtocolDoseStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('vaccinationProtocolDoseStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "vaccinationProtocolDoseStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var vaccinationProtocolDoseStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(vaccinationProtocolDoseStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(vaccinationProtocolDoseStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":vaccinationProtocolDoseStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Vaccination Protocol Dose Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": vaccinationProtocolDoseStatus.error, "application": "Api FHIR", "function": "getVaccinationProtocolDoseStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('vaccinationProtocolDoseStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getVaccinationProtocolDoseStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var vaccinationProtocolDoseStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(vaccinationProtocolDoseStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(vaccinationProtocolDoseStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":vaccinationProtocolDoseStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Vaccination Protocol Dose Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": vaccinationProtocolDoseStatus.error, "application": "Api FHIR", "function": "getVaccinationProtocolDoseStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		vaccinationProtocolDoseStatusCode: function getVaccinationProtocolDoseStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('vaccinationProtocolDoseStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getVaccinationProtocolDoseStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var vaccinationProtocolDoseStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(vaccinationProtocolDoseStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(vaccinationProtocolDoseStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":vaccinationProtocolDoseStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Vaccination Protocol Dose Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": vaccinationProtocolDoseStatus.error, "application": "Api FHIR", "function": "getVaccinationProtocolDoseStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		vaccinationProtocolDoseStatusReason: function getVaccinationProtocolDoseStatusReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('vaccinationProtocolDoseStatusReason', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "vaccinationProtocolDoseStatusReason"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var vaccinationProtocolDoseStatusReason = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(vaccinationProtocolDoseStatusReason.err_code == 0){
								  	//cek jumdata dulu
								  	if(vaccinationProtocolDoseStatusReason.data.length > 0){
								  		res.json({"err_code": 0, "data":vaccinationProtocolDoseStatusReason.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Vaccination Protocol Dose Status Reason is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": vaccinationProtocolDoseStatusReason.error, "application": "Api FHIR", "function": "getVaccinationProtocolDoseStatusReason"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('vaccinationProtocolDoseStatusReason', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getVaccinationProtocolDoseStatusReason"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var vaccinationProtocolDoseStatusReason = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(vaccinationProtocolDoseStatusReason.err_code == 0){
									  	//cek jumdata dulu
									  	if(vaccinationProtocolDoseStatusReason.data.length > 0){
									  		res.json({"err_code": 0, "data":vaccinationProtocolDoseStatusReason.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Vaccination Protocol Dose Status Reason is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": vaccinationProtocolDoseStatusReason.error, "application": "Api FHIR", "function": "getVaccinationProtocolDoseStatusReason"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		vaccinationProtocolDoseStatusReasonCode: function getVaccinationProtocolDoseStatusReasonCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('vaccinationProtocolDoseStatusReasonCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getVaccinationProtocolDoseStatusReasonCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var vaccinationProtocolDoseStatusReason = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(vaccinationProtocolDoseStatusReason.err_code == 0){
								  	//cek jumdata dulu
								  	if(vaccinationProtocolDoseStatusReason.data.length > 0){
								  		res.json({"err_code": 0, "data":vaccinationProtocolDoseStatusReason.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Vaccination Protocol Dose Status Reason Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": vaccinationProtocolDoseStatusReason.error, "application": "Api FHIR", "function": "getVaccinationProtocolDoseStatusReasonCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		immunizationRecommendationTargetDisease: function getImmunizationRecommendationTargetDisease(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('immunizationRecommendationTargetDisease', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "immunizationRecommendationTargetDisease"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var immunizationRecommendationTargetDisease = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(immunizationRecommendationTargetDisease.err_code == 0){
								  	//cek jumdata dulu
								  	if(immunizationRecommendationTargetDisease.data.length > 0){
								  		res.json({"err_code": 0, "data":immunizationRecommendationTargetDisease.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Recommendation Target Disease is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": immunizationRecommendationTargetDisease.error, "application": "Api FHIR", "function": "getImmunizationRecommendationTargetDisease"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('immunizationRecommendationTargetDisease', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationRecommendationTargetDisease"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var immunizationRecommendationTargetDisease = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(immunizationRecommendationTargetDisease.err_code == 0){
									  	//cek jumdata dulu
									  	if(immunizationRecommendationTargetDisease.data.length > 0){
									  		res.json({"err_code": 0, "data":immunizationRecommendationTargetDisease.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Immunization Recommendation Target Disease is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": immunizationRecommendationTargetDisease.error, "application": "Api FHIR", "function": "getImmunizationRecommendationTargetDisease"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		immunizationRecommendationTargetDiseaseCode: function getImmunizationRecommendationTargetDiseaseCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('immunizationRecommendationTargetDiseaseCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationRecommendationTargetDiseaseCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var immunizationRecommendationTargetDisease = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(immunizationRecommendationTargetDisease.err_code == 0){
								  	//cek jumdata dulu
								  	if(immunizationRecommendationTargetDisease.data.length > 0){
								  		res.json({"err_code": 0, "data":immunizationRecommendationTargetDisease.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Recommendation Target Disease Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": immunizationRecommendationTargetDisease.error, "application": "Api FHIR", "function": "getImmunizationRecommendationTargetDiseaseCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		immunizationRecommendationStatus: function getImmunizationRecommendationStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('immunizationRecommendationStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "immunizationRecommendationStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var immunizationRecommendationStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(immunizationRecommendationStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(immunizationRecommendationStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":immunizationRecommendationStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Recommendation Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": immunizationRecommendationStatus.error, "application": "Api FHIR", "function": "getImmunizationRecommendationStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('immunizationRecommendationStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationRecommendationStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var immunizationRecommendationStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(immunizationRecommendationStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(immunizationRecommendationStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":immunizationRecommendationStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Immunization Recommendation Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": immunizationRecommendationStatus.error, "application": "Api FHIR", "function": "getImmunizationRecommendationStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		immunizationRecommendationStatusCode: function getImmunizationRecommendationStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('immunizationRecommendationStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationRecommendationStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var immunizationRecommendationStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(immunizationRecommendationStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(immunizationRecommendationStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":immunizationRecommendationStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Recommendation Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": immunizationRecommendationStatus.error, "application": "Api FHIR", "function": "getImmunizationRecommendationStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		immunizationRecommendationDateCriterion: function getImmunizationRecommendationDateCriterion(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('immunizationRecommendationDateCriterion', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "immunizationRecommendationDateCriterion"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var immunizationRecommendationDateCriterion = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(immunizationRecommendationDateCriterion.err_code == 0){
								  	//cek jumdata dulu
								  	if(immunizationRecommendationDateCriterion.data.length > 0){
								  		res.json({"err_code": 0, "data":immunizationRecommendationDateCriterion.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Recommendation Date Criterion is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": immunizationRecommendationDateCriterion.error, "application": "Api FHIR", "function": "getImmunizationRecommendationDateCriterion"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('immunizationRecommendationDateCriterion', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationRecommendationDateCriterion"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var immunizationRecommendationDateCriterion = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(immunizationRecommendationDateCriterion.err_code == 0){
									  	//cek jumdata dulu
									  	if(immunizationRecommendationDateCriterion.data.length > 0){
									  		res.json({"err_code": 0, "data":immunizationRecommendationDateCriterion.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Immunization Recommendation Date Criterion is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": immunizationRecommendationDateCriterion.error, "application": "Api FHIR", "function": "getImmunizationRecommendationDateCriterion"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		immunizationRecommendationDateCriterionCode: function getImmunizationRecommendationDateCriterionCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('immunizationRecommendationDateCriterionCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationRecommendationDateCriterionCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var immunizationRecommendationDateCriterion = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(immunizationRecommendationDateCriterion.err_code == 0){
								  	//cek jumdata dulu
								  	if(immunizationRecommendationDateCriterion.data.length > 0){
								  		res.json({"err_code": 0, "data":immunizationRecommendationDateCriterion.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Immunization Recommendation Date Criterion Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": immunizationRecommendationDateCriterion.error, "application": "Api FHIR", "function": "getImmunizationRecommendationDateCriterionCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		medicationStatus: function getMedicationStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('medicationStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "medicationStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationStatus.error, "application": "Api FHIR", "function": "getMedicationStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('medicationStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var medicationStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(medicationStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(medicationStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":medicationStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Medication Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": medicationStatus.error, "application": "Api FHIR", "function": "getMedicationStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		medicationStatusCode: function getMedicationStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('medicationStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationStatus.error, "application": "Api FHIR", "function": "getMedicationStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		medicationFormCodes: function getMedicationFormCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('medicationFormCodes', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "medicationFormCodes"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationFormCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationFormCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationFormCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationFormCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Form Codes is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationFormCodes.error, "application": "Api FHIR", "function": "getMedicationFormCodes"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('medicationFormCodes', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationFormCodes"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var medicationFormCodes = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(medicationFormCodes.err_code == 0){
									  	//cek jumdata dulu
									  	if(medicationFormCodes.data.length > 0){
									  		res.json({"err_code": 0, "data":medicationFormCodes.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Medication Form is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": medicationFormCodes.error, "application": "Api FHIR", "function": "getMedicationFormCodes"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		medicationFormCodesCode: function getMedicationFormCodesCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('medicationFormCodesCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationFormCodesCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationFormCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationFormCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationFormCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationFormCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Form Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationFormCodes.error, "application": "Api FHIR", "function": "getMedicationFormCodesCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		medicationPackageForm: function getMedicationPackageForm(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('medicationPackageForm', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "medicationPackageForm"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationPackageForm = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationPackageForm.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationPackageForm.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationPackageForm.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Package Form is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationPackageForm.error, "application": "Api FHIR", "function": "getMedicationPackageForm"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('medicationPackageForm', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationPackageForm"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var medicationPackageForm = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(medicationPackageForm.err_code == 0){
									  	//cek jumdata dulu
									  	if(medicationPackageForm.data.length > 0){
									  		res.json({"err_code": 0, "data":medicationPackageForm.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Medication Package Form is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": medicationPackageForm.error, "application": "Api FHIR", "function": "getMedicationPackageForm"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		medicationPackageFormCode: function getMedicationPackageFormCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('medicationPackageFormCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationPackageFormCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationPackageForm = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationPackageForm.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationPackageForm.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationPackageForm.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Package Form Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationPackageForm.error, "application": "Api FHIR", "function": "getMedicationPackageFormCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		
		medicationAdminStatus: function getMedicationAdminStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('medicationAdminStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "medicationAdminStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationAdminStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationAdminStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationAdminStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationAdminStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Admin Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationAdminStatus.error, "application": "Api FHIR", "function": "getMedicationAdminStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('medicationAdminStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationAdminStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var medicationAdminStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(medicationAdminStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(medicationAdminStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":medicationAdminStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Medication Admin Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": medicationAdminStatus.error, "application": "Api FHIR", "function": "getMedicationAdminStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		medicationAdminStatusCode: function getMedicationAdminStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('medicationAdminStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationAdminStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationAdminStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationAdminStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationAdminStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationAdminStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Admin Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationAdminStatus.error, "application": "Api FHIR", "function": "getMedicationAdminStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		medicationAdminCategory: function getMedicationAdminCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('medicationAdminCategory', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "medicationAdminCategory"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationAdminCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationAdminCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationAdminCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationAdminCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Admin Category is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationAdminCategory.error, "application": "Api FHIR", "function": "getMedicationAdminCategory"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('medicationAdminCategory', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationAdminCategory"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var medicationAdminCategory = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(medicationAdminCategory.err_code == 0){
									  	//cek jumdata dulu
									  	if(medicationAdminCategory.data.length > 0){
									  		res.json({"err_code": 0, "data":medicationAdminCategory.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Medication Admin Category is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": medicationAdminCategory.error, "application": "Api FHIR", "function": "getMedicationAdminCategory"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		medicationAdminCategoryCode: function getMedicationAdminCategoryCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('medicationAdminCategoryCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationAdminCategoryCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationAdminCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationAdminCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationAdminCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationAdminCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Admin Category Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationAdminCategory.error, "application": "Api FHIR", "function": "getMedicationAdminCategoryCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		reasonMedicationNotGivenCodes: function getReasonMedicationNotGivenCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('reasonMedicationNotGivenCodes', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "reasonMedicationNotGivenCodes"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var reasonMedicationNotGivenCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(reasonMedicationNotGivenCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(reasonMedicationNotGivenCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":reasonMedicationNotGivenCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Reason Medication Not Given Codes is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": reasonMedicationNotGivenCodes.error, "application": "Api FHIR", "function": "getReasonMedicationNotGivenCodes"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('reasonMedicationNotGivenCodes', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getReasonMedicationNotGivenCodes"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var reasonMedicationNotGivenCodes = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(reasonMedicationNotGivenCodes.err_code == 0){
									  	//cek jumdata dulu
									  	if(reasonMedicationNotGivenCodes.data.length > 0){
									  		res.json({"err_code": 0, "data":reasonMedicationNotGivenCodes.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Reason Medication Not Given Codes is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": reasonMedicationNotGivenCodes.error, "application": "Api FHIR", "function": "getReasonMedicationNotGivenCodes"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		reasonMedicationNotGivenCodesCode: function getReasonMedicationNotGivenCodesCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('reasonMedicationNotGivenCodesCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getReasonMedicationNotGivenCodesCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var reasonMedicationNotGivenCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(reasonMedicationNotGivenCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(reasonMedicationNotGivenCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":reasonMedicationNotGivenCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Reason Medication Not Given Codes Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": reasonMedicationNotGivenCodes.error, "application": "Api FHIR", "function": "getReasonMedicationNotGivenCodesCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		reasonMedicationGivenCodes: function getReasonMedicationGivenCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('reasonMedicationGivenCodes', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "reasonMedicationGivenCodes"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var reasonMedicationGivenCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(reasonMedicationGivenCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(reasonMedicationGivenCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":reasonMedicationGivenCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Reason Medication  Given Codes is  found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": reasonMedicationGivenCodes.error, "application": "Api FHIR", "function": "getReasonMedicationGivenCodes"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('reasonMedicationGivenCodes', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getReasonMedicationGivenCodes"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var reasonMedicationGivenCodes = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(reasonMedicationGivenCodes.err_code == 0){
									  	//cek jumdata dulu
									  	if(reasonMedicationGivenCodes.data.length > 0){
									  		res.json({"err_code": 0, "data":reasonMedicationGivenCodes.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Reason Medication  Given Codes is  found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": reasonMedicationGivenCodes.error, "application": "Api FHIR", "function": "getReasonMedicationGivenCodes"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		reasonMedicationGivenCodesCode: function getReasonMedicationGivenCodesCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('reasonMedicationGivenCodesCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getReasonMedicationGivenCodesCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var reasonMedicationGivenCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(reasonMedicationGivenCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(reasonMedicationGivenCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":reasonMedicationGivenCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Reason Medication  Given Codes Code is  found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": reasonMedicationGivenCodes.error, "application": "Api FHIR", "function": "getReasonMedicationGivenCodesCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		administrationMethodCodes: function getAdministrationMethodCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('administrationMethodCodes', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "administrationMethodCodes"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var administrationMethodCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(administrationMethodCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(administrationMethodCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":administrationMethodCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Administration Method Codes is  found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": administrationMethodCodes.error, "application": "Api FHIR", "function": "getAdministrationMethodCodes"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('administrationMethodCodes', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdministrationMethodCodes"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var administrationMethodCodes = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(administrationMethodCodes.err_code == 0){
									  	//cek jumdata dulu
									  	if(administrationMethodCodes.data.length > 0){
									  		res.json({"err_code": 0, "data":administrationMethodCodes.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Administration Method Codes is  found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": administrationMethodCodes.error, "application": "Api FHIR", "function": "getAdministrationMethodCodes"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		administrationMethodCodesCode: function getAdministrationMethodCodesCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('administrationMethodCodesCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getAdministrationMethodCodesCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var administrationMethodCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(administrationMethodCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(administrationMethodCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":administrationMethodCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Administration Method Codes Code is  found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": administrationMethodCodes.error, "application": "Api FHIR", "function": "getAdministrationMethodCodesCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		approachSiteCodes: function getApproachSiteCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('approachSiteCodes', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "approachSiteCodes"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var approachSiteCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(approachSiteCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(approachSiteCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":approachSiteCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Approach Site Codes is  found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": approachSiteCodes.error, "application": "Api FHIR", "function": "getApproachSiteCodes"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('approachSiteCodes', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getApproachSiteCodes"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var approachSiteCodes = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(approachSiteCodes.err_code == 0){
									  	//cek jumdata dulu
									  	if(approachSiteCodes.data.length > 0){
									  		res.json({"err_code": 0, "data":approachSiteCodes.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Approach Site Codes is  found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": approachSiteCodes.error, "application": "Api FHIR", "function": "getApproachSiteCodes"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		approachSiteCodesCode: function getApproachSiteCodesCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('approachSiteCodesCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getApproachSiteCodesCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var approachSiteCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(approachSiteCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(approachSiteCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":approachSiteCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Approach Site Codes Code is  found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": approachSiteCodes.error, "application": "Api FHIR", "function": "getApproachSiteCodesCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		
		medicationDispenseStatus: function getMedicationDispenseStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('medicationDispenseStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "medicationDispenseStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationDispenseStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationDispenseStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationDispenseStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationDispenseStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Dispense Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationDispenseStatus.error, "application": "Api FHIR", "function": "getMedicationDispenseStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('medicationDispenseStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationDispenseStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var medicationDispenseStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(medicationDispenseStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(medicationDispenseStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":medicationDispenseStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Medication Dispense Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": medicationDispenseStatus.error, "application": "Api FHIR", "function": "getMedicationDispenseStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		medicationDispenseStatusCode: function getMedicationDispenseStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('medicationDispenseStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationDispenseStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationDispenseStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationDispenseStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationDispenseStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationDispenseStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Dispense Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationDispenseStatus.error, "application": "Api FHIR", "function": "getMedicationDispenseStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		medicationDispenseCategory: function getMedicationDispenseCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('medicationDispenseCategory', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "medicationDispenseCategory"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationDispenseCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationDispenseCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationDispenseCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationDispenseCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Dispense Category is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationDispenseCategory.error, "application": "Api FHIR", "function": "getMedicationDispenseCategory"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('medicationDispenseCategory', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationDispenseCategory"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var medicationDispenseCategory = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(medicationDispenseCategory.err_code == 0){
									  	//cek jumdata dulu
									  	if(medicationDispenseCategory.data.length > 0){
									  		res.json({"err_code": 0, "data":medicationDispenseCategory.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Medication Dispense Category is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": medicationDispenseCategory.error, "application": "Api FHIR", "function": "getMedicationDispenseCategory"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		medicationDispenseCategoryCode: function getMedicationDispenseCategoryCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('medicationDispenseCategoryCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationDispenseCategoryCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationDispenseCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationDispenseCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationDispenseCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationDispenseCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Dispense Category Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationDispenseCategory.error, "application": "Api FHIR", "function": "getMedicationDispenseCategoryCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		actPharmacySupplyType: function getActPharmacySupplyType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('actPharmacySupplyType', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "actPharmacySupplyType"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var actPharmacySupplyType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(actPharmacySupplyType.err_code == 0){
								  	//cek jumdata dulu
								  	if(actPharmacySupplyType.data.length > 0){
								  		res.json({"err_code": 0, "data":actPharmacySupplyType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Act Pharmacy Supply Type is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": actPharmacySupplyType.error, "application": "Api FHIR", "function": "getActPharmacySupplyType"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('actPharmacySupplyType', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getActPharmacySupplyType"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var actPharmacySupplyType = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(actPharmacySupplyType.err_code == 0){
									  	//cek jumdata dulu
									  	if(actPharmacySupplyType.data.length > 0){
									  		res.json({"err_code": 0, "data":actPharmacySupplyType.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Act Pharmacy Supply Type Code is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": actPharmacySupplyType.error, "application": "Api FHIR", "function": "getActPharmacySupplyType"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		actPharmacySupplyTypeCode: function getActPharmacySupplyTypeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toUpperCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('actPharmacySupplyTypeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getActPharmacySupplyTypeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var actPharmacySupplyType = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(actPharmacySupplyType.err_code == 0){
								  	//cek jumdata dulu
								  	if(actPharmacySupplyType.data.length > 0){
								  		res.json({"err_code": 0, "data":actPharmacySupplyType.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Act Pharmacy Supply Type Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": actPharmacySupplyType.error, "application": "Api FHIR", "function": "getActPharmacySupplyTypeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		actSubstanceAdminSubstitutionCode: function getActSubstanceAdminSubstitutionCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('actSubstanceAdminSubstitutionCode', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "actSubstanceAdminSubstitutionCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var actSubstanceAdminSubstitutionCode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(actSubstanceAdminSubstitutionCode.err_code == 0){
								  	//cek jumdata dulu
								  	if(actSubstanceAdminSubstitutionCode.data.length > 0){
								  		res.json({"err_code": 0, "data":actSubstanceAdminSubstitutionCode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Act Substance AdminSubstitution Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": actSubstanceAdminSubstitutionCode.error, "application": "Api FHIR", "function": "getActSubstanceAdminSubstitutionCode"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('actSubstanceAdminSubstitutionCode', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getActSubstanceAdminSubstitutionCode"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var actSubstanceAdminSubstitutionCode = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(actSubstanceAdminSubstitutionCode.err_code == 0){
									  	//cek jumdata dulu
									  	if(actSubstanceAdminSubstitutionCode.data.length > 0){
									  		res.json({"err_code": 0, "data":actSubstanceAdminSubstitutionCode.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Act Substance AdminSubstitution Code is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": actSubstanceAdminSubstitutionCode.error, "application": "Api FHIR", "function": "getActSubstanceAdminSubstitutionCode"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		actSubstanceAdminSubstitutionCodeCode: function getActSubstanceAdminSubstitutionCodeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toUpperCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('actSubstanceAdminSubstitutionCodeCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getActSubstanceAdminSubstitutionCodeCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var actSubstanceAdminSubstitutionCode = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(actSubstanceAdminSubstitutionCode.err_code == 0){
								  	//cek jumdata dulu
								  	if(actSubstanceAdminSubstitutionCode.data.length > 0){
								  		res.json({"err_code": 0, "data":actSubstanceAdminSubstitutionCode.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Act Substance AdminSubstitution Code Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": actSubstanceAdminSubstitutionCode.error, "application": "Api FHIR", "function": "getActSubstanceAdminSubstitutionCodeCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		actSubstanceAdminSubstitutionReason: function getActSubstanceAdminSubstitutionReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('actSubstanceAdminSubstitutionReason', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "actSubstanceAdminSubstitutionReason"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var actSubstanceAdminSubstitutionReason = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(actSubstanceAdminSubstitutionReason.err_code == 0){
								  	//cek jumdata dulu
								  	if(actSubstanceAdminSubstitutionReason.data.length > 0){
								  		res.json({"err_code": 0, "data":actSubstanceAdminSubstitutionReason.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Act Substance Admin Substitution Reason is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": actSubstanceAdminSubstitutionReason.error, "application": "Api FHIR", "function": "getActSubstanceAdminSubstitutionReason"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('actSubstanceAdminSubstitutionReason', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getActSubstanceAdminSubstitutionReason"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var actSubstanceAdminSubstitutionReason = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(actSubstanceAdminSubstitutionReason.err_code == 0){
									  	//cek jumdata dulu
									  	if(actSubstanceAdminSubstitutionReason.data.length > 0){
									  		res.json({"err_code": 0, "data":actSubstanceAdminSubstitutionReason.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Act Substance Admin Substitution Reason is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": actSubstanceAdminSubstitutionReason.error, "application": "Api FHIR", "function": "getActSubstanceAdminSubstitutionReason"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		actSubstanceAdminSubstitutionReasonCode: function getActSubstanceAdminSubstitutionReasonCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toUpperCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('actSubstanceAdminSubstitutionReasonCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getActSubstanceAdminSubstitutionReasonCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var actSubstanceAdminSubstitutionReason = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(actSubstanceAdminSubstitutionReason.err_code == 0){
								  	//cek jumdata dulu
								  	if(actSubstanceAdminSubstitutionReason.data.length > 0){
								  		res.json({"err_code": 0, "data":actSubstanceAdminSubstitutionReason.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Act Substance Admin Substitution Reason Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": actSubstanceAdminSubstitutionReason.error, "application": "Api FHIR", "function": "getActSubstanceAdminSubstitutionReasonCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		medicationRequestStatus: function getMedicationRequestStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('medicationRequestStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "medicationRequestStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationRequestStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationRequestStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationRequestStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationRequestStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Request Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationRequestStatus.error, "application": "Api FHIR", "function": "getMedicationRequestStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('medicationRequestStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationRequestStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var medicationRequestStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(medicationRequestStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(medicationRequestStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":medicationRequestStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Medication Request Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": medicationRequestStatus.error, "application": "Api FHIR", "function": "getMedicationRequestStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		medicationRequestStatusCode: function getMedicationRequestStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('medicationRequestStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationRequestStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationRequestStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationRequestStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationRequestStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationRequestStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Request Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationRequestStatus.error, "application": "Api FHIR", "function": "getMedicationRequestStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		medicationRequestIntent: function getMedicationRequestIntent(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('medicationRequestIntent', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "medicationRequestIntent"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationRequestIntent = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationRequestIntent.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationRequestIntent.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationRequestIntent.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Request Intent is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationRequestIntent.error, "application": "Api FHIR", "function": "getMedicationRequestIntent"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('medicationRequestIntent', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationRequestIntent"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var medicationRequestIntent = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(medicationRequestIntent.err_code == 0){
									  	//cek jumdata dulu
									  	if(medicationRequestIntent.data.length > 0){
									  		res.json({"err_code": 0, "data":medicationRequestIntent.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Medication Request Intent is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": medicationRequestIntent.error, "application": "Api FHIR", "function": "getMedicationRequestIntent"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		medicationRequestIntentCode: function getMedicationRequestIntentCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('medicationRequestIntentCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationRequestIntentCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationRequestIntent = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationRequestIntent.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationRequestIntent.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationRequestIntent.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Request Intent Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationRequestIntent.error, "application": "Api FHIR", "function": "getMedicationRequestIntentCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		medicationRequestCategory: function getMedicationRequestCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('medicationRequestCategory', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "medicationRequestCategory"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationRequestCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationRequestCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationRequestCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationRequestCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Request Category is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationRequestCategory.error, "application": "Api FHIR", "function": "getMedicationRequestCategory"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('medicationRequestCategory', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationRequestCategory"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var medicationRequestCategory = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(medicationRequestCategory.err_code == 0){
									  	//cek jumdata dulu
									  	if(medicationRequestCategory.data.length > 0){
									  		res.json({"err_code": 0, "data":medicationRequestCategory.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Medication Request Category is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": medicationRequestCategory.error, "application": "Api FHIR", "function": "getMedicationRequestCategory"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		medicationRequestCategoryCode: function getMedicationRequestCategoryCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('medicationRequestCategoryCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationRequestCategoryCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationRequestCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationRequestCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationRequestCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationRequestCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Request Category Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationRequestCategory.error, "application": "Api FHIR", "function": "getMedicationRequestCategoryCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		medicationRequestPriority: function getMedicationRequestPriority(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('medicationRequestPriority', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "medicationRequestPriority"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationRequestPriority = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationRequestPriority.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationRequestPriority.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationRequestPriority.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Request Priority is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationRequestPriority.error, "application": "Api FHIR", "function": "getMedicationRequestPriority"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('medicationRequestPriority', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationRequestPriority"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var medicationRequestPriority = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(medicationRequestPriority.err_code == 0){
									  	//cek jumdata dulu
									  	if(medicationRequestPriority.data.length > 0){
									  		res.json({"err_code": 0, "data":medicationRequestPriority.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Medication Request Priority is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": medicationRequestPriority.error, "application": "Api FHIR", "function": "getMedicationRequestPriority"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		medicationRequestPriorityCode: function getMedicationRequestPriorityCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('medicationRequestPriorityCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationRequestPriorityCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationRequestPriority = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationRequestPriority.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationRequestPriority.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationRequestPriority.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Request Priority Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationRequestPriority.error, "application": "Api FHIR", "function": "getMedicationRequestPriorityCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		medicationCodes: function getMedicationCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('medicationCodes', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "medicationCodes"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Codes is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationCodes.error, "application": "Api FHIR", "function": "getMedicationCodes"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('medicationCodes', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationCodes"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var medicationCodes = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(medicationCodes.err_code == 0){
									  	//cek jumdata dulu
									  	if(medicationCodes.data.length > 0){
									  		res.json({"err_code": 0, "data":medicationCodes.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Medication Codes is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": medicationCodes.error, "application": "Api FHIR", "function": "getMedicationCodes"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		medicationCodesCode: function getMedicationCodesCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('medicationCodesCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationCodesCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Codes Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationCodes.error, "application": "Api FHIR", "function": "getMedicationCodesCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		substanceAdminSubstitutionReason: function getSubstanceAdminSubstitutionReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('substanceAdminSubstitutionReason', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "substanceAdminSubstitutionReason"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var substanceAdminSubstitutionReason = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(substanceAdminSubstitutionReason.err_code == 0){
								  	//cek jumdata dulu
								  	if(substanceAdminSubstitutionReason.data.length > 0){
								  		res.json({"err_code": 0, "data":substanceAdminSubstitutionReason.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Substance Admin Substitution Reason is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": substanceAdminSubstitutionReason.error, "application": "Api FHIR", "function": "getSubstanceAdminSubstitutionReason"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('substanceAdminSubstitutionReason', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getSubstanceAdminSubstitutionReason"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var substanceAdminSubstitutionReason = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(substanceAdminSubstitutionReason.err_code == 0){
									  	//cek jumdata dulu
									  	if(substanceAdminSubstitutionReason.data.length > 0){
									  		res.json({"err_code": 0, "data":substanceAdminSubstitutionReason.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Substance Admin Substitution Reason is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": substanceAdminSubstitutionReason.error, "application": "Api FHIR", "function": "getSubstanceAdminSubstitutionReason"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		substanceAdminSubstitutionReasonCode: function getSubstanceAdminSubstitutionReasonCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toUpperCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('substanceAdminSubstitutionReasonCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getSubstanceAdminSubstitutionReasonCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var substanceAdminSubstitutionReason = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(substanceAdminSubstitutionReason.err_code == 0){
								  	//cek jumdata dulu
								  	if(substanceAdminSubstitutionReason.data.length > 0){
								  		res.json({"err_code": 0, "data":substanceAdminSubstitutionReason.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Substance Admin Substitution Reason Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": substanceAdminSubstitutionReason.error, "application": "Api FHIR", "function": "getSubstanceAdminSubstitutionReasonCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		
		medicationStatementStatus: function getMedicationStatementStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('medicationStatementStatus', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "medicationStatementStatus"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationStatementStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationStatementStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationStatementStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationStatementStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Statement Status is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationStatementStatus.error, "application": "Api FHIR", "function": "getMedicationStatementStatus"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('medicationStatementStatus', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationStatementStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var medicationStatementStatus = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(medicationStatementStatus.err_code == 0){
									  	//cek jumdata dulu
									  	if(medicationStatementStatus.data.length > 0){
									  		res.json({"err_code": 0, "data":medicationStatementStatus.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Medication Statement Status is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": medicationStatementStatus.error, "application": "Api FHIR", "function": "getMedicationStatementStatus"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		medicationStatementStatusCode: function getMedicationStatementStatusCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('medicationStatementStatusCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationStatementStatusCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationStatementStatus = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationStatementStatus.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationStatementStatus.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationStatementStatus.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Statement Status Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationStatementStatus.error, "application": "Api FHIR", "function": "getMedicationStatementStatusCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		medicationStatementCategory: function getMedicationStatementCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('medicationStatementCategory', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "medicationStatementCategory"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationStatementCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationStatementCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationStatementCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationStatementCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Statement Category is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationStatementCategory.error, "application": "Api FHIR", "function": "getMedicationStatementCategory"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('medicationStatementCategory', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationStatementCategory"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var medicationStatementCategory = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(medicationStatementCategory.err_code == 0){
									  	//cek jumdata dulu
									  	if(medicationStatementCategory.data.length > 0){
									  		res.json({"err_code": 0, "data":medicationStatementCategory.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Medication Statement Category is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": medicationStatementCategory.error, "application": "Api FHIR", "function": "getMedicationStatementCategory"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		medicationStatementCategoryCode: function getMedicationStatementCategoryCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('medicationStatementCategoryCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationStatementCategoryCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationStatementCategory = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationStatementCategory.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationStatementCategory.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationStatementCategory.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Statement Category Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationStatementCategory.error, "application": "Api FHIR", "function": "getMedicationStatementCategoryCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		medicationStatementTaken: function getMedicationStatementTaken(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('medicationStatementTaken', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "medicationStatementTaken"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationStatementTaken = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationStatementTaken.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationStatementTaken.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationStatementTaken.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Statement Taken is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationStatementTaken.error, "application": "Api FHIR", "function": "getMedicationStatementTaken"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('medicationStatementTaken', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationStatementTaken"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var medicationStatementTaken = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(medicationStatementTaken.err_code == 0){
									  	//cek jumdata dulu
									  	if(medicationStatementTaken.data.length > 0){
									  		res.json({"err_code": 0, "data":medicationStatementTaken.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Medication Statement Taken is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": medicationStatementTaken.error, "application": "Api FHIR", "function": "getMedicationStatementTaken"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		medicationStatementTakenCode: function getMedicationStatementTakenCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('medicationStatementTakenCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getMedicationStatementTakenCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var medicationStatementTaken = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(medicationStatementTaken.err_code == 0){
								  	//cek jumdata dulu
								  	if(medicationStatementTaken.data.length > 0){
								  		res.json({"err_code": 0, "data":medicationStatementTaken.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Medication Statement Taken Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": medicationStatementTaken.error, "application": "Api FHIR", "function": "getMedicationStatementTakenCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		},
		reasonMedicationNotTakenCodes: function getReasonMedicationNotTakenCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;
			checkApikey(apikey, ipAddres, function(result){
				if(result.err_code == 0){
					if(_id == "" || typeof _id == 'undefined'){
						//method, endpoint, params, options, callback
						ApiFHIR.get('reasonMedicationNotTakenCodes', {"apikey": apikey, "_id": 0}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "reasonMedicationNotTakenCodes"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var reasonMedicationNotTakenCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(reasonMedicationNotTakenCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(reasonMedicationNotTakenCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":reasonMedicationNotTakenCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Reason Medication Not Taken Codes is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": reasonMedicationNotTakenCodes.error, "application": "Api FHIR", "function": "getReasonMedicationNotTakenCodes"});
							  	}
							  }
						})	
					}else{
						if(validator.isInt(_id)){
							ApiFHIR.get('reasonMedicationNotTakenCodes', {"apikey": apikey, "_id": _id}, {}, function(error, response, body){
								if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getReasonMedicationNotTakenCodes"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var reasonMedicationNotTakenCodes = JSON.parse(body); 
								  	
								  	//cek apakah ada error atau tidak
								  	if(reasonMedicationNotTakenCodes.err_code == 0){
									  	//cek jumdata dulu
									  	if(reasonMedicationNotTakenCodes.data.length > 0){
									  		res.json({"err_code": 0, "data":reasonMedicationNotTakenCodes.data});
									  	}else{
								  			res.json({"err_code": 2, "err_msg": "Reason Medication Not Taken Codes is not found"});	
									  	}
								  	}else{
								  		res.json({"err_code": 3, "err_msg": reasonMedicationNotTakenCodes.error, "application": "Api FHIR", "function": "getReasonMedicationNotTakenCodes"});
								  	}
								  }
							})
						}else{
							res.json({"err_code": 4, "err_msg": "Id must be a number."});
						}
						
					}
				}else{
					result.err_code = 500;
					res.json(result);
				}	
			});
		},
		reasonMedicationNotTakenCodesCode: function getReasonMedicationNotTakenCodesCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var code = req.params.code.trim().toLowerCase();
			//var code = req.params.code.replace(/[^\w\s ,]/gi, '').trim();

			if(code == "" || typeof code == 'undefined'){
				res.json({"err_code": 4, "err_msg": "Code is required."});
			}else{
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){	
						ApiFHIR.get('reasonMedicationNotTakenCodesCode', {"apikey": apikey, "code": code}, {}, function(error, response, body){
							if(error){
							  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getReasonMedicationNotTakenCodesCode"});
							  }else{
							  	//cek apakah ada error atau tidak
							  	var reasonMedicationNotTakenCodes = JSON.parse(body); 
							  	
							  	//cek apakah ada error atau tidak
							  	if(reasonMedicationNotTakenCodes.err_code == 0){
								  	//cek jumdata dulu
								  	if(reasonMedicationNotTakenCodes.data.length > 0){
								  		res.json({"err_code": 0, "data":reasonMedicationNotTakenCodes.data});
								  	}else{
							  			res.json({"err_code": 2, "err_msg": "Reason Medication Not Taken Codes Code is not found"});	
								  	}
							  	}else{
							  		res.json({"err_code": 3, "err_msg": reasonMedicationNotTakenCodes.error, "application": "Api FHIR", "function": "getReasonMedicationNotTakenCodesCode"});
							  	}
							  }
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}				
		}

	},
	post: {
		identityAssuranceLevel: function addIdentityAssuranceLevel(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 3;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'IDENTITY_ASSURANCE_LEVEL', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataAssuranceLevel = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('identityAssuranceLevel', {
									"apikey": apikey
								}, {
									body: dataAssuranceLevel,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addIdentityAssuranceLevel"
										});
									} else {
										//cek apakah ada error atau tidak
										var assuranceLevel = body; //object
										//cek apakah ada error atau tidak
										if (assuranceLevel.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Identity assurance level has been add.",
												"data": assuranceLevel.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": assuranceLevel.error,
												"application": "Api FHIR",
												"function": "addIdentityAssuranceLevel"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		administrativeGender: function addAdministrativeGender(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 3;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ADMINISTRATIVE_GENDER', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataAdministrativeGender = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('administrativeGender', {
									"apikey": apikey
								}, {
									body: dataAdministrativeGender,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addAdministrativeGender"
										});
									} else {
										//cek apakah ada error atau tidak
										var administrativeGender = body; //object
										//cek apakah ada error atau tidak
										if (administrativeGender.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Administrative Gender has been add.",
												"data": administrativeGender.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": administrativeGender.error,
												"application": "Api FHIR",
												"function": "addAdministrativeGender"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		maritalStatus: function addMaritalStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');

			if (code == 'UNK') {
				var maritalSystem = 'null-flavor';
			} else {
				var maritalSystem = 'marital-status';
			}

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 3;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'MARITAL_STATUS', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataMaritalStatus = {
									"code": code,
									"display": display,
									"definition": definition,
									"system": maritalSystem
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('maritalStatus', {
									"apikey": apikey
								}, {
									body: dataMaritalStatus,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addMaritalStatus"
										});
									} else {
										//cek apakah ada error atau tidak
										var maritalStatus = body; //object
										//cek apakah ada error atau tidak
										if (maritalStatus.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Marital Status has been add.",
												"data": maritalStatus.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": maritalStatus.error,
												"application": "Api FHIR",
												"function": "addMaritalStatus"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		contactRole: function addContactRole(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toUpperCase();
			var description = req.body.description.replace(/[^\w\s ,]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(description)) {
				err_code = 3;
				err_msg = "Description is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'CONTACT_ROLE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataContactRole = {
									"code": code,
									"description": description
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('contactRole', {
									"apikey": apikey
								}, {
									body: dataContactRole,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addContactRole"
										});
									} else {
										//cek apakah ada error atau tidak
										var contactRole = body; //object
										//cek apakah ada error atau tidak
										if (contactRole.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Contact Role has been add.",
												"data": contactRole.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": contactRole.error,
												"application": "Api FHIR",
												"function": "addContactRole"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		animalSpecies: function addAnimalSpecies(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim();
			var display = req.body.display.replace(/[^\w\s ,]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 3;
				err_msg = "Display is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ANIMAL_SPECIES', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataAnimalSpecies = {
									"code": code,
									"display": display
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('animalSpecies', {
									"apikey": apikey
								}, {
									body: dataAnimalSpecies,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addAnimalSpecies"
										});
									} else {
										//cek apakah ada error atau tidak
										var animalSpecies = body; //object
										//cek apakah ada error atau tidak
										if (animalSpecies.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Animal Species has been add.",
												"data": animalSpecies.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": animalSpecies.error,
												"application": "Api FHIR",
												"function": "addAnimalSpecies"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		animalBreeds: function addAnimalBreeds(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim();
			var display = req.body.display.replace(/[^\w\s ,]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 3;
				err_msg = "Display is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ANIMAL_BREEDS', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataAnimalBreeds = {
									"code": code,
									"display": display
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('animalBreeds', {
									"apikey": apikey
								}, {
									body: dataAnimalBreeds,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addAnimalBreeds"
										});
									} else {
										//cek apakah ada error atau tidak
										var animalBreeds = body; //object
										//cek apakah ada error atau tidak
										if (animalBreeds.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Animal Breeds has been add.",
												"data": animalBreeds.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": animalBreeds.error,
												"application": "Api FHIR",
												"function": "addAnimalBreeds"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		animalGenderStatus: function addAnimalGenderStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 3;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ANIMAL_GENDER_STATUS', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataAnimalGenderStatus = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('animalGenderStatus', {
									"apikey": apikey
								}, {
									body: dataAnimalGenderStatus,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addAnimalGenderStatus"
										});
									} else {
										//cek apakah ada error atau tidak
										var animalGenderStatus = body; //object
										//cek apakah ada error atau tidak
										if (animalGenderStatus.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Animal Gender Status has been add.",
												"data": animalGenderStatus.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": animalGenderStatus.error,
												"application": "Api FHIR",
												"function": "addAnimalGenderStatus"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		languages: function addLanguages(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim();
			var display = req.body.display;

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'LANGUAGES', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataLanguages = {
									"code": code,
									"display": display
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('languages', {
									"apikey": apikey
								}, {
									body: dataLanguages,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addLanguages"
										});
									} else {
										//cek apakah ada error atau tidak
										var languages = body; //object
										//cek apakah ada error atau tidak
										if (languages.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Language has been add.",
												"data": languages.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": languages.error,
												"application": "Api FHIR",
												"function": "addLanguages"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		linkType: function addLinkType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition;

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'LINK_TYPE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataLinkType = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('linkType', {
									"apikey": apikey
								}, {
									body: dataLinkType,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addLinkType"
										});
									} else {
										//cek apakah ada error atau tidak
										var linkType = body; //object
										//cek apakah ada error atau tidak
										if (linkType.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Link Type has been add.",
												"data": linkType.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": linkType.error,
												"application": "Api FHIR",
												"function": "addLinkType"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		relatedPersonRelationshipType: function addRelatedPersonRelationshipType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display;
			var system = 'relatedperson-relationshiptype';
			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (typeof req.body.definition !== 'undefined') {
				definition = req.body.definition.replace(/[^\w\s , ( )]/gi, '');
			} else {
				definition = "";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'RELATEDPERSON_RELATIONSHIPTYPE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataRelatedPersonRelationshipType = {
									"code": code,
									"system": system,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('relatedPersonRelationshipType', {
									"apikey": apikey
								}, {
									body: dataRelatedPersonRelationshipType,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addRelatedPersonRelationshipType"
										});
									} else {
										//cek apakah ada error atau tidak
										var relatedPersonRelationshipType = body; //object
										//cek apakah ada error atau tidak
										if (relatedPersonRelationshipType.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Related Person Relationship Type has been add.",
												"data": relatedPersonRelationshipType.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": relatedPersonRelationshipType.error,
												"application": "Api FHIR",
												"function": "addRelatedPersonRelationshipType"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		groupType: function addGroupType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition;

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'GROUP_TYPE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataGroupType = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('groupType', {
									"apikey": apikey
								}, {
									body: dataGroupType,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addGroupType"
										});
									} else {
										//cek apakah ada error atau tidak
										var groupType = body; //object
										//cek apakah ada error atau tidak
										if (groupType.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Group Type has been add.",
												"data": groupType.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": groupType.error,
												"application": "Api FHIR",
												"function": "addGroupType"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		identifierUse: function addIdentifierUse(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display.replace(/[^\w\s , ( )]/gi, ''); ;
			var definition = req.body.definition.replace(/[^\w\s , ( )]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'IDENTIFIER_USE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataIdentifierUse = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('identifierUse', {
									"apikey": apikey
								}, {
									body: dataIdentifierUse,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addIdentifierUse"
										});
									} else {
										//cek apakah ada error atau tidak
										var identifierUse = body; //object
										//cek apakah ada error atau tidak
										if (identifierUse.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Identifier Use has been add.",
												"data": identifierUse.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": identifierUse.error,
												"application": "Api FHIR",
												"function": "addIdentifierUse"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		identifierType: function addIdentifierType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display.replace(/[^\w\s , ( )]/gi, ''); ;

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'IDENTIFIER_TYPE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataIdentifierType = {
									"code": code,
									"display": display
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('identifierType', {
									"apikey": apikey
								}, {
									body: dataIdentifierType,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addIdentifierType"
										});
									} else {
										//cek apakah ada error atau tidak
										var identifierType = body; //object
										//cek apakah ada error atau tidak
										if (identifierType.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Identifier Type has been add.",
												"data": identifierType.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": identifierType.error,
												"application": "Api FHIR",
												"function": "addIdentifierType"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		nameUse: function addNameUse(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) /]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'NAME_USE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataNameUse = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('nameUse', {
									"apikey": apikey
								}, {
									body: dataNameUse,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addNameUse"
										});
									} else {
										//cek apakah ada error atau tidak
										var nameUse = body; //object
										//cek apakah ada error atau tidak
										if (nameUse.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Name Use has been add.",
												"data": nameUse.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": nameUse.error,
												"application": "Api FHIR",
												"function": "addNameUse"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		contactPointSystem: function addContactPointSystem(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) /]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'CONTACT_POINT_SYSTEM', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataContactPointSystem = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('contactPointSystem', {
									"apikey": apikey
								}, {
									body: dataContactPointSystem,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addContactPointSystem"
										});
									} else {
										//cek apakah ada error atau tidak
										var contactPointSystem = body; //object
										//cek apakah ada error atau tidak
										if (contactPointSystem.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Contact Point System has been add.",
												"data": contactPointSystem.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": contactPointSystem.error,
												"application": "Api FHIR",
												"function": "addContactPointSystem"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		contactPointUse: function addContactPointUse(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) /]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'CONTACT_POINT_USE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataContactPointUse = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('contactPointUse', {
									"apikey": apikey
								}, {
									body: dataContactPointUse,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addContactPointUse"
										});
									} else {
										//cek apakah ada error atau tidak
										var contactPointUse = body; //object
										//cek apakah ada error atau tidak
										if (contactPointUse.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Contact Point Use has been add.",
												"data": contactPointUse.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": contactPointUse.error,
												"application": "Api FHIR",
												"function": "addContactPointUse"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		addressUse: function addAddressUse(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ADDRESS_USE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataAddressUse = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('addressUse', {
									"apikey": apikey
								}, {
									body: dataAddressUse,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addAddressUse"
										});
									} else {
										//cek apakah ada error atau tidak
										var addressUse = body; //object
										//cek apakah ada error atau tidak
										if (addressUse.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Address Use has been add.",
												"data": addressUse.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": addressUse.error,
												"application": "Api FHIR",
												"function": "addAddressUse"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		addressType: function addAddressType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ADDRESS_TYPE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataAddressType = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('addressType', {
									"apikey": apikey
								}, {
									body: dataAddressType,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addAddressType"
										});
									} else {
										//cek apakah ada error atau tidak
										var addressType = body; //object
										//cek apakah ada error atau tidak
										if (addressType.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Address Type has been add.",
												"data": addressType.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": addressType.error,
												"application": "Api FHIR",
												"function": "addAddressType"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		appointmentReasonCode: function addAppointmentReasonCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toUpperCase();
			var description = req.body.description.replace(/[^\w\s ,]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(description)) {
				err_code = 2;
				err_msg = "Description is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'APPOINTMENT_REASON_CODE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataAppointmentReasonCode = {
									"code": code,
									"description": description
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('appointmentReasonCode', {
									"apikey": apikey
								}, {
									body: dataAppointmentReasonCode,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addAppointmentReasonCode"
										});
									} else {
										//cek apakah ada error atau tidak
										var appointmentReasonCode = body; //object
										//cek apakah ada error atau tidak
										if (appointmentReasonCode.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Appointment Reason Code has been add.",
												"data": appointmentReasonCode.data
											});
										} else {
											res.json(appointmentReasonCode);
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		slotStatus: function addSlotStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display.replace(/[^\w\s ,]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'SLOT_STATUS', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataSlotStatus = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('slotStatus', {
									"apikey": apikey
								}, {
									body: dataSlotStatus,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addSlotStatus"
										});
									} else {
										//cek apakah ada error atau tidak
										var slotStatus = body; //object
										//cek apakah ada error atau tidak
										if (slotStatus.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Slot Status has been add.",
												"data": slotStatus.data
											});
										} else {
											res.json(slotStatus);
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		appointmentStatus: function addAppointmentStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display.replace(/[^\w\s ,]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'APPOINTMENT_STATUS', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataAppointmentStatus = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('appointmentStatus', {
									"apikey": apikey
								}, {
									body: dataAppointmentStatus,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addAppointmentStatus"
										});
									} else {
										//cek apakah ada error atau tidak
										var appointmentStatus = body; //object
										//cek apakah ada error atau tidak
										if (appointmentStatus.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Appointment Status has been add.",
												"data": appointmentStatus.data
											});
										} else {
											res.json(appointmentStatus);
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		participantRequired: function addParticipantRequired(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display.replace(/[^\w\s ,]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'PARTICIPANT_REQUIRED', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataParticipantRequired = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('participantRequired', {
									"apikey": apikey
								}, {
									body: dataParticipantRequired,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addParticipantRequired"
										});
									} else {
										//cek apakah ada error atau tidak
										var participantRequired = body; //object
										//cek apakah ada error atau tidak
										if (participantRequired.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Participant Required has been add.",
												"data": participantRequired.data
											});
										} else {
											res.json(participantRequired);
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		participationStatus: function addparticipationStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display.replace(/[^\w\s ,]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'PARTICIPATION_STATUS', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataparticipationStatus = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('participationStatus', {
									"apikey": apikey
								}, {
									body: dataparticipationStatus,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "addparticipationStatus"
										});
									} else {
										//cek apakah ada error atau tidak
										var participationStatus = body; //object
										//cek apakah ada error atau tidak
										if (participationStatus.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Participant Status has been add.",
												"data": participationStatus.data
											});
										} else {
											res.json(participationStatus);
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		actEncounterCode: function addActEncounterCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ACT_ENCOUNTER_CODE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataActEncounterCode = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('actEncounterCode', {
									"apikey": apikey
								}, {
									body: dataActEncounterCode,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "actEncounterCode"
										});
									} else {
										//cek apakah ada error atau tidak
										var actEncounterCode = body; //object
										//cek apakah ada error atau tidak
										if (actEncounterCode.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Act Encounter Code has been add.",
												"data": actEncounterCode.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": actEncounterCode.error,
												"application": "Api FHIR",
												"function": "actEncounterCode"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		actPriority: function addActPriority(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ACT_PRIORITY', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataActPriority = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('actPriority', {
									"apikey": apikey
								}, {
									body: dataActPriority,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "actPriority"
										});
									} else {
										//cek apakah ada error atau tidak
										var actPriority = body; //object
										//cek apakah ada error atau tidak
										if (actPriority.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Act Priority has been add.",
												"data": actPriority.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": actPriority.error,
												"application": "Api FHIR",
												"function": "actPriority"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		accountStatus: function addAccountStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ACCOUNT_STATUS', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataAccountStatus = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('accountStatus', {
									"apikey": apikey
								}, {
									body: dataAccountStatus,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "accountStatus"
										});
									} else {
										//cek apakah ada error atau tidak
										var accountStatus = body; //object
										//cek apakah ada error atau tidak
										if (accountStatus.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Account Status has been add.",
												"data": accountStatus.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": accountStatus.error,
												"application": "Api FHIR",
												"function": "accountStatus"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		accountType: function addAccountType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ACCOUNT_TYPE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataAccountType = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('accountType', {
									"apikey": apikey
								}, {
									body: dataAccountType,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "accountType"
										});
									} else {
										//cek apakah ada error atau tidak
										var accountType = body; //object
										//cek apakah ada error atau tidak
										if (accountType.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Account Type has been add.",
												"data": accountType.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": accountType.error,
												"application": "Api FHIR",
												"function": "accountType"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		diagnosisRole: function addDiagnosisRole(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'DIAGNOSIS_ROLE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataDiagnosisRole = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('diagnosisRole', {
									"apikey": apikey
								}, {
									body: dataDiagnosisRole,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "diagnosisRole"
										});
									} else {
										//cek apakah ada error atau tidak
										var diagnosisRole = body; //object
										//cek apakah ada error atau tidak
										if (diagnosisRole.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Diagnosis Role has been add.",
												"data": diagnosisRole.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": diagnosisRole.error,
												"application": "Api FHIR",
												"function": "diagnosisRole"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		encounterAdmitSource: function addEncounterAdmitSource(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ENCOUNTER_ADMIT_SOURCE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataEncounterAdmitSource = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('encounterAdmitSource', {
									"apikey": apikey
								}, {
									body: dataEncounterAdmitSource,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "encounterAdmitSource"
										});
									} else {
										//cek apakah ada error atau tidak
										var encounterAdmitSource = body; //object
										//cek apakah ada error atau tidak
										if (encounterAdmitSource.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Encounter Admit Source has been add.",
												"data": encounterAdmitSource.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": encounterAdmitSource.error,
												"application": "Api FHIR",
												"function": "encounterAdmitSource"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		encounterDiet: function addEncounterDiet(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ENCOUNTER_DIET', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataEncounterDiet = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('encounterDiet', {
									"apikey": apikey
								}, {
									body: dataEncounterDiet,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "encounterDiet"
										});
									} else {
										//cek apakah ada error atau tidak
										var encounterDiet = body; //object
										//cek apakah ada error atau tidak
										if (encounterDiet.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Encounter Diet has been add.",
												"data": encounterDiet.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": encounterDiet.error,
												"application": "Api FHIR",
												"function": "encounterDiet"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		encounterDischargeDisposition: function addEncounterDischargeDisposition(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ENCOUNTER_DISCHARGE_DISPOSITION', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataEncounterDischargeDisposition = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('encounterDischargeDisposition', {
									"apikey": apikey
								}, {
									body: dataEncounterDischargeDisposition,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "encounterDischargeDisposition"
										});
									} else {
										//cek apakah ada error atau tidak
										var encounterDischargeDisposition = body; //object
										//cek apakah ada error atau tidak
										if (encounterDischargeDisposition.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Encounter Discharge Disposition has been add.",
												"data": encounterDischargeDisposition.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": encounterDischargeDisposition.error,
												"application": "Api FHIR",
												"function": "encounterDischargeDisposition"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		encounterLocationStatus: function addEncounterLocationStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ENCOUNTER_LOCATION_STATUS', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataEncounterLocationStatus = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('encounterLocationStatus', {
									"apikey": apikey
								}, {
									body: dataEncounterLocationStatus,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "encounterLocationStatus"
										});
									} else {
										//cek apakah ada error atau tidak
										var encounterLocationStatus = body; //object
										//cek apakah ada error atau tidak
										if (encounterLocationStatus.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Encounter Location Status has been add.",
												"data": encounterLocationStatus.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": encounterLocationStatus.error,
												"application": "Api FHIR",
												"function": "encounterLocationStatus"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		encounterParticipantType: function addEncounterParticipantType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var system = req.body.system;

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ENCOUNTER_PARTICIPANT_TYPE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataEncounterParticipantType = {
									"code": code,
									"display": display,
									"definition": definition,
									"system": "encounter-participant-type"
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('encounterParticipantType', {
									"apikey": apikey
								}, {
									body: dataEncounterParticipantType,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "encounterParticipantType"
										});
									} else {
										//cek apakah ada error atau tidak
										var encounterParticipantType = body; //object
										//cek apakah ada error atau tidak
										if (encounterParticipantType.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Encounter Participant Type has been add.",
												"data": encounterParticipantType.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": encounterParticipantType.error,
												"application": "Api FHIR",
												"function": "encounterParticipantType"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		encounterReason: function addEncounterReason(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ENCOUNTER_REASON', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataEncounterReason = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('encounterReason', {
									"apikey": apikey
								}, {
									body: dataEncounterReason,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "encounterReason"
										});
									} else {
										//cek apakah ada error atau tidak
										var encounterReason = body; //object
										//cek apakah ada error atau tidak
										if (encounterReason.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Encounter Reason has been add.",
												"data": encounterReason.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": encounterReason.error,
												"application": "Api FHIR",
												"function": "encounterReason"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		encounterSpecialCourtesy: function addEncounterSpecialCourtesy(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ENCOUNTER_SPECIAL_COURTESY', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataEncounterSpecialCourtesy = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('encounterSpecialCourtesy', {
									"apikey": apikey
								}, {
									body: dataEncounterSpecialCourtesy,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "encounterSpecialCourtesy"
										});
									} else {
										//cek apakah ada error atau tidak
										var encounterSpecialCourtesy = body; //object
										//cek apakah ada error atau tidak
										if (encounterSpecialCourtesy.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Encounter Special Courtesy has been add.",
												"data": encounterSpecialCourtesy.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": encounterSpecialCourtesy.error,
												"application": "Api FHIR",
												"function": "encounterSpecialCourtesy"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		encounterSpecialArrangements: function addEncounterSpecialArrangements(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ENCOUNTER_SPECIAL_ARRANGEMENTS', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataEncounterSpecialArrangements = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('encounterSpecialArrangements', {
									"apikey": apikey
								}, {
									body: dataEncounterSpecialArrangements,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "encounterSpecialArrangements"
										});
									} else {
										//cek apakah ada error atau tidak
										var encounterSpecialArrangements = body; //object
										//cek apakah ada error atau tidak
										if (encounterSpecialArrangements.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Encounter Special Arrangements has been add.",
												"data": encounterSpecialArrangements.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": encounterSpecialArrangements.error,
												"application": "Api FHIR",
												"function": "encounterSpecialArrangements"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		encounterStatus: function addEncounterStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ENCOUNTER_STATUS', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataEncounterStatus = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('encounterStatus', {
									"apikey": apikey
								}, {
									body: dataEncounterStatus,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "encounterStatus"
										});
									} else {
										//cek apakah ada error atau tidak
										var encounterStatus = body; //object
										//cek apakah ada error atau tidak
										if (encounterStatus.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Encounter Status has been add.",
												"data": encounterStatus.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": encounterStatus.error,
												"application": "Api FHIR",
												"function": "encounterStatus"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		encounterType: function addEncounterType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase().replace("/", "<or>");
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'ENCOUNTER_TYPE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataEncounterType = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('encounterType', {
									"apikey": apikey
								}, {
									body: dataEncounterType,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "encounterType"
										});
									} else {
										//cek apakah ada error atau tidak
										var encounterType = body; //object
										//cek apakah ada error atau tidak
										if (encounterType.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Encounter Type has been add.",
												"data": encounterType.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": encounterType.error,
												"application": "Api FHIR",
												"function": "encounterType"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		episodeOfCareStatus: function addEpisodeOfCareStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'EPISODE_OF_CARE_STATUS', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataEpisodeOfCareStatus = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('episodeOfCareStatus', {
									"apikey": apikey
								}, {
									body: dataEpisodeOfCareStatus,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "episodeOfCareStatus"
										});
									} else {
										//cek apakah ada error atau tidak
										var episodeOfCareStatus = body; //object
										//cek apakah ada error atau tidak
										if (episodeOfCareStatus.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Episode Of Care Status has been add.",
												"data": episodeOfCareStatus.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": episodeOfCareStatus.error,
												"application": "Api FHIR",
												"function": "encounterType"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		episodeOfCareType: function addEpisodeOfCareType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'EPISODE_OF_CARE_TYPE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataEpisodeOfCareType = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('episodeOfCareType', {
									"apikey": apikey
								}, {
									body: dataEpisodeOfCareType,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "episodeOfCareType"
										});
									} else {
										//cek apakah ada error atau tidak
										var episodeOfCareType = body; //object
										//cek apakah ada error atau tidak
										if (episodeOfCareType.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Episode Of Care Type has been add.",
												"data": episodeOfCareType.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": episodeOfCareType.error,
												"application": "Api FHIR",
												"function": "episodeOfCareType"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		flagStatus: function addFlagStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'FLAG_STATUS', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataFlagStatus = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('flagStatus', {
									"apikey": apikey
								}, {
									body: dataFlagStatus,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "flagStatus"
										});
									} else {
										//cek apakah ada error atau tidak
										var flagStatus = body; //object
										//cek apakah ada error atau tidak
										if (flagStatus.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Flag Status has been add.",
												"data": flagStatus.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": flagStatus.error,
												"application": "Api FHIR",
												"function": "flagStatus"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		flagCategory: function addFlagCategory(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'FLAG_CATEGORY', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataFlagCategory = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('flagCategory', {
									"apikey": apikey
								}, {
									body: dataFlagCategory,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "flagCategory"
										});
									} else {
										//cek apakah ada error atau tidak
										var flagCategory = body; //object
										//cek apakah ada error atau tidak
										if (flagCategory.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Act Encounter Code has been add.",
												"data": flagCategory.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": flagCategory.error,
												"application": "Api FHIR",
												"function": "flagCategory"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		reAdmissionIndicator: function addReAdmissionIndicator(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var description = req.body.description.replace(/[^\w\s ,]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(description)) {
				err_code = 3;
				err_msg = "Description is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'RE_ADMISSION_INDICATOR', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataReAdmissionIndicator = {
									"code": code,
									"display": display,
									"description": description
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('reAdmissionIndicator', {
									"apikey": apikey
								}, {
									body: dataReAdmissionIndicator,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "reAdmissionIndicator"
										});
									} else {
										//cek apakah ada error atau tidak
										var reAdmissionIndicator = body; //object
										//cek apakah ada error atau tidak
										if (reAdmissionIndicator.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "re Admission Indicator has been add.",
												"data": reAdmissionIndicator.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": reAdmissionIndicator.error,
												"application": "Api FHIR",
												"function": "reAdmissionIndicator"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		flagCode: function addFlagCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;

			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');

			var err_code = 0;
			var err_msg = '';

			//input checking
			if (validator.isEmpty(code)) {
				err_code = 1;
				err_msg = "Code is required";
			}

			if (validator.isEmpty(display)) {
				err_code = 2;
				err_msg = "Display is required";
			}

			if (validator.isEmpty(definition)) {
				err_code = 2;
				err_msg = "Definition is required";
			}

			if (err_code == 0) {
				checkApikey(apikey, ipAddres, function (result) {
					if (result.err_code == 0) {
						checkCode(apikey, code, 'FLAG_CODE', function (resultCode) {
							if (resultCode.err_code == 0) {
								//susun body
								var dataFlagCode = {
									"code": code,
									"display": display,
									"definition": definition
								};

								//method, endpoint, params, options, callback
								ApiFHIR.post('flagCode', {
									"apikey": apikey
								}, {
									body: dataFlagCode,
									json: true
								}, function (error, response, body) {
									if (error) {
										res.json({
											"err_code": 1,
											"err_msg": error,
											"application": "Api FHIR",
											"function": "flagCode"
										});
									} else {
										//cek apakah ada error atau tidak
										var flagCode = body; //object
										//cek apakah ada error atau tidak
										if (flagCode.err_code == 0) {
											res.json({
												"err_code": 0,
												"err_msg": "Flag Code has been add.",
												"data": flagCode.data
											});
										} else {
											res.json({
												"err_code": 3,
												"err_msg": flagCode.error,
												"application": "Api FHIR",
												"function": "flagCode"
											});
										}
									}
								})
							} else {
								res.json(resultCode);
							}
						})
					} else {
						result.err_code = 500;
						res.json(result);
					}
				});
			} else {
				res.json({
					"err_code": err_code,
					"err_msg": err_msg
				});
			}
		},
		udiEntryType: function addUdiEntryType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 2;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'UDI_ENTRY_TYPE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataUdiEntryType = {
													"code": code,
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('udiEntryType', {"apikey": apikey}, {body: dataUdiEntryType, json:true}, function(error, response, body){
									if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addUdiEntryType"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var udiEntryType = body; //object
								  	//cek apakah ada error atau tidak
								  	if(udiEntryType.err_code == 0){
									  	res.json({"err_code": 0, "err_msg": "Udi Entry Type has been add.", "data":udiEntryType.data});
								  	}else{
								  		res.json(udiEntryType);
								  	}
								  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		deviceStatus: function addDeviceStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 2;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'DEVICE_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataDeviceStatus = {
													"code": code,
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('deviceStatus', {"apikey": apikey}, {body: dataDeviceStatus, json:true}, function(error, response, body){
									if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addDeviceStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var deviceStatus = body; //object
								  	//cek apakah ada error atau tidak
								  	if(deviceStatus.err_code == 0){
									  	res.json({"err_code": 0, "err_msg": "Device Status has been add.", "data":deviceStatus.data});
								  	}else{
								  		res.json(deviceStatus);
								  	}
								  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		deviceKind: function addDeviceKind(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim();
			var display = req.body.display.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(!validator.isInt(code)){
				err_code = 1;
				err_msg = "Code is number";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'DEVICE_KIND', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var datadeviceKind = {
													"code": code,
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('deviceKind', {"apikey": apikey}, {body: datadeviceKind, json:true}, function(error, response, body){
									if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addDeviceKind"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var deviceKind = body; //object
								  	//cek apakah ada error atau tidak
								  	if(deviceKind.err_code == 0){
									  	res.json({"err_code": 0, "err_msg": "Device Kind has been add.", "data":deviceKind.data});
								  	}else{
								  		res.json(deviceKind);
								  	}
								  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		deviceSafety: function addDeviceSafety(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'DEVICE_SAFETY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataDeviceSafety = {
													"code": code,
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('deviceSafety', {"apikey": apikey}, {body: dataDeviceSafety, json:true}, function(error, response, body){
									if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addDeviceSafety"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var deviceSafety = body; //object
								  	//cek apakah ada error atau tidak
								  	if(deviceSafety.err_code == 0){
									  	res.json({"err_code": 0, "err_msg": "Device Safety has been add.", "data":deviceSafety.data});
								  	}else{
								  		res.json(deviceSafety);
								  	}
								  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		operationalStatus: function addOperationalStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'OPERATIONAL_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataOperationalStatus = {
													"code": code,
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('operationalStatus', {"apikey": apikey}, {body: dataOperationalStatus, json:true}, function(error, response, body){
									if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addOperationalStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var operationalStatus = body; //object
								  	//cek apakah ada error atau tidak
								  	if(operationalStatus.err_code == 0){
									  	res.json({"err_code": 0, "err_msg": "Operational Status has been add.", "data":operationalStatus.data});
								  	}else{
								  		res.json(operationalStatus);
								  	}
								  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		parameterGroup: function addParameterGroup(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .-]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'PARAMETER_GROUP', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataParameterGroup = {
													"code": code,
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('parameterGroup', {"apikey": apikey}, {body: dataParameterGroup, json:true}, function(error, response, body){
									if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addParameterGroup"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var parameterGroup = body; //object
								  	//cek apakah ada error atau tidak
								  	if(parameterGroup.err_code == 0){
									  	res.json({"err_code": 0, "err_msg": "Parameter Group has been add.", "data":parameterGroup.data});
								  	}else{
								  		res.json(parameterGroup);
								  	}
								  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		measurementPrinciple: function addMeasurementPrinciple(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .-]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'MEASUREMENT_PRINCIPLE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataMeasurementPrinciple = {
													"code": code,
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('measurementPrinciple', {"apikey": apikey}, {body: dataMeasurementPrinciple, json:true}, function(error, response, body){
									if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMeasurementPrinciple"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var measurementPrinciple = body; //object
								  	//cek apakah ada error atau tidak
								  	if(measurementPrinciple.err_code == 0){
									  	res.json({"err_code": 0, "err_msg": "Measurement Principle has been add.", "data":measurementPrinciple.data});
								  	}else{
								  		res.json(measurementPrinciple);
								  	}
								  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		specificationType: function addSpecificationType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .-]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'SPECIFICATION_TYPE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataSpecificationType = {
													"code": code,
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('specificationType', {"apikey": apikey}, {body: dataSpecificationType, json:true}, function(error, response, body){
									if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addSpecificationType"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var specificationType = body; //object
								  	//cek apakah ada error atau tidak
								  	if(specificationType.err_code == 0){
									  	res.json({"err_code": 0, "err_msg": "Specification Type has been add.", "data":specificationType.data});
								  	}else{
								  		res.json(specificationType);
								  	}
								  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		metricOperationalStatus: function addMetricOperationalStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .-]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'METRIC_OPERATIONAL_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataMetricOperationalStatus = {
													"code": code,
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('metricOperationalStatus', {"apikey": apikey}, {body: dataMetricOperationalStatus, json:true}, function(error, response, body){
									if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMetricOperationalStatus"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var metricOperationalStatus = body; //object
								  	//cek apakah ada error atau tidak
								  	if(metricOperationalStatus.err_code == 0){
									  	res.json({"err_code": 0, "err_msg": "Metric Operational Status has been add.", "data":metricOperationalStatus.data});
								  	}else{
								  		res.json(metricOperationalStatus);
								  	}
								  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		deviceMetricType: function addDeviceMetricType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display.replace(/[^\w\s , ( ) / .:]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .-:]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'DEVICE_METRIC_TYPE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataDeviceMetricType = {
													"code": code,
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('deviceMetricType', {"apikey": apikey}, {body: dataDeviceMetricType, json:true}, function(error, response, body){
									if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addDeviceMetricType"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var deviceMetricType = body; //object
								  	//cek apakah ada error atau tidak
								  	if(deviceMetricType.err_code == 0){
									  	res.json({"err_code": 0, "err_msg": "Device Metric Type has been add.", "data":deviceMetricType.data});
								  	}else{
								  		res.json(deviceMetricType);
								  	}
								  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		metricColor: function addMetricColor(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'METRIC_COLOR', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataMetricColor = {
													"code": code,
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('metricColor', {"apikey": apikey}, {body: dataMetricColor, json:true}, function(error, response, body){
									if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMetricColor"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var metricColor = body; //object
								  	//cek apakah ada error atau tidak
								  	if(metricColor.err_code == 0){
									  	res.json({"err_code": 0, "err_msg": "Metric Color has been add.", "data":metricColor.data});
								  	}else{
								  		res.json(metricColor);
								  	}
								  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		metricCategory: function addMetricCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'METRIC_CATEGORY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataMetricCategory = {
													"code": code,
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('metricCategory', {"apikey": apikey}, {body: dataMetricCategory, json:true}, function(error, response, body){
									if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMetricCategory"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var metricCategory = body; //object
								  	//cek apakah ada error atau tidak
								  	if(metricCategory.err_code == 0){
									  	res.json({"err_code": 0, "err_msg": "Metric Category has been add.", "data":metricCategory.data});
								  	}else{
								  		res.json(metricCategory);
								  	}
								  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		metricCalibrationType: function addMetricCalibrationType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'METRIC_CALIBRATION_TYPE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataMetricCalibrationType = {
													"code": code,
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('metricCalibrationType', {"apikey": apikey}, {body: dataMetricCalibrationType, json:true}, function(error, response, body){
									if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMetricCalibrationType"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var metricCalibrationType = body; //object
								  	//cek apakah ada error atau tidak
								  	if(metricCalibrationType.err_code == 0){
									  	res.json({"err_code": 0, "err_msg": "Metric Calibration Type has been add.", "data":metricCalibrationType.data});
								  	}else{
								  		res.json(metricCalibrationType);
								  	}
								  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		metricCalibrationState: function addMetricCalibrationState(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'METRIC_CALIBRATION_STATE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataMetricCalibrationState = {
													"code": code,
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('metricCalibrationState', {"apikey": apikey}, {body: dataMetricCalibrationState, json:true}, function(error, response, body){
									if(error){
								  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMetricCalibrationState"});
								  }else{
								  	//cek apakah ada error atau tidak
								  	var metricCalibrationState = body; //object
								  	//cek apakah ada error atau tidak
								  	if(metricCalibrationState.err_code == 0){
									  	res.json({"err_code": 0, "err_msg": "Metric Calibration State has been add.", "data":metricCalibrationState.data});
								  	}else{
								  		res.json(metricCalibrationState);
								  	}
								  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
    substanceStatus: function addSubstanceStatus(req, res){
      var ipAddres = req.connection.remoteAddress;
      var apikey = req.params.apikey;
      
      var code = req.body.code.trim().toLowerCase();
      var display = req.body.display.replace(/[^\w\s , ( ) / .]/gi, '');
      var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
      
      var err_code = 0;
      var err_msg = '';
      
      //input checking
      if(validator.isEmpty(code)){
        err_code = 1;
        err_msg = "Code is required";
      }

      if(validator.isEmpty(display)){
        err_code = 2;
        err_msg = "Display is required";
      }

      if(validator.isEmpty(definition)){
        err_code = 3;
        err_msg = "Definition is required";
      }

      if(err_code == 0){
        checkApikey(apikey, ipAddres, function(result){
          if(result.err_code == 0){
            checkCode(apikey, code, 'SUBSTANCE_STATUS', function(resultCode){
              if(resultCode.err_code == 0){
                //susun body
                var dataSubstanceStatus = {
                          "code": code,
                          "display": display,
                          "definition": definition
                        };
              
                //method, endpoint, params, options, callback
                ApiFHIR.post('substanceStatus', {"apikey": apikey}, {body: dataSubstanceStatus, json:true}, function(error, response, body){
                  if(error){
                    res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addSubstanceStatus"});
                  }else{
                    //cek apakah ada error atau tidak
                    var substanceStatus = body; //object
                    //cek apakah ada error atau tidak
                    if(substanceStatus.err_code == 0){
                      res.json({"err_code": 0, "err_msg": "Substance Status has been add.", "data":substanceStatus.data});
                    }else{
                      res.json(substanceStatus);
                    }
                  }
                })
              }else{
                res.json(resultCode);
              }
            })
          }else{
            result.err_code = 500;
            res.json(result);
          } 
        });
      }else{
        res.json({"err_code": err_code, "err_msg": err_msg});
      }
    },
    substanceCategory: function addSubstanceCategory(req, res){
      var ipAddres = req.connection.remoteAddress;
      var apikey = req.params.apikey;
      
      var code = req.body.code.trim().toLowerCase();
      var display = req.body.display.replace(/[^\w\s , ( ) / .]/gi, '');
      var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
      
      var err_code = 0;
      var err_msg = '';
      
      //input checking
      if(validator.isEmpty(code)){
        err_code = 1;
        err_msg = "Code is required";
      }

      if(validator.isEmpty(display)){
        err_code = 2;
        err_msg = "Display is required";
      }

      if(validator.isEmpty(definition)){
        err_code = 3;
        err_msg = "Definition is required";
      }

      if(err_code == 0){
        checkApikey(apikey, ipAddres, function(result){
          if(result.err_code == 0){
            checkCode(apikey, code, 'SUBSTANCE_CATEGORY', function(resultCode){
              if(resultCode.err_code == 0){
                //susun body
                var dataSubstanceCategory = {
                          "code": code,
                          "display": display,
                          "definition": definition
                        };
              
                //method, endpoint, params, options, callback
                ApiFHIR.post('substanceCategory', {"apikey": apikey}, {body: dataSubstanceCategory, json:true}, function(error, response, body){
                  if(error){
                    res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addSubstanceCategory"});
                  }else{
                    //cek apakah ada error atau tidak
                    var substanceCategory = body; //object
                    //cek apakah ada error atau tidak
                    if(substanceCategory.err_code == 0){
                      res.json({"err_code": 0, "err_msg": "Substance Category has been add.", "data":substanceCategory.data});
                    }else{
                      res.json(substanceCategory);
                    }
                  }
                })
              }else{
                res.json(resultCode);
              }
            })
          }else{
            result.err_code = 500;
            res.json(result);
          } 
        });
      }else{
        res.json({"err_code": err_code, "err_msg": err_msg});
      }
    },
    substanceCode: function addSubstanceCode(req, res){
      var ipAddres = req.connection.remoteAddress;
      var apikey = req.params.apikey;
      
      var code = req.body.code.trim().toLowerCase();
      var display = req.body.display.replace(/[^\w\s , ( ) / .]/gi, '');
      var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
      
      var err_code = 0;
      var err_msg = '';
      
      //input checking
      if(!validator.isInt(code)){
        err_code = 1;
        err_msg = "Code is number";
      }

      if(validator.isEmpty(display)){
        err_code = 2;
        err_msg = "Display is required";
      }

      if(validator.isEmpty(definition)){
        definition = ""
      }

      if(err_code == 0){
        checkApikey(apikey, ipAddres, function(result){
          if(result.err_code == 0){
            checkCode(apikey, code, 'SUBSTANCE_CODE', function(resultCode){
              if(resultCode.err_code == 0){
                //susun body
                var dataSubstanceCode = {
                          "code": code,
                          "display": display,
                          "definition": definition
                        };
              
                //method, endpoint, params, options, callback
                ApiFHIR.post('substanceCode', {"apikey": apikey}, {body: dataSubstanceCode, json:true}, function(error, response, body){
                  if(error){
                    res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addSubstanceCode"});
                  }else{
                    //cek apakah ada error atau tidak
                    var substanceCode = body; //object
                    //cek apakah ada error atau tidak
                    if(substanceCode.err_code == 0){
                      res.json({"err_code": 0, "err_msg": "Substance Code has been add.", "data":substanceCode.data});
                    }else{
                      res.json(substanceCode);
                    }
                  }
                })
              }else{
                res.json(resultCode);
              }
            })
          }else{
            result.err_code = 500;
            res.json(result);
          } 
        });
      }else{
        res.json({"err_code": err_code, "err_msg": err_msg});
      }
    },
		organizationType: function addOrganizationType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 2;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ORGANIZATION_TYPE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataOrganizationType = {
													"code": code,	
													"display": display,
													"definition": definition
												};
								console.log(dataOrganizationType);
								//method, endpoint, params, options, callback
								ApiFHIR.post('organizationType', {"apikey": apikey}, {body: dataOrganizationType, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addOrganizationType"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var organizationType = body; //object
									  	//cek apakah ada error atau tidak
									  	if(organizationType.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Organization Type has been add.", "data":organizationType.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": organizationType.error, "application": "Api FHIR", "function": "addOrganizationType"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		contactentityType: function addContactentityType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 2;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CONTACT_ENTITY_TYPE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataContactentityType = {
													"code": code,	
													"display": display,
													"definition": definition
												};
								console.log(dataContactentityType);
								//method, endpoint, params, options, callback
								ApiFHIR.post('contactentityType', {"apikey": apikey}, {body: dataContactentityType, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addContactentityType"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var contactentityType = body; //object
									  	//cek apakah ada error atau tidak
											console.log(contactentityType);
									  	if(contactentityType.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Contactentity Type has been add.", "data":contactentityType.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": contactentityType.error, "application": "Api FHIR", "function": "addContactentityType"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		locationStatus: function addLocationStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 2;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'LOCATION_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataLocationStatus = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('locationStatus', {"apikey": apikey}, {body: dataLocationStatus, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addLocationStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var locationStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(locationStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Location Status has been add.", "data":locationStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": locationStatus.error, "application": "Api FHIR", "function": "addLocationStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		bedStatus: function addBedStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toUpperCase();
			var description = req.body.description;
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(description)){
				err_code = 2;
				err_msg = "Description is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'BED_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataBedStatus = {
													"code": code,	
													"description": description
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('bedStatus', {"apikey": apikey}, {body: dataBedStatus, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addBedStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var bedStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(bedStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Bed Status has been add.", "data":bedStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": bedStatus.error, "application": "Api FHIR", "function": "addBedStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		locationMode: function addLocationMode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'LOCATION_MODE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataLocationMode = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('locationMode', {"apikey": apikey}, {body: dataLocationMode, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addLocationMode"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var locationMode = body; //object
									  	//cek apakah ada error atau tidak
									  	if(locationMode.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Location Mode has been add.", "data":locationMode.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": locationMode.error, "application": "Api FHIR", "function": "addLocationMode"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		serviceDeliveryLocationRoleType: function addServiceDeliveryLocationRoleType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'SERVICE_DELIVERY_LOCATION_ROLE_TYPE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataServiceDeliveryLocationRoleTypeCode = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('serviceDeliveryLocationRoleType', {"apikey": apikey}, {body: dataServiceDeliveryLocationRoleTypeCode, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addServiceDeliveryLocationRoleType"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var serviceDeliveryLocationRoleType = body; //object
									  	//cek apakah ada error atau tidak
									  	if(serviceDeliveryLocationRoleType.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Service Delivery Location Role Type has been add.", "data":serviceDeliveryLocationRoleType.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": serviceDeliveryLocationRoleType.error, "application": "Api FHIR", "function": "addServiceDeliveryLocationRoleType"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		locationPhysicalType: function addLocationPhysicalType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'LOCATION_PHYSICAL_TYPE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataLocationPhysicalType = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('locationPhysicalType', {"apikey": apikey}, {body: dataLocationPhysicalType, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addLocationPhysicalType"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var locationPhysicalType = body; //object
									  	//cek apakah ada error atau tidak
									  	if(locationPhysicalType.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Location Physical Type has been add.", "data":locationPhysicalType.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": locationPhysicalType.error, "application": "Api FHIR", "function": "addLocationPhysicalType"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		qualificationCode: function addQualificationCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toUpperCase();
			var description = req.body.description;
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(description)){
				err_code = 2;
				err_msg = "Description is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'QUALIFICATION_CODE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataQualificationCode = {
													"code": code,	
													"description": description
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('qualificationCode', {"apikey": apikey}, {body: dataQualificationCode, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addQualificationCode"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var qualificationCode = body; //object
									  	//cek apakah ada error atau tidak
									  	if(qualificationCode.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Qualification Code has been add.", "data":qualificationCode.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": qualificationCode.error, "application": "Api FHIR", "function": "addQualificationCode"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		practitionerRoleCode: function addPractitionerRoleCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}
			
			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'PRACTITIONER_ROLE_CODE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataPractitionerRoleCode = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('practitionerRoleCode', {"apikey": apikey}, {body: dataPractitionerRoleCode, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addPractitionerRoleCode"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var practitionerRoleCode = body; //object
									  	//cek apakah ada error atau tidak
									  	if(practitionerRoleCode.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Practitioner Role Code has been add.", "data":practitionerRoleCode.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": practitionerRoleCode.error, "application": "Api FHIR", "function": "addPractitionerRoleCode"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		practiceCode: function addPracticeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim();
			var display = req.body.display;
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 3;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'PRACTICE_CODE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataPracticeCode = {
													"code": code,	
													"display": display
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('practiceCode', {"apikey": apikey}, {body: dataPracticeCode, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addPracticeCode"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var practiceCode = body; //object
									  	//cek apakah ada error atau tidak
									  	if(practiceCode.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Practice code has been add.", "data":practiceCode.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": practiceCode.error, "application": "Api FHIR", "function": "addPracticeCode"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		daysOfWeek: function addDaysOfWeek(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'DAYS_OF_WEEK', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataDaysOfWeek = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('daysOfWeek', {"apikey": apikey}, {body: dataDaysOfWeek, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addDaysOfWeek"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var daysOfWeek = body; //object
									  	//cek apakah ada error atau tidak
									  	if(daysOfWeek.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Days Of Week has been add.", "data":daysOfWeek.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": daysOfWeek.error, "application": "Api FHIR", "function": "addDaysOfWeek"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		serviceCategory: function addServiceCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			//var code = req.body.code.trim().toLowerCase();
			var code = req.body.code;
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'SERVICE_CATEGORY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataServiceCategory = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('serviceCategory', {"apikey": apikey}, {body: dataServiceCategory, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addServiceCategory"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var serviceCategory = body; //object
									  	//cek apakah ada error atau tidak
									  	if(serviceCategory.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Service Category has been add.", "data":serviceCategory.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": serviceCategory.error, "application": "Api FHIR", "function": "addServiceCategory"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		serviceType: function addServiceType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'SERVICE_TYPE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataServiceType = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('serviceType', {"apikey": apikey}, {body: dataServiceType, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addServiceType"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var serviceType = body; //object
									  	//cek apakah ada error atau tidak
									  	if(serviceType.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Service Type has been add.", "data":serviceType.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": serviceType.error, "application": "Api FHIR", "function": "addServiceType"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		serviceProvisionConditions: function addServiceProvisionConditions(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'SERVICE_PROVISION_CONDITIONS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataServiceProvisionConditions = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('serviceProvisionConditions', {"apikey": apikey}, {body: dataServiceProvisionConditions, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addServiceProvisionConditions"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var serviceProvisionConditions = body; //object
									  	//cek apakah ada error atau tidak
									  	if(serviceProvisionConditions.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Service Provision Conditions has been add.", "data":serviceProvisionConditions.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": serviceProvisionConditions.error, "application": "Api FHIR", "function": "addServiceProvisionConditions"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		serviceReferralMethod: function addServiceReferralMethod(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'SERVICE_REFERRAL_METHOD', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataServiceReferralMethod = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('serviceReferralMethod', {"apikey": apikey}, {body: dataServiceReferralMethod, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addServiceReferralMethod"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var serviceReferralMethod = body; //object
									  	//cek apakah ada error atau tidak
									  	if(serviceReferralMethod.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Service Referral Method has been add.", "data":serviceReferralMethod.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": serviceReferralMethod.error, "application": "Api FHIR", "function": "addServiceReferralMethod"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		endpointStatus: function addEndpointStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ENDPOINT_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataEndpointStatus = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('endpointStatus', {"apikey": apikey}, {body: dataEndpointStatus, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addEndpointStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var endpointStatus = body; //object
											//cek apakah ada error atau tidak
									  	if(endpointStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Endpoint Status has been add.", "data":endpointStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": endpointStatus.error, "application": "Api FHIR", "function": "addEndpointStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		endpointConnectionType: function addEndpointConnectionType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ENDPOINT_CONNECTION_TYPE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataEndpointConnectionType = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('endpointConnectionType', {"apikey": apikey}, {body: dataEndpointConnectionType, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addEndpointConnectionType"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var endpointConnectionType = body; //object
									  	//cek apakah ada error atau tidak
									  	if(endpointConnectionType.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Endpoint Status has been add.", "data":endpointConnectionType.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": endpointConnectionType.error, "application": "Api FHIR", "function": "addEndpointConnectionType"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		endpointPayloadType: function addEndpointPayloadType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ENDPOINT_PAYLOAD_TYPE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataEndpointPayloadType = {
													"code": code,	
													"display": display
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('endpointPayloadType', {"apikey": apikey}, {body: dataEndpointPayloadType, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addEndpointPayloadType"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var endpointPayloadType = body; //object
									  	//cek apakah ada error atau tidak
									  	if(endpointPayloadType.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Endpoint Payload Type has been add.", "data":endpointPayloadType.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": endpointPayloadType.error, "application": "Api FHIR", "function": "addEndpointPayloadType"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		adverseEventCategory: function addAdverseEventCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ADVERSE_EVENT_CATEGORY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataAdverseEventCategory = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('adverseEventCategory', {"apikey": apikey}, {body: dataAdverseEventCategory, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addAdverseEventCategory"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var adverseEventCategory = body; //object
									  	//cek apakah ada error atau tidak
									  	if(adverseEventCategory.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Adverse Event Category has been add.", "data":adverseEventCategory.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": adverseEventCategory.error, "application": "Api FHIR", "function": "addAdverseEventCategory"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		adverseEventType: function addAdverseEventType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			//var code = req.body.code.trim().toLowerCase();
			var code = req.body.code;
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ADVERSE_EVENT_TYPE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataAdverseEventType = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('adverseEventType', {"apikey": apikey}, {body: dataAdverseEventType, json:true}, function(error, response, body){
									if(error){
										console.log("error");
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addAdverseEventType"});
									  }else{
											console.log("ok");
									  	//cek apakah ada error atau tidak
									  	var adverseEventType = body; //object
											
									  	//cek apakah ada error atau tidak
									  	if(adverseEventType.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Adverse Event Type has been add.", "data":adverseEventType.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": adverseEventType.error, "application": "Api FHIR", "function": "addAdverseEventType"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		adverseEventSeriousness: function addAdverseEventSeriousness(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ADVERSE_EVENT_Seriousness', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataAdverseEventSeriousness = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('adverseEventSeriousness', {"apikey": apikey}, {body: dataAdverseEventSeriousness, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addAdverseEventSeriousness"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var adverseEventSeriousness = body; //object
									  	//cek apakah ada error atau tidak
									  	if(adverseEventSeriousness.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Adverse Event Seriousness has been add.", "data":adverseEventSeriousness.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": adverseEventSeriousness.error, "application": "Api FHIR", "function": "addAdverseEventSeriousness"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		adverseEventOutcome: function addAdverseEventOutcome(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ADVERSE_EVENT_OUTCOME', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataAdverseEventOutcome = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('adverseEventOutcome', {"apikey": apikey}, {body: dataAdverseEventOutcome, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addAdverseEventOutcome"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var adverseEventOutcome = body; //object
									  	//cek apakah ada error atau tidak
									  	if(adverseEventOutcome.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Adverse Event Outcome has been add.", "data":adverseEventOutcome.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": adverseEventOutcome.error, "application": "Api FHIR", "function": "addAdverseEventOutcome"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		adverseEventCausality: function addAdverseEventCausality(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ADVERSE_EVENT_Causality', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataAdverseEventCausality = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('adverseEventCausality', {"apikey": apikey}, {body: dataAdverseEventCausality, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addAdverseEventCausality"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var adverseEventCausality = body; //object
									  	//cek apakah ada error atau tidak
									  	if(adverseEventCausality.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Adverse Event Causality has been add.", "data":adverseEventCausality.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": adverseEventCausality.error, "application": "Api FHIR", "function": "addAdverseEventCausality"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		adverseEventCausalityAssess: function addAdverseEventCausalityAssess(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ADVERSE_EVENT_Causality_Assess', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataAdverseEventCausalityAssess = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('adverseEventCausalityAssess', {"apikey": apikey}, {body: dataAdverseEventCausalityAssess, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addAdverseEventCausalityAssess"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var adverseEventCausalityAssess = body; //object
									  	//cek apakah ada error atau tidak
									  	if(adverseEventCausalityAssess.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Adverse Event Causality Assess has been add.", "data":adverseEventCausalityAssess.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": adverseEventCausalityAssess.error, "application": "Api FHIR", "function": "addAdverseEventCausalityAssess"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		adverseEventCausalityMethod: function addAdverseEventCausalityMethod(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ADVERSE_EVENT_Causality_Method', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataAdverseEventCausalityMethod = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('adverseEventCausalityMethod', {"apikey": apikey}, {body: dataAdverseEventCausalityMethod, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addAdverseEventCausalityMethod"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var adverseEventCausalityMethod = body; //object
									  	//cek apakah ada error atau tidak
									  	if(adverseEventCausalityMethod.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Adverse Event Causality Method has been add.", "data":adverseEventCausalityMethod.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": adverseEventCausalityMethod.error, "application": "Api FHIR", "function": "addAdverseEventCausalityMethod"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		adverseEventCausalityResult: function addAdverseEventCausalityResult(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ADVERSE_EVENT_Causality_Result', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataAdverseEventCausalityResult = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('adverseEventCausalityResult', {"apikey": apikey}, {body: dataAdverseEventCausalityResult, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addAdverseEventCausalityResult"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var adverseEventCausalityResult = body; //object
									  	//cek apakah ada error atau tidak
									  	if(adverseEventCausalityResult.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Adverse Event Causality Result has been add.", "data":adverseEventCausalityResult.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": adverseEventCausalityResult.error, "application": "Api FHIR", "function": "addAdverseEventCausalityResult"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		allergyClinicalStatus: function addAllergyClinicalStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ALLERGY_CLINICAL_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataAllergyClinicalStatus = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('allergyClinicalStatus', {"apikey": apikey}, {body: dataAllergyClinicalStatus, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addAllergyClinicalStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var allergyClinicalStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(allergyClinicalStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Allergy Clinical Status has been add.", "data":allergyClinicalStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": allergyClinicalStatus.error, "application": "Api FHIR", "function": "addAllergyClinicalStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		allergyVerificationStatus: function addAllergyVerificationStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ALLERGY_VERIFICATION_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataAllergyVerificationStatus = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('allergyVerificationStatus', {"apikey": apikey}, {body: dataAllergyVerificationStatus, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addAllergyVerificationStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var allergyVerificationStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(allergyVerificationStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Allergy Verification Status has been add.", "data":allergyVerificationStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": allergyVerificationStatus.error, "application": "Api FHIR", "function": "addAllergyVerificationStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		allergyIntoleranceType: function addAllergyIntoleranceType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ALLERGY_INTOLERANCE_TYPE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataAllergyIntoleranceType = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('allergyIntoleranceType', {"apikey": apikey}, {body: dataAllergyIntoleranceType, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addAllergyIntoleranceType"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var allergyIntoleranceType = body; //object
									  	//cek apakah ada error atau tidak
									  	if(allergyIntoleranceType.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Allergy Intolerance Type has been add.", "data":allergyIntoleranceType.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": allergyIntoleranceType.error, "application": "Api FHIR", "function": "addAllergyIntoleranceType"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		allergyIntoleranceCategory: function addAllergyIntoleranceCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ALLERGY_INTOLERANCE_CATEGORY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataAllergyIntoleranceCategory = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('allergyIntoleranceCategory', {"apikey": apikey}, {body: dataAllergyIntoleranceCategory, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addAllergyIntoleranceCategory"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var allergyIntoleranceCategory = body; //object
									  	//cek apakah ada error atau tidak
									  	if(allergyIntoleranceCategory.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Allergy Intolerance Category has been add.", "data":allergyIntoleranceCategory.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": allergyIntoleranceCategory.error, "application": "Api FHIR", "function": "addAllergyIntoleranceCategory"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		allergyIntoleranceCriticality: function addAllergyIntoleranceCriticality(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ALLERGY_INTOLERANCE_Criticality', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataallergyIntoleranceCriticality = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('allergyIntoleranceCriticality', {"apikey": apikey}, {body: dataallergyIntoleranceCriticality, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addAllergyIntoleranceCriticality"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var allergyIntoleranceCriticality = body; //object
									  	//cek apakah ada error atau tidak
									  	if(allergyIntoleranceCriticality.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Allergy Intolerance Criticality has been add.", "data":allergyIntoleranceCriticality.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": allergyIntoleranceCriticality.error, "application": "Api FHIR", "function": "addAllergyIntoleranceCriticality"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		allergyIntoleranceCode: function addAllergyIntoleranceCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ALLERGY_INTOLERANCE_Criticality', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var dataAllergyIntoleranceCode = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('allergyIntoleranceCode', {"apikey": apikey}, {body: dataAllergyIntoleranceCode, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addAllergyIntoleranceCode"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var allergyIntoleranceCode = body; //object
									  	//cek apakah ada error atau tidak
									  	if(allergyIntoleranceCode.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Allergy Intolerance Code has been add.", "data":allergyIntoleranceCode.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": allergyIntoleranceCode.error, "application": "Api FHIR", "function": "addAllergyIntoleranceCode"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		substanceCode: function addSubstanceCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'SUBSTANCE_CODE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('substanceCode', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addSubstanceCode"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var substanceCode = body; //object
									  	//cek apakah ada error atau tidak
									  	if(substanceCode.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Substance Code has been add.", "data":substanceCode.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": substanceCode.error, "application": "Api FHIR", "function": "addSubstanceCode"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		clinicalFindings: function addClinicalFindings(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CLINICAL_FINDINGS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('clinicalFindings', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addClinicalFindings"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var clinicalFindings = body; //object
									  	//cek apakah ada error atau tidak
									  	if(clinicalFindings.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Clinical Findings has been add.", "data":clinicalFindings.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": clinicalFindings.error, "application": "Api FHIR", "function": "addClinicalFindings"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		reactionEventSeverity: function addReactionEventSeverity(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'REACTION_EVENT_SEVERITY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('reactionEventSeverity', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addReactionEventSeverity"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var reactionEventSeverity = body; //object
									  	//cek apakah ada error atau tidak
									  	if(reactionEventSeverity.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Reaction Event Severity has been add.", "data":reactionEventSeverity.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": reactionEventSeverity.error, "application": "Api FHIR", "function": "addReactionEventSeverity"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		routeCodes: function addRouteCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ROUTE_CODES', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('routeCodes', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addRouteCodes"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var routeCodes = body; //object
									  	//cek apakah ada error atau tidak
									  	if(routeCodes.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Route Codes has been add.", "data":routeCodes.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": routeCodes.error, "application": "Api FHIR", "function": "addRouteCodes"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		carePlanStatus: function addCarePlanStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CARE_PLAN_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('carePlanStatus', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addCarePlanStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var carePlanStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(carePlanStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Care Plan Status has been add.", "data":carePlanStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": carePlanStatus.error, "application": "Api FHIR", "function": "addCarePlanStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		carePlanIntent: function addCarePlanIntent(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CARE_PLAN_INTENT', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('carePlanIntent', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addCarePlanIntent"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var carePlanIntent = body; //object
									  	//cek apakah ada error atau tidak
									  	if(carePlanIntent.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Care Plan Intent has been add.", "data":carePlanIntent.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": carePlanIntent.error, "application": "Api FHIR", "function": "addCarePlanIntent"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		carePlanCategory: function addCarePlanCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CARE_PLAN_CATEGORY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('carePlanCategory', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addCarePlanCategory"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var carePlanCategory = body; //object
									  	//cek apakah ada error atau tidak
									  	if(carePlanCategory.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Care Plan Category has been add.", "data":carePlanCategory.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": carePlanCategory.error, "application": "Api FHIR", "function": "addCarePlanCategory"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		carePlanActivityOutcome: function addCarePlanActivityOutcome(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CARE_PLAN_ACTIVITY_OUTCOME', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('carePlanActivityOutcome', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addCarePlanActivityOutcome"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var carePlanActivityOutcome = body; //object
									  	//cek apakah ada error atau tidak
									  	if(carePlanActivityOutcome.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Care Plan Activity Outcome has been add.", "data":carePlanActivityOutcome.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": carePlanActivityOutcome.error, "application": "Api FHIR", "function": "addCarePlanActivityOutcome"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		carePlanActivityCategory: function addCarePlanActivityCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CARE_PLAN_ACTIVITY_CATEGORY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('carePlanActivityCategory', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addCarePlanActivityCategory"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var carePlanActivityCategory = body; //object
									  	//cek apakah ada error atau tidak
									  	if(carePlanActivityCategory.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Care Plan Activity Category has been add.", "data":carePlanActivityCategory.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": carePlanActivityCategory.error, "application": "Api FHIR", "function": "addCarePlanActivityCategory"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		carePlanActivity: function addCarePlanActivity(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CARE_PLAN_ACTIVITY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('carePlanActivity', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addCarePlanActivity"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var carePlanActivity = body; //object
									  	//cek apakah ada error atau tidak
									  	if(carePlanActivity.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Care Plan Activity has been add.", "data":carePlanActivity.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": carePlanActivity.error, "application": "Api FHIR", "function": "addCarePlanActivity"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		activityReason: function addActivityReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ACTIVITY_REASON', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('activityReason', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addActivityReason"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var activityReason = body; //object
											//cek apakah ada error atau tidak
									  	if(activityReason.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Activity Reason  has been add.", "data":activityReason.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": activityReason.error, "application": "Api FHIR", "function": "addActivityReason"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		carePlanActivityStatus: function addCarePlanActivityStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CARE_PLAN_ACTIVITY_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('carePlanActivityStatus', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addCarePlanActivityStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var carePlanActivityStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(carePlanActivityStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Care Plan Activity Status has been add.", "data":carePlanActivityStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": carePlanActivityStatus.error, "application": "Api FHIR", "function": "addCarePlanActivityStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		medicationCodes: function addmedicationCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'MEDICATION_CODES', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('medicationCodes', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addmedicationCodes"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var medicationCodes = body; //object
									  	//cek apakah ada error atau tidak
									  	if(medicationCodes.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Medication Codes has been add.", "data":medicationCodes.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": medicationCodes.error, "application": "Api FHIR", "function": "addmedicationCodes"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		careTeamStatus: function addCareTeamStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CARE_TEAM_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('careTeamStatus', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addCareTeamStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var careTeamStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(careTeamStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Care Team Status has been add.", "data":careTeamStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": careTeamStatus.error, "application": "Api FHIR", "function": "addCareTeamStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		careTeamCategory: function addCareTeamCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CARE_TEAM_CATEGORY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('careTeamCategory', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addCareTeamCategory"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var careTeamCategory = body; //object
									  	//cek apakah ada error atau tidak
									  	if(careTeamCategory.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Care Team Category has been add.", "data":careTeamCategory.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": careTeamCategory.error, "application": "Api FHIR", "function": "addCareTeamCategory"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		participantRole: function addParticipantRole(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'PARTICIPANT_ROLE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('participantRole', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addParticipantRole"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var participantRole = body; //object
									  	//cek apakah ada error atau tidak
									  	if(participantRole.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Participant Role has been add.", "data":participantRole.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": participantRole.error, "application": "Api FHIR", "function": "addParticipantRole"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		clinicalImpressionStatus: function addClinicalImpressionStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CLINICAL_IMPRESSION_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('clinicalImpressionStatus', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addClinicalImpressionStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var clinicalImpressionStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(clinicalImpressionStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Clinical Impression Status has been add.", "data":clinicalImpressionStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": clinicalImpressionStatus.error, "application": "Api FHIR", "function": "addClinicalImpressionStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		investigationSets: function addInvestigationSets(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 3;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'INVESTIGATION_SETS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('investigationSets', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addInvestigationSets"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var investigationSets = body; //object
											
									  	//cek apakah ada error atau tidak
									  	if(investigationSets.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Investigation Sets has been add.", "data":investigationSets.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": investigationSets.error, "application": "Api FHIR", "function": "addInvestigationSets"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		clinicalimpressionPrognosis: function addClinicalimpressionPrognosis(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CLINICALIMPRESSION_PROGNOSIS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('clinicalimpressionPrognosis', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addClinicalimpressionPrognosis"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var clinicalimpressionPrognosis = body; //object
									  	//cek apakah ada error atau tidak
									  	if(clinicalimpressionPrognosis.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Clinicalimpression Prognosis has been add.", "data":clinicalimpressionPrognosis.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": clinicalimpressionPrognosis.error, "application": "Api FHIR", "function": "addClinicalimpressionPrognosis"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		conditionClinical: function addConditionClinical(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CONDITION_CLINICAL', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('conditionClinical', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addConditionClinical"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var conditionClinical = body; //object
									  	//cek apakah ada error atau tidak
									  	if(conditionClinical.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Condition Clinical has been add.", "data":conditionClinical.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": conditionClinical.error, "application": "Api FHIR", "function": "addConditionClinical"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		conditionVerStatus: function addConditionVerStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CONDITION_VER_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('conditionVerStatus', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addConditionVerStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var conditionVerStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(conditionVerStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Condition Ver Status has been add.", "data":conditionVerStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": conditionVerStatus.error, "application": "Api FHIR", "function": "addConditionVerStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		conditionCategory: function addConditionCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CONDITION_CATEGORY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('conditionCategory', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addConditionCategory"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var conditionCategory = body; //object
									  	//cek apakah ada error atau tidak
									  	if(conditionCategory.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Condition Category has been add.", "data":conditionCategory.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": conditionCategory.error, "application": "Api FHIR", "function": "addConditionCategory"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		conditionSeverity: function addConditionSeverity(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 3;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CONDITION_SEVERITY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('conditionSeverity', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addConditionSeverity"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var conditionSeverity = body; //object
											
									  	//cek apakah ada error atau tidak
									  	if(conditionSeverity.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Condition Severity has been add.", "data":conditionSeverity.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": conditionSeverity.error, "application": "Api FHIR", "function": "addConditionSeverity"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		conditionCode: function addConditionCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CONDITION_CODE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('conditionCode', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addConditionCode"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var conditionCode = body; //object
									  	//cek apakah ada error atau tidak
									  	if(conditionCode.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Condition Code has been add.", "data":conditionCode.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": conditionCode.error, "application": "Api FHIR", "function": "addConditionCode"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		bodySite: function addBodySite(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'BODY_SITE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('bodySite', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addBodySite"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var bodySite = body; //object
									  	//cek apakah ada error atau tidak
									  	if(bodySite.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Body Site has been add.", "data":bodySite.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": bodySite.error, "application": "Api FHIR", "function": "addBodySite"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		conditionStage: function addConditionStage(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CONDITION_STAGE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('conditionStage', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addConditionStage"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var conditionStage = body; //object
									  	//cek apakah ada error atau tidak
									  	if(conditionStage.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Condition Stage has been add.", "data":conditionStage.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": conditionStage.error, "application": "Api FHIR", "function": "addConditionStage"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		manifestationOrSymptom: function addManifestationOrSymptom(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'MANIFESTATION_OR_SYMPTOM', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('manifestationOrSymptom', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addManifestationOrSymptom"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var manifestationOrSymptom = body; //object
									  	//cek apakah ada error atau tidak
									  	if(manifestationOrSymptom.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Manifestation Or Symptom has been add.", "data":manifestationOrSymptom.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": manifestationOrSymptom.error, "application": "Api FHIR", "function": "addManifestationOrSymptom"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		observationStatus: function addObservationStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'OBSERVATION_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('observationStatus', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addObservationStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var observationStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(observationStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Observation Status has been add.", "data":observationStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": observationStatus.error, "application": "Api FHIR", "function": "addObservationStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		detectedissueCategory: function addDetectedissueCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'DETECTEDISSUE_CATEGORY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('detectedissueCategory', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addDetectedissueCategory"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var detectedissueCategory = body; //object
									  	//cek apakah ada error atau tidak
									  	if(detectedissueCategory.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Detectedissue Category has been add.", "data":detectedissueCategory.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": detectedissueCategory.error, "application": "Api FHIR", "function": "addDetectedissueCategory"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		detectedissueSeverity: function addDetectedissueSeverity(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'DETECTEDISSUE_SEVERITY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('detectedissueSeverity', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addDetectedissueSeverity"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var detectedissueSeverity = body; //object
									  	//cek apakah ada error atau tidak
									  	if(detectedissueSeverity.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Detectedissue Severity has been add.", "data":detectedissueSeverity.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": detectedissueSeverity.error, "application": "Api FHIR", "function": "addDetectedissueSeverity"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		detectedissueMitigationAction: function addDetectedissueMitigationAction(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'DETECTEDISSUE_MITIGATION_ACTION', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('detectedissueMitigationAction', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addDetectedissueMitigationAction"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var detectedissueMitigationAction = body; //object
									  	//cek apakah ada error atau tidak
									  	if(detectedissueMitigationAction.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Detectedissue Mitigation Action has been add.", "data":detectedissueMitigationAction.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": detectedissueMitigationAction.error, "application": "Api FHIR", "function": "addDetectedissueMitigationAction"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		historyStatus: function addHistoryStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'HISTORY_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('historyStatus', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addHistoryStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var historyStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(historyStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "History Status has been add.", "data":historyStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": historyStatus.error, "application": "Api FHIR", "function": "addHistoryStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		historyNotDoneReason: function addHistoryNotDoneReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'HISTORY_NOT_DONE_REASON', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('historyNotDoneReason', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addHistoryNotDoneReason"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var historyNotDoneReason = body; //object
									  	//cek apakah ada error atau tidak
									  	if(historyNotDoneReason.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "History Not Done Reason has been add.", "data":historyNotDoneReason.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": historyNotDoneReason.error, "application": "Api FHIR", "function": "addHistoryNotDoneReason"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		familyMember: function addFamilyMember(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'FAMILY_MEMBER', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('familyMember', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addFamilyMember"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var familyMember = body; //object
									  	//cek apakah ada error atau tidak
									  	if(familyMember.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Family Member has been add.", "data":familyMember.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": familyMember.error, "application": "Api FHIR", "function": "addFamilyMember"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		conditionOutcome: function addConditionOutcome(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'CONDITION_OUTCOME', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('conditionOutcome', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addConditionOutcome"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var conditionOutcome = body; //object
									  	//cek apakah ada error atau tidak
									  	if(conditionOutcome.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Condition Outcome has been add.", "data":conditionOutcome.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": conditionOutcome.error, "application": "Api FHIR", "function": "addConditionOutcome"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		riskProbability: function addRiskProbability(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'RISK_PROBABILITY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('riskProbability', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addRiskProbability"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var riskProbability = body; //object
									  	//cek apakah ada error atau tidak
									  	if(riskProbability.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Risk Probability has been add.", "data":riskProbability.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": riskProbability.error, "application": "Api FHIR", "function": "addRiskProbability"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		goalStatus: function addGoalStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'GOAL_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('goalStatus', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addGoalStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var goalStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(goalStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Goal Status has been add.", "data":goalStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": goalStatus.error, "application": "Api FHIR", "function": "addGoalStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		goalCategory: function addGoalCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'GOAL_CATEGORY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('goalCategory', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addGoalCategory"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var goalCategory = body; //object
									  	//cek apakah ada error atau tidak
									  	if(goalCategory.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Goal Category has been add.", "data":goalCategory.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": goalCategory.error, "application": "Api FHIR", "function": "addGoalCategory"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		goalPriority: function addGoalPriority(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'GOAL_PRIORITY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('goalPriority', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addGoalPriority"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var goalPriority = body; //object
									  	//cek apakah ada error atau tidak
									  	if(goalPriority.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Goal Priority has been add.", "data":goalPriority.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": goalPriority.error, "application": "Api FHIR", "function": "addGoalPriority"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		goalStartEvent: function addGoalStartEvent(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 3;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'GOAL_START_EVENT', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('goalStartEvent', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addGoalStartEvent"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var goalStartEvent = body; //object
											
									  	//cek apakah ada error atau tidak
									  	if(goalStartEvent.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Goal Start Event has been add.", "data":goalStartEvent.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": goalStartEvent.error, "application": "Api FHIR", "function": "addGoalStartEvent"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		observationCodes: function addObservationCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'OBSERVATION_CODES', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('observationCodes', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addObservationCodes"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var observationCodes = body; //object
											
									  	//cek apakah ada error atau tidak
									  	if(observationCodes.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Observation Codes has been add.", "data":observationCodes.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": observationCodes.error, "application": "Api FHIR", "function": "addObservationCodes"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		eventStatus: function addEventStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'EVENT_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('eventStatus', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addEventStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var eventStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(eventStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Event Status has been add.", "data":eventStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": eventStatus.error, "application": "Api FHIR", "function": "addEventStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		procedureNotPerformedReason: function addProcedureNotPerformedReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'PROCEDURE_NOT_PERFORMED_REASON', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('procedureNotPerformedReason', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addProcedureNotPerformedReason"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var procedureNotPerformedReason = body; //object
									  	//cek apakah ada error atau tidak
									  	if(procedureNotPerformedReason.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Procedure Not Performed Reason has been add.", "data":procedureNotPerformedReason.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": procedureNotPerformedReason.error, "application": "Api FHIR", "function": "addProcedureNotPerformedReason"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		procedureCategory: function addProcedureCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 3;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'PROCEDURE_CATEGORY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('procedureCategory', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addProcedureCategory"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var procedureCategory = body; //object
											
									  	//cek apakah ada error atau tidak
									  	if(procedureCategory.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Procedure Category has been add.", "data":procedureCategory.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": procedureCategory.error, "application": "Api FHIR", "function": "addProcedureCategory"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		procedureCode: function addProcedureCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'PROCEDURE_CODE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('procedureCode', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addProcedureCode"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var procedureCode = body; //object
									  	//cek apakah ada error atau tidak
									  	if(procedureCode.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Procedure Code has been add.", "data":procedureCode.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": procedureCode.error, "application": "Api FHIR", "function": "addProcedureCode"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		performerRole: function addPerformerRole(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'PERFORMER_ROLE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('performerRole', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addPerformerRole"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var performerRole = body; //object
									  	//cek apakah ada error atau tidak
									  	if(performerRole.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Performer Role has been add.", "data":performerRole.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": performerRole.error, "application": "Api FHIR", "function": "addPerformerRole"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		procedureReason: function addProcedureReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'PROCEDURE_REASON', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('procedureReason', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addProcedureReason"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var procedureReason = body; //object
									  	//cek apakah ada error atau tidak
									  	if(procedureReason.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Procedure Reason has been add.", "data":procedureReason.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": procedureReason.error, "application": "Api FHIR", "function": "addProcedureReason"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		procedureOutcome: function addProcedureOutcome(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 3;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'PROCEDURE_OUTCOME', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('procedureOutcome', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addProcedureOutcome"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var procedureOutcome = body; //object
											
									  	//cek apakah ada error atau tidak
									  	if(procedureOutcome.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Procedure Outcome has been add.", "data":procedureOutcome.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": procedureOutcome.error, "application": "Api FHIR", "function": "addProcedureOutcome"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		procedureFollowup: function addProcedureFollowup(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 3;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'PROCEDURE_FOLLOWUP', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('procedureFollowup', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addProcedureFollowup"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var procedureFollowup = body; //object
											
									  	//cek apakah ada error atau tidak
									  	if(procedureFollowup.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Procedure Followup has been add.", "data":procedureFollowup.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": procedureFollowup.error, "application": "Api FHIR", "function": "addProcedureFollowup"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		deviceAction: function addDeviceAction(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'DEVICE_ACTION', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('deviceAction', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addDeviceAction"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var deviceAction = body; //object
									  	//cek apakah ada error atau tidak
									  	if(deviceAction.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Device Action has been add.", "data":deviceAction.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": deviceAction.error, "application": "Api FHIR", "function": "addDeviceAction"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		deviceKind: function addDeviceKind(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'DEVICE_KIND', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('deviceKind', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addDeviceKind"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var deviceKind = body; //object
									  	//cek apakah ada error atau tidak
									  	if(deviceKind.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Device Kind has been add.", "data":deviceKind.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": deviceKind.error, "application": "Api FHIR", "function": "addDeviceKind"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		immunizationStatus: function addImmunizationStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'IMMUNIZATION_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('immunizationStatus', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addImmunizationStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var immunizationStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(immunizationStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Immunization Status has been add.", "data":immunizationStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": immunizationStatus.error, "application": "Api FHIR", "function": "addImmunizationStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		vaccineCode: function addVaccineCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			var system = req.body.system;
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(system)){
				err_code = 3;
				err_msg = "System is required";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'VACCINE_CODE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"system": system
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('vaccineCode', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addVaccineCode"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var vaccineCode = body; //object
									  	//cek apakah ada error atau tidak
									  	if(vaccineCode.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Vaccine Code has been add.", "data":vaccineCode.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": vaccineCode.error, "application": "Api FHIR", "function": "addVaccineCode"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		immunizationOrigin: function addImmunizationOrigin(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'IMMUNIZATION_ORIGIN', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('immunizationOrigin', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addImmunizationOrigin"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var immunizationOrigin = body; //object
									  	//cek apakah ada error atau tidak
									  	if(immunizationOrigin.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Immunization Origin has been add.", "data":immunizationOrigin.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": immunizationOrigin.error, "application": "Api FHIR", "function": "addImmunizationOrigin"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		immunizationSite: function addImmunizationSite(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'IMMUNIZATION_SITE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('immunizationSite', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addImmunizationSite"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var immunizationSite = body; //object
									  	//cek apakah ada error atau tidak
									  	if(immunizationSite.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Immunization Site has been add.", "data":immunizationSite.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": immunizationSite.error, "application": "Api FHIR", "function": "addImmunizationSite"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		immunizationRoute: function addImmunizationRoutes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'IMMUNIZATION_ROUTE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('immunizationRoute', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addImmunizationRoutes"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var immunizationRoute = body; //object
									  	//cek apakah ada error atau tidak
									  	if(immunizationRoute.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Immunization Routes has been add.", "data":immunizationRoute.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": immunizationRoute.error, "application": "Api FHIR", "function": "addImmunizationRoutes"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		immunizationRole: function addImmunizationRole(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display;
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'IMMUNIZATION_ROLE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('immunizationRole', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addImmunizationRole"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var immunizationRole = body; //object
									  	//cek apakah ada error atau tidak
									  	if(immunizationRole.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Immunization Role has been add.", "data":immunizationRole.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": immunizationRole.error, "application": "Api FHIR", "function": "addImmunizationRole"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		immunizationReason: function addImmunizationReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'IMMUNIZATION_REASON', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('immunizationReason', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addImmunizationReason"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var immunizationReason = body; //object
									  	//cek apakah ada error atau tidak
									  	if(immunizationReason.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Immunization Reason has been add.", "data":immunizationReason.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": immunizationReason.error, "application": "Api FHIR", "function": "addImmunizationReason"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		noImmunizationReason: function addNoImmunizationReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toUpperCase();
			var system = req.body.system;
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}
			
			if(validator.isEmpty(system)){
				err_code = 2;
				err_msg = "System is required";
			}

			if(validator.isEmpty(display)){
				err_code = 3;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 4;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'NO_IMMUNIZATION_REASON', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,
													"system": system,
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('noImmunizationReason', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addNoImmunizationReason"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var noImmunizationReason = body; //object
									  	//cek apakah ada error atau tidak
									  	if(noImmunizationReason.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "No Immunization Reason has been add.", "data":noImmunizationReason.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": noImmunizationReason.error, "application": "Api FHIR", "function": "addNoImmunizationReason"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		vaccinationProtocolDoseTarget: function addVaccinationProtocolDoseTarget(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim();
			var display = req.body.display;
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'VACCINATION_PROTOCOL_DOSE_TARGET', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('vaccinationProtocolDoseTarget', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addVaccinationProtocolDoseTarget"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var vaccinationProtocolDoseTarget = body; //object
									  	//cek apakah ada error atau tidak
									  	if(vaccinationProtocolDoseTarget.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Vaccination Protocol Dose Target has been add.", "data":vaccinationProtocolDoseTarget.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": vaccinationProtocolDoseTarget.error, "application": "Api FHIR", "function": "addVaccinationProtocolDoseTarget"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		vaccinationProtocolDoseStatus: function addVaccinationProtocolDoseStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'VACCINATION_PROTOCOL_DOSE_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('vaccinationProtocolDoseStatus', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addVaccinationProtocolDoseStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var vaccinationProtocolDoseStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(vaccinationProtocolDoseStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Vaccination Protocol Dose Status has been add.", "data":vaccinationProtocolDoseStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": vaccinationProtocolDoseStatus.error, "application": "Api FHIR", "function": "addVaccinationProtocolDoseStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		vaccinationProtocolDoseStatusReason: function addVaccinationProtocolDoseStatusReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'VACCINATION_PROTOCOL_DOSE_STATUS_REASON', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('vaccinationProtocolDoseStatusReason', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addVaccinationProtocolDoseStatusReason"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var vaccinationProtocolDoseStatusReason = body; //object
									  	//cek apakah ada error atau tidak
									  	if(vaccinationProtocolDoseStatusReason.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Vaccination Protocol Dose Status Reason has been add.", "data":vaccinationProtocolDoseStatusReason.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": vaccinationProtocolDoseStatusReason.error, "application": "Api FHIR", "function": "addVaccinationProtocolDoseStatusReason"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		immunizationRecommendationTargetDisease: function addImmunizationRecommendationTargetDisease(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim();
			var display = req.body.display;
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'IMMUNIZATION_RECOMMENDATION_TARGET_DISEASE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('immunizationRecommendationTargetDisease', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addImmunizationRecommendationTargetDisease"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var immunizationRecommendationTargetDisease = body; //object
									  	//cek apakah ada error atau tidak
									  	if(immunizationRecommendationTargetDisease.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Immunization Recommendation Target Disease has been add.", "data":immunizationRecommendationTargetDisease.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": immunizationRecommendationTargetDisease.error, "application": "Api FHIR", "function": "addImmunizationRecommendationTargetDisease"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		immunizationRecommendationStatus: function addImmunizationRecommendationStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'IMMUNIZATION_RECOMMENDATION_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('immunizationRecommendationStatus', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addImmunizationRecommendationStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var immunizationRecommendationStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(immunizationRecommendationStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Immunization Recommendation Status has been add.", "data":immunizationRecommendationStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": immunizationRecommendationStatus.error, "application": "Api FHIR", "function": "addImmunizationRecommendationStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		immunizationRecommendationDateCriterion: function addImmunizationRecommendationDateCriterion(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'IMMUNIZATION_RECOMMENDATION_DATE_CRITERION', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('immunizationRecommendationDateCriterion', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addImmunizationRecommendationDateCriterion"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var immunizationRecommendationDateCriterion = body; //object
									  	//cek apakah ada error atau tidak
									  	if(immunizationRecommendationDateCriterion.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Immunization Recommendation Date Criterion has been add.", "data":immunizationRecommendationDateCriterion.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": immunizationRecommendationDateCriterion.error, "application": "Api FHIR", "function": "addImmunizationRecommendationDateCriterion"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		
		medicationStatus: function addMedicationStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'MEDICATION_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('medicationStatus', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMedicationStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var medicationStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(medicationStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Medication Status has been add.", "data":medicationStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": medicationStatus.error, "application": "Api FHIR", "function": "addMedicationStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		medicationFormCodes: function addMedicationFormCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'MEDICATION_FORM_CODES', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('medicationFormCodes', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMedicationFormCodes"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var medicationFormCodes = body; //object
									  	//cek apakah ada error atau tidak
									  	if(medicationFormCodes.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Medication Form Codes has been add.", "data":medicationFormCodes.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": medicationFormCodes.error, "application": "Api FHIR", "function": "addMedicationFormCodes"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		medicationPackageForm: function addMedicationPackageForm(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'MEDICATION_PACKAGE_FORM', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('medicationPackageForm', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMedicationPackageForm"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var medicationPackageForm = body; //object
									  	//cek apakah ada error atau tidak
									  	if(medicationPackageForm.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Medication Package Form has been add.", "data":medicationPackageForm.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": medicationPackageForm.error, "application": "Api FHIR", "function": "addMedicationPackageForm"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		
		medicationAdminStatus: function addMedicationAdminStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'MEDICATION_ADMIN_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('medicationAdminStatus', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMedicationAdminStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var medicationAdminStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(medicationAdminStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Medication Admin Status has been add.", "data":medicationAdminStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": medicationAdminStatus.error, "application": "Api FHIR", "function": "addMedicationAdminStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		medicationAdminCategory: function addMedicationAdminCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'MEDICATION_ADMIN_CATEGORY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('medicationAdminCategory', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMedicationAdminCategory"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var medicationAdminCategory = body; //object
									  	//cek apakah ada error atau tidak
									  	if(medicationAdminCategory.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Medication Admin Category has been add.", "data":medicationAdminCategory.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": medicationAdminCategory.error, "application": "Api FHIR", "function": "addMedicationAdminCategory"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		reasonMedicationNotGivenCodes: function addReasonMedicationNotGivenCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'REASON_MEDICATION_NOT_GIVEN_CODES', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('reasonMedicationNotGivenCodes', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addReasonMedicationNotGivenCodes"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var reasonMedicationNotGivenCodes = body; //object
									  	//cek apakah ada error atau tidak
									  	if(reasonMedicationNotGivenCodes.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Reason Medication Not Given Codes has been add.", "data":reasonMedicationNotGivenCodes.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": reasonMedicationNotGivenCodes.error, "application": "Api FHIR", "function": "addReasonMedicationNotGivenCodes"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		reasonMedicationGivenCodes: function addReasonMedicationGivenCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'REASON_MEDICATION_GIVEN_CODES', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('reasonMedicationGivenCodes', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addReasonMedicationGivenCodes"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var reasonMedicationGivenCodes = body; //object
									  	//cek apakah ada error atau tidak
									  	if(reasonMedicationGivenCodes.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Reason Medication Given Codes has been add.", "data":reasonMedicationGivenCodes.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": reasonMedicationGivenCodes.error, "application": "Api FHIR", "function": "addReasonMedicationGivenCodes"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		approachSiteCodes: function addApproachSiteCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'APPROACH_SITE_CODES', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('approachSiteCodes', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addApproachSiteCodes"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var approachSiteCodes = body; //object
									  	//cek apakah ada error atau tidak
									  	if(approachSiteCodes.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Approach Site Codes has been add.", "data":approachSiteCodes.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": approachSiteCodes.error, "application": "Api FHIR", "function": "addApproachSiteCodes"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		administrationMethodCodes: function addAdministrationMethodCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ADMINISTRATION_METHOD_CODES', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('administrationMethodCodes', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addAdministrationMethodCodes"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var administrationMethodCodes = body; //object
									  	//cek apakah ada error atau tidak
									  	if(administrationMethodCodes.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Administration Method Codes has been add.", "data":administrationMethodCodes.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": administrationMethodCodes.error, "application": "Api FHIR", "function": "addAdministrationMethodCodes"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		
		medicationDispenseStatus: function addMedicationDispenseStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'MEDICATION_DISPENSE_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('medicationDispenseStatus', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMedicationDispenseStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var medicationDispenseStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(medicationDispenseStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Medication Dispense Status has been add.", "data":medicationDispenseStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": medicationDispenseStatus.error, "application": "Api FHIR", "function": "addMedicationDispenseStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		medicationDispenseCategory: function addMedicationDispenseCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'MEDICATION_DISPENSE_CATEGORY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('medicationDispenseCategory', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMedicationDispenseCategory"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var medicationDispenseCategory = body; //object
									  	//cek apakah ada error atau tidak
									  	if(medicationDispenseCategory.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Medication Dispense Category has been add.", "data":medicationDispenseCategory.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": medicationDispenseCategory.error, "application": "Api FHIR", "function": "addMedicationDispenseCategory"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		actPharmacySupplyType: function addActPharmacySupplyType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ACT_PHARMACY_SUPPLY_TYPE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('actPharmacySupplyType', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addActPharmacySupplyType"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var actPharmacySupplyType = body; //object
									  	//cek apakah ada error atau tidak
									  	if(actPharmacySupplyType.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Act Pharmacy Supply Type has been add.", "data":actPharmacySupplyType.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": actPharmacySupplyType.error, "application": "Api FHIR", "function": "addActPharmacySupplyType"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		actSubstanceAdminSubstitutionCode: function addActSubstanceAdminSubstitutionCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ACT_SUBSTANCE_ADMIN_SUBSTITUTION_CODE', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('actSubstanceAdminSubstitutionCode', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addActSubstanceAdminSubstitutionCode"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var actSubstanceAdminSubstitutionCode = body; //object
									  	//cek apakah ada error atau tidak
									  	if(actSubstanceAdminSubstitutionCode.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Act Substance Admin Substitution Code has been add.", "data":actSubstanceAdminSubstitutionCode.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": actSubstanceAdminSubstitutionCode.error, "application": "Api FHIR", "function": "addActSubstanceAdminSubstitutionCode"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		actSubstanceAdminSubstitutionReason: function addActSubstanceAdminSubstitutionReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'ACT_SUBSTANCE_ADMIN_SUBSTITUTION_REASON', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('actSubstanceAdminSubstitutionReason', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addActSubstanceAdminSubstitutionReason"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var actSubstanceAdminSubstitutionReason = body; //object
									  	//cek apakah ada error atau tidak
									  	if(actSubstanceAdminSubstitutionReason.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Act Substance Admin Substitution Reason has been add.", "data":actSubstanceAdminSubstitutionReason.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": actSubstanceAdminSubstitutionReason.error, "application": "Api FHIR", "function": "addActSubstanceAdminSubstitutionReason"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		
		medicationRequestStatus: function addMedicationRequestStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'MEDICATION_REQUEST_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('medicationRequestStatus', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMedicationRequestStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var medicationRequestStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(medicationRequestStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Medication Request Status has been add.", "data":medicationRequestStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": medicationRequestStatus.error, "application": "Api FHIR", "function": "addMedicationRequestStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		medicationRequestIntent: function addMedicationRequestIntent(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'MEDICATION_REQUEST_INTENT', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('medicationRequestIntent', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMedicationRequestIntent"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var medicationRequestIntent = body; //object
									  	//cek apakah ada error atau tidak
									  	if(medicationRequestIntent.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Medication Request Intent has been add.", "data":medicationRequestIntent.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": medicationRequestIntent.error, "application": "Api FHIR", "function": "addMedicationRequestIntent"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		medicationRequestCategory: function addMedicationRequestCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'MEDICATION_REQUEST_CATEGORY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('medicationRequestCategory', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMedicationRequestCategory"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var medicationRequestCategory = body; //object
									  	//cek apakah ada error atau tidak
									  	if(medicationRequestCategory.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Medication Request Category has been add.", "data":medicationRequestCategory.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": medicationRequestCategory.error, "application": "Api FHIR", "function": "addMedicationRequestCategory"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		medicationRequestPriority: function addMedicationRequestPriority(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'MEDICATION_REQUEST_PRIORITY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('medicationRequestPriority', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMedicationRequestPriority"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var medicationRequestPriority = body; //object
									  	//cek apakah ada error atau tidak
									  	if(medicationRequestPriority.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Medication Request Priority has been add.", "data":medicationRequestPriority.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": medicationRequestPriority.error, "application": "Api FHIR", "function": "addMedicationRequestPriority"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		medicationCodes: function addMedicationCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'MEDICATION_CODES', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('medicationCodes', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMedicationCodes"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var medicationCodes = body; //object
									  	//cek apakah ada error atau tidak
									  	if(medicationCodes.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Medication Codes has been add.", "data":medicationCodes.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": medicationCodes.error, "application": "Api FHIR", "function": "addMedicationCodes"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		substanceAdminSubstitutionReason: function addSubstanceAdminSubstitutionReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toUpperCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'SUBSTANCE_ADMIN_SUBSTITUTION_REASON', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('substanceAdminSubstitutionReason', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addSubstanceAdminSubstitutionReason"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var substanceAdminSubstitutionReason = body; //object
									  	//cek apakah ada error atau tidak
									  	if(substanceAdminSubstitutionReason.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Substance Admin Substitution Reason has been add.", "data":substanceAdminSubstitutionReason.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": substanceAdminSubstitutionReason.error, "application": "Api FHIR", "function": "addSubstanceAdminSubstitutionReason"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		
		medicationStatementStatus: function addMedicationStatementStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'MEDICATION_STATEMENT_STATUS', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('medicationStatementStatus', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMedicationStatementStatus"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var medicationStatementStatus = body; //object
									  	//cek apakah ada error atau tidak
									  	if(medicationStatementStatus.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Medication Statement Status has been add.", "data":medicationStatementStatus.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": medicationStatementStatus.error, "application": "Api FHIR", "function": "addMedicationStatementStatus"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		medicationStatementCategory: function addMedicationStatementCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'MEDICATION_STATEMENT_CATEGORY', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('medicationStatementCategory', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMedicationStatementCategory"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var medicationStatementCategory = body; //object
									  	//cek apakah ada error atau tidak
									  	if(medicationStatementCategory.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Medication Statement Category has been add.", "data":medicationStatementCategory.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": medicationStatementCategory.error, "application": "Api FHIR", "function": "addMedicationStatementCategory"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		medicationStatementTaken: function addMedicationStatementTaken(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				err_code = 3;
				err_msg = "Definition is required";
			}
			
			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'MEDICATION_STATEMENT_TAKEN', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('medicationStatementTaken', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addMedicationStatementTaken"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var medicationStatementTaken = body; //object
									  	//cek apakah ada error atau tidak
									  	if(medicationStatementTaken.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Medication Statement Taken has been add.", "data":medicationStatementTaken.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": medicationStatementTaken.error, "application": "Api FHIR", "function": "addMedicationStatementTaken"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},
		reasonMedicationNotTakenCodes: function addReasonMedicationNotTakenCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			
			var code = req.body.code.trim().toLowerCase();
			var display = req.body.display;
			//var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
			var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
			
			var err_code = 0;
			var err_msg = '';
			
			//input checking
			if(validator.isEmpty(code)){
				err_code = 1;
				err_msg = "Code is required";
			}

			if(validator.isEmpty(display)){
				err_code = 2;
				err_msg = "Display is required";
			}

			if(validator.isEmpty(definition)){
				definition = "";
			}
			
			//if (typeof code != "number") {
			if (isNaN(code)) {	
				err_code = 4;
				err_msg = "Code is not number";
			}

			if(err_code == 0){
				checkApikey(apikey, ipAddres, function(result){
					if(result.err_code == 0){
						checkCode(apikey, code, 'REASON_MEDICATION_NOT_TAKEN_CODES', function(resultCode){
							if(resultCode.err_code == 0){
								//susun body
								var data = {
													"code": code,	
													"display": display,
													"definition": definition
												};
							
								//method, endpoint, params, options, callback
								ApiFHIR.post('reasonMedicationNotTakenCodes', {"apikey": apikey}, {body: data, json:true}, function(error, response, body){
									if(error){
									  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "addReasonMedicationNotTakenCodes"});
									  }else{
									  	//cek apakah ada error atau tidak
									  	var reasonMedicationNotTakenCodes = body; //object
									  	//cek apakah ada error atau tidak
									  	if(reasonMedicationNotTakenCodes.err_code == 0){
										  	res.json({"err_code": 0, "err_msg": "Reason Medication Not Taken Codes has been add.", "data":reasonMedicationNotTakenCodes.data});
									  	}else{
									  		res.json({"err_code": 3, "err_msg": reasonMedicationNotTakenCodes.error, "application": "Api FHIR", "function": "addReasonMedicationNotTakenCodes"});
									  	}
									  }
								})
							}else{
								res.json(resultCode);
							}
						})
					}else{
						result.err_code = 500;
						res.json(result);
					}	
				});
			}else{
				res.json({"err_code": err_code, "err_msg": err_msg});
			}
		},

	},
	put: {
		identityAssuranceLevel: function updateIdentityAssuranceLevel(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataAssuranceLevel = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataAssuranceLevel.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataAssuranceLevel.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				dataAssuranceLevel.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'IDENTITY_ASSURANCE_LEVEL', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'IDENTITY_ASSURANCE_LEVEL', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('identityAssuranceLevel', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataAssuranceLevel,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateIdentityAssuranceLevel"
														});
													} else {
														//cek apakah ada error atau tidak
														var assuranceLevel = body;

														//cek apakah ada error atau tidak
														if (assuranceLevel.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Identity Assurance has been update.",
																"data": assuranceLevel.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": assuranceLevel.error,
																"application": "Api FHIR",
																"function": "updateIdentityAssuranceLevel"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('identityAssuranceLevel', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAssuranceLevel,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateIdentityAssuranceLevel"
												});
											} else {
												//cek apakah ada error atau tidak
												var assuranceLevel = body;

												//cek apakah ada error atau tidak
												if (assuranceLevel.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Identity Assurance has been update.",
														"data": assuranceLevel.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": assuranceLevel.error,
														"application": "Api FHIR",
														"function": "updateIdentityAssuranceLevel"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		administrativeGender: function updateAdministrativeGender(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataAdministrativeGender = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataAdministrativeGender.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataAdministrativeGender.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				dataAdministrativeGender.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ADMINISTRATIVE_GENDER', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ADMINISTRATIVE_GENDER', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('administrativeGender', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataAdministrativeGender,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateAdministrativeGender"
														});
													} else {
														//cek apakah ada error atau tidak
														var administrativeGender = body;

														//cek apakah ada error atau tidak
														if (administrativeGender.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Administrative Gender has been update.",
																"data": administrativeGender.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": administrativeGender.error,
																"application": "Api FHIR",
																"function": "updateAdministrativeGender"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('administrativeGender', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAdministrativeGender,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateAdministrativeGender"
												});
											} else {
												//cek apakah ada error atau tidak
												var administrativeGender = body;

												//cek apakah ada error atau tidak
												if (administrativeGender.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Administrative Gender has been update.",
														"data": administrativeGender.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": administrativeGender.error,
														"application": "Api FHIR",
														"function": "updateAdministrativeGender"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		maritalStatus: function updateMaritalStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataMaritalStatus = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toUpperCase();
				dataMaritalStatus.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataMaritalStatus.display = display;
			}

			if (typeof req.body.system !== 'undefined') {
				var system = req.body.system;
				dataMaritalStatus.system = system;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				dataMaritalStatus.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'MARITAL_STATUS', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'MARITAL_STATUS', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('maritalStatus', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataMaritalStatus,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateMaritalStatus"
														});
													} else {
														//cek apakah ada error atau tidak
														var maritalStatus = body;

														//cek apakah ada error atau tidak
														if (maritalStatus.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Marital Status has been update.",
																"data": maritalStatus.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": maritalStatus.error,
																"application": "Api FHIR",
																"function": "updateMaritalStatus"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('maritalStatus', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataMaritalStatus,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateMaritalStatus"
												});
											} else {
												//cek apakah ada error atau tidak
												var maritalStatus = body;

												//cek apakah ada error atau tidak
												if (maritalStatus.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Marital Status has been update.",
														"data": maritalStatus.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": maritalStatus.error,
														"application": "Api FHIR",
														"function": "updateMaritalStatus"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		contactRole: function updateContactRole(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataMaritalStatus = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toUpperCase();
				dataMaritalStatus.code = code;
			}

			if (typeof req.body.description !== 'undefined') {
				description = req.body.description.replace(/[^\w\s ,]/gi, '');
				dataMaritalStatus.description = description;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'CONTACT_ROLE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'CONTACT_ROLE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('contactRole', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataMaritalStatus,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateContactRole"
														});
													} else {
														//cek apakah ada error atau tidak
														var contactRole = body;

														//cek apakah ada error atau tidak
														if (contactRole.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Contact Role has been update.",
																"data": contactRole.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": contactRole.error,
																"application": "Api FHIR",
																"function": "updateContactRole"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('contactRole', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataMaritalStatus,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateContactRole"
												});
											} else {
												//cek apakah ada error atau tidak
												var contactRole = body;

												//cek apakah ada error atau tidak
												if (contactRole.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Contact Role has been update.",
														"data": contactRole.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": contactRole.error,
														"application": "Api FHIR",
														"function": "updateContactRole"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		animalSpecies: function updateAnimalSpecies(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataAnimalSpecies = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim();
				dataAnimalSpecies.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display.replace(/[^\w\s ,]/gi, '');
				dataAnimalSpecies.display = display;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ANIMAL_SPECIES', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ANIMAL_SPECIES', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('animalSpecies', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataAnimalSpecies,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateAnimalSpecies"
														});
													} else {
														//cek apakah ada error atau tidak
														var animalSpecies = body;

														//cek apakah ada error atau tidak
														if (animalSpecies.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Animal Species has been update.",
																"data": animalSpecies.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": animalSpecies.error,
																"application": "Api FHIR",
																"function": "updateAnimalSpecies"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('animalSpecies', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAnimalSpecies,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateAnimalSpecies"
												});
											} else {
												//cek apakah ada error atau tidak
												var animalSpecies = body;

												//cek apakah ada error atau tidak
												if (animalSpecies.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Animal Species has been update.",
														"data": animalSpecies.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": animalSpecies.error,
														"application": "Api FHIR",
														"function": "updateAnimalSpecies"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		animalBreeds: function updateAnimalBreeds(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataAnimalBreeds = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim();
				dataAnimalBreeds.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display; //.replace(/[^\w\s ,]/gi, '');
				dataAnimalBreeds.display = display;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ANIMAL_BREEDS', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ANIMAL_BREEDS', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('animalBreeds', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataAnimalBreeds,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateAnimalBreeds"
														});
													} else {
														//cek apakah ada error atau tidak
														var animalBreeds = body;

														//cek apakah ada error atau tidak
														if (animalBreeds.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Animal Breeds has been update.",
																"data": animalBreeds.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": animalBreeds.error,
																"application": "Api FHIR",
																"function": "updateAnimalBreeds"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('animalBreeds', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAnimalBreeds,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateAnimalBreeds"
												});
											} else {
												//cek apakah ada error atau tidak
												var animalBreeds = body;

												//cek apakah ada error atau tidak
												if (animalBreeds.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Animal Breeds has been update.",
														"data": animalBreeds.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": animalBreeds.error,
														"application": "Api FHIR",
														"function": "updateAnimalBreeds"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		animalGenderStatus: function updateAnimalGenderStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataAnimalGenderStatus = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataAnimalGenderStatus.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display; //.replace(/[^\w\s ,]/gi, '');
				dataAnimalGenderStatus.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				dataAnimalGenderStatus.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ANIMAL_GENDER_STATUS', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ANIMAL_GENDER_STATUS', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('animalGenderStatus', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataAnimalGenderStatus,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateAnimalGenderStatus"
														});
													} else {
														//cek apakah ada error atau tidak
														var animalGenderStatus = body;

														//cek apakah ada error atau tidak
														if (animalGenderStatus.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Animal Gender Status has been update.",
																"data": animalGenderStatus.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": animalGenderStatus.error,
																"application": "Api FHIR",
																"function": "updateAnimalGenderStatus"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('animalGenderStatus', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAnimalGenderStatus,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateAnimalGenderStatus"
												});
											} else {
												//cek apakah ada error atau tidak
												var animalGenderStatus = body;

												//cek apakah ada error atau tidak
												if (animalGenderStatus.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Animal Breeds has been update.",
														"data": animalGenderStatus.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": animalGenderStatus.error,
														"application": "Api FHIR",
														"function": "updateAnimalGenderStatus"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		languages: function updateLanguage(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataLanguages = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim();
				dataLanguages.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display.replace(/[^\w\s ,]/gi, '');
				dataLanguages.display = display;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'LANGUAGES', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'LANGUAGES', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('languages', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataLanguages,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateLanguage"
														});
													} else {
														//cek apakah ada error atau tidak
														var languages = body;

														//cek apakah ada error atau tidak
														if (languages.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Language has been update.",
																"data": languages.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": languages.error,
																"application": "Api FHIR",
																"function": "updateLanguage"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('languages', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataLanguages,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateLanguage"
												});
											} else {
												//cek apakah ada error atau tidak
												var languages = body;

												//cek apakah ada error atau tidak
												if (languages.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Languages has been update.",
														"data": languages.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": languages.error,
														"application": "Api FHIR",
														"function": "updateLanguage"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		linkType: function updateLinkType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataLinkType = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataLinkType.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display.replace(/[^\w\s ,]/gi, '');
				dataLinkType.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				dataLinkType.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'LINK_TYPE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'LINK_TYPE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('linkType', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataLinkType,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateLinkType"
														});
													} else {
														//cek apakah ada error atau tidak
														var linkType = body;

														//cek apakah ada error atau tidak
														if (linkType.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Link Type has been update.",
																"data": linkType.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": linkType.error,
																"application": "Api FHIR",
																"function": "updateLinkType"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('linkType', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataLinkType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateLinkType"
												});
											} else {
												//cek apakah ada error atau tidak
												var linkType = body;

												//cek apakah ada error atau tidak
												if (linkType.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Link Type has been update.",
														"data": linkType.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": linkType.error,
														"application": "Api FHIR",
														"function": "updateLinkType"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		relatedPersonRelationshipType: function updateRelatedPersonRelationshipType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataRelatedPersonRelationshipType = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toUpperCase();
				dataRelatedPersonRelationshipType.code = code;
			}

			if (typeof req.body.system !== 'undefined') {
				system = req.body.system.replace(/[^\w\s ,]/gi, '');
				dataRelatedPersonRelationshipType.system = system;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display.replace(/[^\w\s ,]/gi, '');
				dataRelatedPersonRelationshipType.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				definition = req.body.definition.replace(/[^\w\s , ( )]/gi, '');
				dataRelatedPersonRelationshipType.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'RELATEDPERSON_RELATIONSHIPTYPE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'RELATEDPERSON_RELATIONSHIPTYPE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('relatedPersonRelationshipType', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataRelatedPersonRelationshipType,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateRelatedPersonRelationshipType"
														});
													} else {
														//cek apakah ada error atau tidak
														var relatedPersonRelationshipType = body;

														//cek apakah ada error atau tidak
														if (relatedPersonRelationshipType.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Related Person Relationship Type has been update.",
																"data": relatedPersonRelationshipType.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": relatedPersonRelationshipType.error,
																"application": "Api FHIR",
																"function": "updateRelatedPersonRelationshipType"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('relatedPersonRelationshipType', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataRelatedPersonRelationshipType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateRelatedPersonRelationshipType"
												});
											} else {
												//cek apakah ada error atau tidak
												var relatedPersonRelationshipType = body;

												//cek apakah ada error atau tidak
												if (relatedPersonRelationshipType.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Related Person Relationship Type has been update.",
														"data": relatedPersonRelationshipType.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": relatedPersonRelationshipType.error,
														"application": "Api FHIR",
														"function": "updateRelatedPersonRelationshipType"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		groupType: function updateGroupType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataGroupType = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataGroupType.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display.replace(/[^\w\s ,]/gi, '');
				dataGroupType.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				definition = req.body.definition.replace(/[^\w\s , ( )]/gi, '');
				dataGroupType.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'GROUP_TYPE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'GROUP_TYPE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('groupType', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataGroupType,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateGroupType"
														});
													} else {
														//cek apakah ada error atau tidak
														var groupType = body;

														//cek apakah ada error atau tidak
														if (groupType.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Group Type has been update.",
																"data": groupType.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": groupType.error,
																"application": "Api FHIR",
																"function": "updateGroupType"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('groupType', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataGroupType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateGroupType"
												});
											} else {
												//cek apakah ada error atau tidak
												var groupType = body;

												//cek apakah ada error atau tidak
												if (groupType.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Group Type has been update.",
														"data": groupType.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": groupType.error,
														"application": "Api FHIR",
														"function": "updateGroupType"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		identifierUse: function updateIdentifierUse(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataIdentifierUse = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataIdentifierUse.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display.replace(/[^\w\s ,]/gi, '');
				dataIdentifierUse.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				definition = req.body.definition.replace(/[^\w\s , ( )]/gi, '');
				dataIdentifierUse.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'IDENTIFIER_USE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'IDENTIFIER_USE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('identifierUse', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataIdentifierUse,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateIdentifierUse"
														});
													} else {
														//cek apakah ada error atau tidak
														var identifierUse = body;

														//cek apakah ada error atau tidak
														if (identifierUse.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Identifier Use has been update.",
																"data": identifierUse.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": identifierUse.error,
																"application": "Api FHIR",
																"function": "updateIdentifierUse"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('identifierUse', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataIdentifierUse,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateIdentifierUse"
												});
											} else {
												//cek apakah ada error atau tidak
												var identifierUse = body;

												//cek apakah ada error atau tidak
												if (identifierUse.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Identifier use has been update.",
														"data": identifierUse.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": identifierUse.error,
														"application": "Api FHIR",
														"function": "updateIdentifierUse"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		identifierType: function updateIdentifierType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataIdentifierType = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toUpperCase();
				dataIdentifierType.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display.replace(/[^\w\s , ( ) /]/gi, '');
				dataIdentifierType.display = display;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'IDENTIFIER_TYPE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'IDENTIFIER_TYPE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('identifierType', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataIdentifierType,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateIdentifierType"
														});
													} else {
														//cek apakah ada error atau tidak
														var identifierType = body;

														//cek apakah ada error atau tidak
														if (identifierType.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Identifier Type has been update.",
																"data": identifierType.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": identifierType.error,
																"application": "Api FHIR",
																"function": "updateIdentifierType"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('identifierType', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataIdentifierType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateIdentifierType"
												});
											} else {
												//cek apakah ada error atau tidak
												var identifierType = body;

												//cek apakah ada error atau tidak
												if (identifierType.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Identifier Type has been update.",
														"data": identifierType.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": identifierType.error,
														"application": "Api FHIR",
														"function": "updateIdentifierType"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		nameUse: function updateNameUse(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataNameUse = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim();
				dataNameUse.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display;
				dataNameUse.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) /]/gi, '');
				dataNameUse.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'NAME_USE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'NAME_USE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('nameUse', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataNameUse,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateNameUse"
														});
													} else {
														//cek apakah ada error atau tidak
														var nameUse = body;

														//cek apakah ada error atau tidak
														if (nameUse.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Name Use has been update.",
																"data": nameUse.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": nameUse.error,
																"application": "Api FHIR",
																"function": "updateNameUse"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('nameUse', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataNameUse,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateNameUse"
												});
											} else {
												//cek apakah ada error atau tidak
												var nameUse = body;

												//cek apakah ada error atau tidak
												if (nameUse.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Name Use has been update.",
														"data": nameUse.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": nameUse.error,
														"application": "Api FHIR",
														"function": "updateNameUse"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		contactPointSystem: function updateContactPointSystem(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataContactPointSystem = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataContactPointSystem.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display;
				dataContactPointSystem.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) /]/gi, '');
				dataContactPointSystem.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'CONTACT_POINT_SYSTEM', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'CONTACT_POINT_SYSTEM', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('contactPointSystem', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataContactPointSystem,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateContactPointSystem"
														});
													} else {
														//cek apakah ada error atau tidak
														var contactPointSystem = body;

														//cek apakah ada error atau tidak
														if (contactPointSystem.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Contact Point System has been update.",
																"data": contactPointSystem.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": contactPointSystem.error,
																"application": "Api FHIR",
																"function": "updateContactPointSystem"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('contactPointSystem', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataContactPointSystem,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateContactPointSystem"
												});
											} else {
												//cek apakah ada error atau tidak
												var contactPointSystem = body;

												//cek apakah ada error atau tidak
												if (contactPointSystem.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Contact Point System has been update.",
														"data": contactPointSystem.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": contactPointSystem.error,
														"application": "Api FHIR",
														"function": "updateContactPointSystem"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		contactPointUse: function updateContactPointUse(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataContactPointUse = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataContactPointUse.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display;
				dataContactPointUse.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) /]/gi, '');
				dataContactPointUse.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'CONTACT_POINT_USE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'CONTACT_POINT_USE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('contactPointUse', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataContactPointUse,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateContactPointUse"
														});
													} else {
														//cek apakah ada error atau tidak
														var contactPointUse = body;

														//cek apakah ada error atau tidak
														if (contactPointUse.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Contact Point Use has been update.",
																"data": contactPointUse.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": contactPointUse.error,
																"application": "Api FHIR",
																"function": "updateContactPointUse"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('contactPointUse', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataContactPointUse,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateContactPointUse"
												});
											} else {
												//cek apakah ada error atau tidak
												var contactPointUse = body;

												//cek apakah ada error atau tidak
												if (contactPointUse.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Contact Point Use has been update.",
														"data": contactPointSystem.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": contactPointUse.error,
														"application": "Api FHIR",
														"function": "updateContactPointUse"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		addressUse: function updateAddressUse(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataAddressUse = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataAddressUse.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display;
				dataAddressUse.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataAddressUse.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ADDRESS_USE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ADDRESS_USE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('addressUse', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataAddressUse,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateAddressUse"
														});
													} else {
														//cek apakah ada error atau tidak
														var addressUse = body;

														//cek apakah ada error atau tidak
														if (addressUse.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Address Use has been update.",
																"data": addressUse.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": addressUse.error,
																"application": "Api FHIR",
																"function": "updateAddressUse"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('addressUse', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressUse,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateAddressUse"
												});
											} else {
												//cek apakah ada error atau tidak
												var addressUse = body;

												//cek apakah ada error atau tidak
												if (addressUse.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Address Use has been update.",
														"data": addressUse.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": addressUse.error,
														"application": "Api FHIR",
														"function": "updateAddressUse"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		addressType: function updateAddressType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataAddressType = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataAddressType.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display;
				dataAddressType.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataAddressType.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ADDRESS_TYPE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ADDRESS_TYPE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('addressType', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataAddressType,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateAddressType"
														});
													} else {
														//cek apakah ada error atau tidak
														var addressType = body;

														//cek apakah ada error atau tidak
														if (addressType.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Address Type has been update.",
																"data": addressType.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": addressType.error,
																"application": "Api FHIR",
																"function": "updateAddressType"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('addressType', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateAddressType"
												});
											} else {
												//cek apakah ada error atau tidak
												var addressType = body;

												//cek apakah ada error atau tidak
												if (addressType.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Address Type has been update.",
														"data": addressType.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": addressType.error,
														"application": "Api FHIR",
														"function": "updateAddressType"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		appointmentReasonCode: function updateAppointmentReasonCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataAppointmentReasonCode = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toUpperCase();
				dataAppointmentReasonCode.code = code;
			}

			if (typeof req.body.description !== 'undefined') {
				var description = req.body.description.replace(/[^\w\s ,]/gi, '');
				dataAppointmentReasonCode.description = description;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'APPOINTMENT_REASON_CODE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'APPOINTMENT_REASON_CODE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('appointmentReasonCode', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataAppointmentReasonCode,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateAppointmentReasonCode"
														});
													} else {
														//cek apakah ada error atau tidak
														var appointmentReasonCode = body;

														//cek apakah ada error atau tidak
														if (appointmentReasonCode.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Appointment Reason Code has been update.",
																"data": appointmentReasonCode.data
															});
														} else {
															res.json(appointmentReasonCode);
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('appointmentReasonCode', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAppointmentReasonCode,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateAppointmentReasonCode"
												});
											} else {
												//cek apakah ada error atau tidak
												var appointmentReasonCode = body;

												//cek apakah ada error atau tidak
												if (appointmentReasonCode.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Appointment Reason Code has been update.",
														"data": appointmentReasonCode.data
													});
												} else {
													res.json(appointmentReasonCode);
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		slotStatus: function updateSlotStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataSlotStatus = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataSlotStatus.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display;
				dataSlotStatus.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataSlotStatus.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'SLOT_STATUS', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'SLOT_STATUS', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('slotStatus', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataSlotStatus,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateSlotStatus"
														});
													} else {
														//cek apakah ada error atau tidak
														var slotStatus = body;
														//cek apakah ada error atau tidak
														if (slotStatus.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Slot Status has been update.",
																"data": slotStatus.data
															});
														} else {
															res.json(slotStatus);
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('slotStatus', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataSlotStatus,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateSlotStatus"
												});
											} else {
												//cek apakah ada error atau tidak
												var slotStatus = body;
												//cek apakah ada error atau tidak
												if (slotStatus.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Slot Status has been update.",
														"data": slotStatus.data
													});
												} else {
													res.json(slotStatus);
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		appointmentStatus: function updateAppointmentStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataAppointmentStatus = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataAppointmentStatus.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display;
				dataAppointmentStatus.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataAppointmentStatus.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'APPOINTMENT_STATUS', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'APPOINTMENT_STATUS', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('appointmentStatus', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataAppointmentStatus,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateAppointmentStatus"
														});
													} else {
														//cek apakah ada error atau tidak
														var appointmentStatus = body;
														//cek apakah ada error atau tidak
														if (appointmentStatus.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Appointment Status has been update.",
																"data": appointmentStatus.data
															});
														} else {
															res.json(appointmentStatus);
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('appointmentStatus', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAppointmentStatus,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateAppointmentStatus"
												});
											} else {
												//cek apakah ada error atau tidak
												var appointmentStatus = body;
												//cek apakah ada error atau tidak
												if (appointmentStatus.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Appointment Status has been update.",
														"data": appointmentStatus.data
													});
												} else {
													res.json(appointmentStatus);
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		participantRequired: function updateParticipantRequired(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataParticipantRequired = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataParticipantRequired.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display;
				dataParticipantRequired.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataParticipantRequired.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'PARTICIPANT_REQUIRED', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'PARTICIPANT_REQUIRED', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('participantRequired', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataParticipantRequired,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateParticipantRequired"
														});
													} else {
														//cek apakah ada error atau tidak
														var participantRequired = body;
														//cek apakah ada error atau tidak
														if (participantRequired.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Participant Required has been update.",
																"data": participantRequired.data
															});
														} else {
															res.json(participantRequired);
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('participantRequired', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataParticipantRequired,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateParticipantRequired"
												});
											} else {
												//cek apakah ada error atau tidak
												var participantRequired = body;
												//cek apakah ada error atau tidak
												if (participantRequired.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Participant Required has been update.",
														"data": participantRequired.data
													});
												} else {
													res.json(participantRequired);
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		participationStatus: function updateparticipationStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataparticipationStatus = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataparticipationStatus.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display;
				dataparticipationStatus.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataparticipationStatus.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'PARTICIPATION_STATUS', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'PARTICIPATION_STATUS', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('participationStatus', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataparticipationStatus,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateparticipationStatus"
														});
													} else {
														//cek apakah ada error atau tidak
														var participationStatus = body;
														//cek apakah ada error atau tidak
														if (participationStatus.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Participant Status has been update.",
																"data": participationStatus.data
															});
														} else {
															res.json(participationStatus);
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('participationStatus', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataparticipationStatus,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateparticipationStatus"
												});
											} else {
												//cek apakah ada error atau tidak
												var participationStatus = body;
												//cek apakah ada error atau tidak
												if (participationStatus.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Participant Status has been update.",
														"data": participationStatus.data
													});
												} else {
													res.json(participationStatus);
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		actEncounterCode: function updateActEncounterCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataActEncounterCode = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toUpperCase();
				dataActEncounterCode.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataActEncounterCode.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataActEncounterCode.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ACT_ENCOUNTER_CODE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ACT_ENCOUNTER_CODE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('actEncounterCode', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataActEncounterCode,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateActEncounterCode"
														});
													} else {
														//cek apakah ada error atau tidak
														var actEncounterCode = body;

														//cek apakah ada error atau tidak
														if (actEncounterCode.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Act Encounter Code has been update.",
																"data": actEncounterCode.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": actEncounterCode.error,
																"application": "Api FHIR",
																"function": "updateActEncounterCode"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('actEncounterCode', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateActEncounterCode"
												});
											} else {
												//cek apakah ada error atau tidak
												var actEncounterCode = body;

												//cek apakah ada error atau tidak
												if (actEncounterCode.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Act Encounter Code has been update.",
														"data": actEncounterCode.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": actEncounterCode.error,
														"application": "Api FHIR",
														"function": "updateActEncounterCode"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		actPriority: function updateActPriority(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataActPriority = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toUpperCase();
				dataActPriority.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataActPriority.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataActPriority.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ACT_PRIORITY', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ACT_PRIORITY', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('actPriority', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataActPriority,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateActPriority"
														});
													} else {
														//cek apakah ada error atau tidak
														var actPriority = body;

														//cek apakah ada error atau tidak
														if (actPriority.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Act Priority has been update.",
																"data": actPriority.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": actPriority.error,
																"application": "Api FHIR",
																"function": "updateActPriority"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('actPriority', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateActPriority"
												});
											} else {
												//cek apakah ada error atau tidak
												var actPriority = body;

												//cek apakah ada error atau tidak
												if (actPriority.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Act Priority has been update.",
														"data": actPriority.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": actPriority.error,
														"application": "Api FHIR",
														"function": "updateActPriority"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		accountStatus: function updateAccountStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataAccountStatus = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataAccountStatus.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataAccountStatus.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataAccountStatus.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ACCOUNT_STATUS', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ACCOUNT_STATUS', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('accountStatus', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataAccountStatus,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateAccountStatus"
														});
													} else {
														//cek apakah ada error atau tidak
														var accountStatus = body;

														//cek apakah ada error atau tidak
														if (accountStatus.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Account Status has been update.",
																"data": accountStatus.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": accountStatus.error,
																"application": "Api FHIR",
																"function": "updateAccountStatus"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('accountStatus', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateAccountStatus"
												});
											} else {
												//cek apakah ada error atau tidak
												var accountStatus = body;

												//cek apakah ada error atau tidak
												if (accountStatus.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Account Status has been update.",
														"data": accountStatus.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": accountStatus.error,
														"application": "Api FHIR",
														"function": "updateAccountStatus"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		accountType: function updateAccountType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataAccountType = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataAccountType.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataAccountType.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataAccountType.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ACCOUNT_TYPE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ACCOUNT_TYPE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('accountType', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataAccountType,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateAccountType"
														});
													} else {
														//cek apakah ada error atau tidak
														var accountType = body;

														//cek apakah ada error atau tidak
														if (accountType.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Account Type has been update.",
																"data": accountType.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": accountType.error,
																"application": "Api FHIR",
																"function": "updateAccountType"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('accountType', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateAccountType"
												});
											} else {
												//cek apakah ada error atau tidak
												var accountType = body;

												//cek apakah ada error atau tidak
												if (accountType.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Account Type has been update.",
														"data": accountType.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": accountType.error,
														"application": "Api FHIR",
														"function": "updateAccountType"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		diagnosisRole: function updateDiagnosisRole(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataDiagnosisRole = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataDiagnosisRole.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataDiagnosisRole.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataDiagnosisRole.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'DIAGNOSIS_ROLE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'DIAGNOSIS_ROLE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('diagnosisRole', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataDiagnosisRole,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateDiagnosisRole"
														});
													} else {
														//cek apakah ada error atau tidak
														var diagnosisRole = body;

														//cek apakah ada error atau tidak
														if (diagnosisRole.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Diagnosis Role has been update.",
																"data": diagnosisRole.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": diagnosisRole.error,
																"application": "Api FHIR",
																"function": "updateDiagnosisRole"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('diagnosisRole', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateDiagnosisRole"
												});
											} else {
												//cek apakah ada error atau tidak
												var diagnosisRole = body;

												//cek apakah ada error atau tidak
												if (diagnosisRole.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Diagnosis Role has been update.",
														"data": diagnosisRole.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": diagnosisRole.error,
														"application": "Api FHIR",
														"function": "updateDiagnosisRole"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		encounterAdmitSource: function updateEncounterAdmitSource(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataEncounterAdmitSource = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataEncounterAdmitSource.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataEncounterAdmitSource.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataEncounterAdmitSource.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ENCOUNTER_ADMIT_SOURCE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ENCOUNTER_ADMIT_SOURCE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('encounterAdmitSource', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataEncounterAdmitSource,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateEncounterAdmitSource"
														});
													} else {
														//cek apakah ada error atau tidak
														var encounterAdmitSource = body;

														//cek apakah ada error atau tidak
														if (encounterAdmitSource.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Encounter Admit Source has been update.",
																"data": encounterAdmitSource.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": encounterAdmitSource.error,
																"application": "Api FHIR",
																"function": "updateEncounterAdmitSource"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('encounterAdmitSource', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateEncounterAdmitSource"
												});
											} else {
												//cek apakah ada error atau tidak
												var encounterAdmitSource = body;

												//cek apakah ada error atau tidak
												if (encounterAdmitSource.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Encounter Admit Source has been update.",
														"data": encounterAdmitSource.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": encounterAdmitSource.error,
														"application": "Api FHIR",
														"function": "updateEncounterAdmitSource"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		encounterDiet: function updateEncounterDiet(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataEncounterDiet = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataEncounterDiet.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataEncounterDiet.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataEncounterDiet.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ENCOUNTER_DIET', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ENCOUNTER_DIET', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('encounterDiet', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataEncounterDiet,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateEncounterDiet"
														});
													} else {
														//cek apakah ada error atau tidak
														var encounterDiet = body;

														//cek apakah ada error atau tidak
														if (encounterDiet.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Encounter Diet has been update.",
																"data": encounterDiet.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": encounterDiet.error,
																"application": "Api FHIR",
																"function": "updateEncounterDiet"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('encounterDiet', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateEncounterDiet"
												});
											} else {
												//cek apakah ada error atau tidak
												var encounterDiet = body;

												//cek apakah ada error atau tidak
												if (encounterDiet.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Encounter Diet has been update.",
														"data": encounterDiet.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": encounterDiet.error,
														"application": "Api FHIR",
														"function": "updateEncounterDiet"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		encounterDischargeDisposition: function updateEncounterDischargeDisposition(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataEncounterDischargeDisposition = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataEncounterDischargeDisposition.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataEncounterDischargeDisposition.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataEncounterDischargeDisposition.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ENCOUNTER_DISCHARGE_DISPOSITION', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ENCOUNTER_DISCHARGE_DISPOSITION', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('encounterDischargeDisposition', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataEncounterDischargeDisposition,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateEncounterDischargeDisposition"
														});
													} else {
														//cek apakah ada error atau tidak
														var encounterDischargeDisposition = body;

														//cek apakah ada error atau tidak
														if (encounterDischargeDisposition.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Encounter Discharge Disposition has been update.",
																"data": encounterDischargeDisposition.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": encounterDischargeDisposition.error,
																"application": "Api FHIR",
																"function": "updateEncounterDischargeDisposition"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('encounterDischargeDisposition', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateEncounterDischargeDisposition"
												});
											} else {
												//cek apakah ada error atau tidak
												var encounterDischargeDisposition = body;

												//cek apakah ada error atau tidak
												if (encounterDischargeDisposition.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Encounter Discharge Disposition has been update.",
														"data": encounterDischargeDisposition.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": encounterDischargeDisposition.error,
														"application": "Api FHIR",
														"function": "updateEncounterDischargeDisposition"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		encounterLocationStatus: function updateEncounterLocationStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataEncounterLocationStatus = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataEncounterLocationStatus.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataEncounterLocationStatus.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataEncounterLocationStatus.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ENCOUNTER_LOCATION_STATUS', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ENCOUNTER_LOCATION_STATUS', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('encounterLocationStatus', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataEncounterLocationStatus,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateEncounterLocationStatus"
														});
													} else {
														//cek apakah ada error atau tidak
														var encounterLocationStatus = body;

														//cek apakah ada error atau tidak
														if (encounterLocationStatus.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Encounter Location Status has been update.",
																"data": encounterLocationStatus.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": encounterLocationStatus.error,
																"application": "Api FHIR",
																"function": "updateEncounterLocationStatus"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('encounterLocationStatus', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateEncounterLocationStatus"
												});
											} else {
												//cek apakah ada error atau tidak
												var encounterLocationStatus = body;

												//cek apakah ada error atau tidak
												if (encounterLocationStatus.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Encounter Location Status has been update.",
														"data": encounterLocationStatus.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": encounterLocationStatus.error,
														"application": "Api FHIR",
														"function": "updateEncounterLocationStatus"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		encounterParticipantType: function updateEncounterParticipantType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataEncounterParticipantType = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataEncounterParticipantType.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataEncounterParticipantType.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataEncounterParticipantType.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ENCOUNTER_PARTICIPANT_TYPE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ENCOUNTER_PARTICIPANT_TYPE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('encounterParticipantType', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataEncounterParticipantType,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateEncounterParticipantType"
														});
													} else {
														//cek apakah ada error atau tidak
														var encounterParticipantType = body;

														//cek apakah ada error atau tidak
														if (encounterParticipantType.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Encounter Participant Type has been update.",
																"data": encounterParticipantType.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": encounterParticipantType.error,
																"application": "Api FHIR",
																"function": "updateEncounterParticipantType"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('encounterParticipantType', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateEncounterParticipantType"
												});
											} else {
												//cek apakah ada error atau tidak
												var encounterParticipantType = body;

												//cek apakah ada error atau tidak
												if (encounterParticipantType.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Encounter Participant Type has been update.",
														"data": encounterParticipantType.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": encounterParticipantType.error,
														"application": "Api FHIR",
														"function": "updateEncounterParticipantType"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		encounterReason: function updateEncounterReason(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataEncounterReason = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataEncounterReason.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataEncounterReason.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataEncounterReason.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ENCOUNTER_REASON', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ENCOUNTER_REASON', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('encounterReason', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataEncounterReason,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateEncounterReason"
														});
													} else {
														//cek apakah ada error atau tidak
														var encounterReason = body;

														//cek apakah ada error atau tidak
														if (encounterReason.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Encounter Reason has been update.",
																"data": encounterReason.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": encounterReason.error,
																"application": "Api FHIR",
																"function": "updateEncounterReason"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('encounterReason', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateEncounterReason"
												});
											} else {
												//cek apakah ada error atau tidak
												var encounterReason = body;

												//cek apakah ada error atau tidak
												if (encounterReason.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Encounter Reason been update.",
														"data": encounterReason.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": encounterReason.error,
														"application": "Api FHIR",
														"function": "updateEncounterReason"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		encounterSpecialCourtesy: function updateEncounterSpecialCourtesy(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataEncounterSpecialCourtesy = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toUpperCase();
				dataEncounterSpecialCourtesy.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataEncounterSpecialCourtesy.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataEncounterSpecialCourtesy.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ENCOUNTER_SPECIAL_COURTESY', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ENCOUNTER_SPECIAL_COURTESY', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('encounterSpecialCourtesy', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataEncounterSpecialCourtesy,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateEncounterSpecialCourtesy"
														});
													} else {
														//cek apakah ada error atau tidak
														var encounterSpecialCourtesy = body;

														//cek apakah ada error atau tidak
														if (encounterSpecialCourtesy.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Encounter Special Courtesy has been update.",
																"data": encounterSpecialCourtesy.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": encounterSpecialCourtesy.error,
																"application": "Api FHIR",
																"function": "updateEncounterSpecialCourtesy"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('encounterSpecialCourtesy', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateEncounterSpecialCourtesy"
												});
											} else {
												//cek apakah ada error atau tidak
												var encounterSpecialCourtesy = body;

												//cek apakah ada error atau tidak
												if (encounterSpecialCourtesy.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Encounter Special Courtesy  has been update.",
														"data": encounterSpecialCourtesy.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": encounterSpecialCourtesy.error,
														"application": "Api FHIR",
														"function": "updateEncounterSpecialCourtesy"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		encounterSpecialArrangements: function updateEncounterSpecialArrangements(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataEncounterSpecialArrangements = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataEncounterSpecialArrangements.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataEncounterSpecialArrangements.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataEncounterSpecialArrangements.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ENCOUNTER_SPECIAL_ARRANGEMENTS', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ENCOUNTER_SPECIAL_ARRANGEMENTS', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('encounterSpecialArrangements', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataEncounterSpecialArrangements,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateEncounterSpecialArrangements"
														});
													} else {
														//cek apakah ada error atau tidak
														var encounterSpecialArrangements = body;

														//cek apakah ada error atau tidak
														if (encounterSpecialArrangements.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Encounter Special Arrangements has been update.",
																"data": encounterSpecialArrangements.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": encounterSpecialArrangements.error,
																"application": "Api FHIR",
																"function": "updateEncounterSpecialArrangements"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('encounterSpecialArrangements', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateEncounterSpecialArrangements"
												});
											} else {
												//cek apakah ada error atau tidak
												var encounterSpecialArrangements = body;

												//cek apakah ada error atau tidak
												if (encounterSpecialArrangements.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Encounter Special Arrangements has been update.",
														"data": encounterSpecialArrangements.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": encounterSpecialArrangements.error,
														"application": "Api FHIR",
														"function": "updateEncounterSpecialArrangements"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		encounterStatus: function updateEncounterStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataEncounterStatus = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataEncounterStatus.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataEncounterStatus.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataEncounterStatus.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ENCOUNTER_STATUS', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ENCOUNTER_STATUS', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('encounterStatus', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataEncounterStatus,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateEncounterStatus"
														});
													} else {
														//cek apakah ada error atau tidak
														var encounterStatus = body;

														//cek apakah ada error atau tidak
														if (encounterStatus.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Encounter Status has been update.",
																"data": encounterStatus.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": encounterStatus.error,
																"application": "Api FHIR",
																"function": "updateEncounterStatus"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('encounterStatus', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateEncounterStatus"
												});
											} else {
												//cek apakah ada error atau tidak
												var encounterStatus = body;

												//cek apakah ada error atau tidak
												if (encounterStatus.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Encounter Status has been update.",
														"data": encounterStatus.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": encounterStatus.error,
														"application": "Api FHIR",
														"function": "updateEncounterStatus"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		encounterType: function updateEncounterType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataEncounterType = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase().replace("/", "<or>");
				dataEncounterType.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataEncounterType.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataEncounterType.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'ENCOUNTER_TYPE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'ENCOUNTER_TYPE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('encounterType', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataEncounterType,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateEncounterType"
														});
													} else {
														//cek apakah ada error atau tidak
														var encounterType = body;

														//cek apakah ada error atau tidak
														if (encounterType.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Encounter Type has been update.",
																"data": encounterType.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": encounterType.error,
																"application": "Api FHIR",
																"function": "updateEncounterType"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('encounterType', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateEncounterType"
												});
											} else {
												//cek apakah ada error atau tidak
												var encounterType = body;

												//cek apakah ada error atau tidak
												if (encounterType.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Encounter Type has been update.",
														"data": encounterType.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": encounterType.error,
														"application": "Api FHIR",
														"function": "updateEncounterType"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		episodeOfCareStatus: function updateEpisodeOfCareStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataEpisodeOfCareStatus = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataEpisodeOfCareStatus.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display;
				dataEpisodeOfCareStatus.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataEpisodeOfCareStatus.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'EPISODE_OF_CARE_STATUS', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'EPISODE_OF_CARE_STATUS', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('episodeOfCareStatus', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataEpisodeOfCareStatus,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateEpisodeOfCareStatus"
														});
													} else {
														//cek apakah ada error atau tidak
														var episodeOfCareStatus = body;

														//cek apakah ada error atau tidak
														if (episodeOfCareStatus.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Episode Of Care Status has been update.",
																"data": episodeOfCareStatus.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": episodeOfCareStatus.error,
																"application": "Api FHIR",
																"function": "updateEpisodeOfCareStatus"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('episodeOfCareStatus', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataEpisodeOfCareStatus,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateEpisodeOfCareStatus"
												});
											} else {
												//cek apakah ada error atau tidak
												var episodeOfCareStatus = body;

												//cek apakah ada error atau tidak
												if (episodeOfCareStatus.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Episode Of Care Status has been update.",
														"data": episodeOfCareStatus.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": episodeOfCareStatus.error,
														"application": "Api FHIR",
														"function": "updateEpisodeOfCareStatus"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		episodeOfCareType: function updateEpisodeOfCareType(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataEpisodeOfCareType = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataEpisodeOfCareType.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display;
				dataEpisodeOfCareType.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataEpisodeOfCareType.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'EPISODE_OF_CARE_TYPE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'EPISODE_OF_CARE_TYPE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('episodeOfCareType', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataEpisodeOfCareType,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateEpisodeOfCareType"
														});
													} else {
														//cek apakah ada error atau tidak
														var episodeOfCareType = body;

														//cek apakah ada error atau tidak
														if (episodeOfCareType.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Episode Of Care Type has been update.",
																"data": episodeOfCareType.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": episodeOfCareType.error,
																"application": "Api FHIR",
																"function": "updateEpisodeOfCareType"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('episodeOfCareType', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateEpisodeOfCareType"
												});
											} else {
												//cek apakah ada error atau tidak
												var episodeOfCareType = body;

												//cek apakah ada error atau tidak
												if (episodeOfCareType.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Episode Of Care Type has been update.",
														"data": episodeOfCareType.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": episodeOfCareType.error,
														"application": "Api FHIR",
														"function": "updateEpisodeOfCareType"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		flagStatus: function updateFlagStatus(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataFlagStatus = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataFlagStatus.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataFlagStatus.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataFlagStatus.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'FLAG_STATUS', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'FLAG_STATUS', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('flagStatus', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataFlagStatus,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateFlagStatus"
														});
													} else {
														//cek apakah ada error atau tidak
														var flagStatus = body;

														//cek apakah ada error atau tidak
														if (flagStatus.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Flag Status has been update.",
																"data": flagStatus.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": flagStatus.error,
																"application": "Api FHIR",
																"function": "updateFlagStatus"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('flagStatus', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateFlagStatus"
												});
											} else {
												//cek apakah ada error atau tidak
												var flagStatus = body;

												//cek apakah ada error atau tidak
												if (flagStatus.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Flag Status has been update.",
														"data": flagStatus.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": flagStatus.error,
														"application": "Api FHIR",
														"function": "updateFlagStatus"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		flagCategory: function updateFlagCategory(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataFlagCategory = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataFlagCategory.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataFlagCategory.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataFlagCategory.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'FLAG_CATEGORY', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'FLAG_CATEGORY', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('flagCategory', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataFlagCategory,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateFlagCategory"
														});
													} else {
														//cek apakah ada error atau tidak
														var flagCategory = body;

														//cek apakah ada error atau tidak
														if (flagCategory.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Flag Category has been update.",
																"data": flagCategory.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": flagCategory.error,
																"application": "Api FHIR",
																"function": "updateFlagCategory"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('flagCategory', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateFlagCategory"
												});
											} else {
												//cek apakah ada error atau tidak
												var flagCategory = body;

												//cek apakah ada error atau tidak
												if (flagCategory.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Flag Category has been update.",
														"data": flagCategory.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": flagCategory.error,
														"application": "Api FHIR",
														"function": "updateFlagCategory"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		flagCode: function updateFlagCode(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataFlagCode = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataFlagCode.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				var display = req.body.display;
				dataFlagCode.display = display;
			}

			if (typeof req.body.definition !== 'undefined') {
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataFlagCode.definition = definition;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'FLAG_CODE', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'FLAG_CODE', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('flagCode', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataFlagCode,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateFlagCode"
														});
													} else {
														//cek apakah ada error atau tidak
														var flagCode = body;

														//cek apakah ada error atau tidak
														if (flagCode.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Flag Status has been update.",
																"data": flagCode.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": flagCode.error,
																"application": "Api FHIR",
																"function": "updateFlagCode"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('flagCode', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateFlagCode"
												});
											} else {
												//cek apakah ada error atau tidak
												var flagCode = body;

												//cek apakah ada error atau tidak
												if (flagCode.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Flag Status has been update.",
														"data": flagCode.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": flagCode.error,
														"application": "Api FHIR",
														"function": "updateFlagCode"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		reAdmissionIndicator: function updateReAdmissionIndicator(req, res) {
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataReAdmissionIndicator = {};

			if (typeof req.body.code !== 'undefined') {
				var code = req.body.code.trim().toLowerCase();
				dataReAdmissionIndicator.code = code;
			}

			if (typeof req.body.display !== 'undefined') {
				display = req.body.display;
				dataReAdmissionIndicator.display = display;
			}

			if (typeof req.body.description !== 'undefined') {
				var description = req.body.description.replace(/[^\w\s ,]/gi, '');
				dataReAdmissionIndicator.description = description;
			}

			if (_id == "" || typeof _id == 'undefined') {
				res.json({
					"err_code": 5,
					"err_msg": "Id is required."
				});
			} else {
				if (validator.isInt(_id)) {
					checkApikey(apikey, ipAddres, function (result) {
						if (result.err_code == 0) {
							checkId(apikey, _id, 'RE_ADMISSION_INDICATOR', function (resultCheckId) {
								if (resultCheckId.err_code == 0) {
									if (typeof req.body.code !== 'undefined') {
										checkCode(apikey, code, 'RE_ADMISSION_INDICATOR', function (resultCode) {
											if (resultCode.err_code == 0) {
												//method, endpoint, params, options, callback
												ApiFHIR.put('reAdmissionIndicator', {
													"apikey": apikey,
													"_id": _id
												}, {
													body: dataReAdmissionIndicator,
													json: true
												}, function (error, response, body) {
													if (error) {
														res.json({
															"err_code": 1,
															"err_msg": error,
															"application": "Api FHIR",
															"function": "updateReAdmissionIndicator"
														});
													} else {
														//cek apakah ada error atau tidak
														var reAdmissionIndicator = body;

														//cek apakah ada error atau tidak
														if (reAdmissionIndicator.err_code == 0) {
															res.json({
																"err_code": 0,
																"err_msg": "Re Admission Indicator has been update.",
																"data": reAdmissionIndicator.data
															});
														} else {
															res.json({
																"err_code": 3,
																"err_msg": reAdmissionIndicator.error,
																"application": "Api FHIR",
																"function": "updateReAdmissionIndicator"
															});
														}
													}
												})
											} else {
												res.json(resultCode);
											}
										})
									} else {
										//method, endpoint, params, options, callback
										ApiFHIR.put('reAdmissionIndicator', {
											"apikey": apikey,
											"_id": _id
										}, {
											body: dataAddressType,
											json: true
										}, function (error, response, body) {
											if (error) {
												res.json({
													"err_code": 1,
													"err_msg": error,
													"application": "Api FHIR",
													"function": "updateReAdmissionIndicator"
												});
											} else {
												//cek apakah ada error atau tidak
												var reAdmissionIndicator = body;

												//cek apakah ada error atau tidak
												if (reAdmissionIndicator.err_code == 0) {
													res.json({
														"err_code": 0,
														"err_msg": "Re Admission Indicator has been update.",
														"data": reAdmissionIndicator.data
													});
												} else {
													res.json({
														"err_code": 3,
														"err_msg": reAdmissionIndicator.error,
														"application": "Api FHIR",
														"function": "updateReAdmissionIndicator"
													});
												}
											}
										})
									}
								} else {
									res.json(resultCheckId);
								}
							})
						} else {
							result.err_code = 500;
							res.json(result);
						}
					});
				} else {
					res.json({
						"err_code": 4,
						"err_msg": "Id must be a number."
					});
				}
			}
		},
		udiEntryType: function updateUdiEntryType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataUdiEntryType = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataUdiEntryType.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataUdiEntryType.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataUdiEntryType.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'UDI_ENTRY_TYPE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'UDI_ENTRY_TYPE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('udiEntryType', {"apikey": apikey, "_id": _id}, {body: dataUdiEntryType, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateUdiEntryType"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var udiEntryType = body; 
												  	//cek apakah ada error atau tidak
												  	if(udiEntryType.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Udi Entry Type has been update.","data":udiEntryType.data});
												  	}else{
												  		res.json(udiEntryType);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('udiEntryType', {"apikey": apikey, "_id": _id}, {body: dataUdiEntryType, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateUdiEntryType"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var udiEntryType = body; 
										  	//cek apakah ada error atau tidak
										  	if(udiEntryType.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Udi Entry Type has been update.","data":udiEntryType.data});
										  	}else{
										  		res.json(udiEntryType);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		deviceStatus: function updateDeviceStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataDeviceStatus = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataDeviceStatus.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataDeviceStatus.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataDeviceStatus.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'DEVICE_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'DEVICE_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('deviceStatus', {"apikey": apikey, "_id": _id}, {body: dataDeviceStatus, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDeviceStatus"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var deviceStatus = body; 
												  	//cek apakah ada error atau tidak
												  	if(deviceStatus.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Device Status has been update.","data":deviceStatus.data});
												  	}else{
												  		res.json(deviceStatus);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('deviceStatus', {"apikey": apikey, "_id": _id}, {body: dataDeviceStatus, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDeviceStatus"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var deviceStatus = body; 
										  	//cek apakah ada error atau tidak
										  	if(deviceStatus.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Device Status has been update.","data":deviceStatus.data});
										  	}else{
										  		res.json(deviceStatus);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		deviceKind: function updateDeviceKind(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datadeviceKind = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim();
				datadeviceKind.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datadeviceKind.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				datadeviceKind.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'DEVICE_KIND', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'DEVICE_KIND', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('deviceKind', {"apikey": apikey, "_id": _id}, {body: datadeviceKind, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDeviceKind"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var deviceKind = body; 
												  	//cek apakah ada error atau tidak
												  	if(deviceKind.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Device Kind has been update.","data":deviceKind.data});
												  	}else{
												  		res.json(deviceKind);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('deviceKind', {"apikey": apikey, "_id": _id}, {body: datadeviceKind, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDeviceKind"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var deviceKind = body; 
										  	//cek apakah ada error atau tidak
										  	if(deviceKind.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Device Kind has been update.","data":deviceKind.data});
										  	}else{
										  		res.json(deviceKind);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		deviceSafety: function updateDeviceSafety(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataDeviceSafety = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toUpperCase();
				dataDeviceSafety.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataDeviceSafety.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataDeviceSafety.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'DEVICE_SAFETY', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'DEVICE_SAFETY', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('deviceSafety', {"apikey": apikey, "_id": _id}, {body: dataDeviceSafety, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDeviceSafety"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var deviceSafety = body; 
												  	//cek apakah ada error atau tidak
												  	if(deviceSafety.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Device Safety has been update.","data":deviceSafety.data});
												  	}else{
												  		res.json(deviceSafety);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('deviceSafety', {"apikey": apikey, "_id": _id}, {body: dataDeviceSafety, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDeviceSafety"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var deviceSafety = body; 
										  	//cek apakah ada error atau tidak
										  	if(deviceSafety.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Device Safety has been update.","data":deviceSafety.data});
										  	}else{
										  		res.json(deviceSafety);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		operationalStatus: function updateOperationalStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataOperationalStatus = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataOperationalStatus.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataOperationalStatus.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .]/gi, '');
				dataOperationalStatus.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'OPERATIONAL_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'OPERATIONAL_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('operationalStatus', {"apikey": apikey, "_id": _id}, {body: dataOperationalStatus, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateOperationalStatus"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var operationalStatus = body; 
												  	//cek apakah ada error atau tidak
												  	if(operationalStatus.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Operational Status has been update.","data":operationalStatus.data});
												  	}else{
												  		res.json(operationalStatus);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('operationalStatus', {"apikey": apikey, "_id": _id}, {body: dataOperationalStatus, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateOperationalStatus"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var operationalStatus = body; 
										  	//cek apakah ada error atau tidak
										  	if(operationalStatus.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Operational Status has been update.","data":operationalStatus.data});
										  	}else{
										  		res.json(operationalStatus);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		parameterGroup: function updateParameterGroup(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataParameterGroup = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataParameterGroup.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataParameterGroup.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .-]/gi, '');
				dataParameterGroup.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'PARAMETER_GROUP', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'PARAMETER_GROUP', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('parameterGroup', {"apikey": apikey, "_id": _id}, {body: dataParameterGroup, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateParameterGroup"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var parameterGroup = body; 
												  	//cek apakah ada error atau tidak
												  	if(parameterGroup.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Parameter Group has been update.","data":parameterGroup.data});
												  	}else{
												  		res.json(parameterGroup);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('parameterGroup', {"apikey": apikey, "_id": _id}, {body: dataParameterGroup, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateParameterGroup"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var parameterGroup = body; 
										  	//cek apakah ada error atau tidak
										  	if(parameterGroup.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Parameter Group has been update.","data":parameterGroup.data});
										  	}else{
										  		res.json(parameterGroup);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		measurementPrinciple: function updateMeasurementPrinciple(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataMeasurementPrinciple = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataMeasurementPrinciple.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataMeasurementPrinciple.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .-]/gi, '');
				dataMeasurementPrinciple.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'MEASUREMENT_PRINCIPLE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'MEASUREMENT_PRINCIPLE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('measurementPrinciple', {"apikey": apikey, "_id": _id}, {body: dataMeasurementPrinciple, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMeasurementPrinciple"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var measurementPrinciple = body; 
												  	//cek apakah ada error atau tidak
												  	if(measurementPrinciple.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Measurement Principle has been update.","data":measurementPrinciple.data});
												  	}else{
												  		res.json(measurementPrinciple);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('measurementPrinciple', {"apikey": apikey, "_id": _id}, {body: dataMeasurementPrinciple, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMeasurementPrinciple"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var measurementPrinciple = body; 
										  	//cek apakah ada error atau tidak
										  	if(measurementPrinciple.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Measurement Principle has been update.","data":measurementPrinciple.data});
										  	}else{
										  		res.json(measurementPrinciple);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		specificationType: function updateSpecificationType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataSpecificationType = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataSpecificationType.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataSpecificationType.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .-]/gi, '');
				dataSpecificationType.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'SPECIFICATION_TYPE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'SPECIFICATION_TYPE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('specificationType', {"apikey": apikey, "_id": _id}, {body: dataSpecificationType, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateSpecificationType"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var specificationType = body; 
												  	//cek apakah ada error atau tidak
												  	if(specificationType.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Specification Type has been update.","data":specificationType.data});
												  	}else{
												  		res.json(specificationType);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('specificationType', {"apikey": apikey, "_id": _id}, {body: dataSpecificationType, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateSpecificationType"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var specificationType = body; 
										  	//cek apakah ada error atau tidak
										  	if(specificationType.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Specification Type has been update.","data":specificationType.data});
										  	}else{
										  		res.json(specificationType);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		metricOperationalStatus: function updateMetricOperationalStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataMetricOperationalStatus = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataMetricOperationalStatus.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataMetricOperationalStatus.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .-]/gi, '');
				dataMetricOperationalStatus.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'METRIC_OPERATIONAL_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'METRIC_OPERATIONAL_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('metricOperationalStatus', {"apikey": apikey, "_id": _id}, {body: dataMetricOperationalStatus, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMetricOperationalStatus"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var metricOperationalStatus = body; 
												  	//cek apakah ada error atau tidak
												  	if(metricOperationalStatus.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Metric Operational Status has been update.","data":metricOperationalStatus.data});
												  	}else{
												  		res.json(metricOperationalStatus);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('metricOperationalStatus', {"apikey": apikey, "_id": _id}, {body: dataMetricOperationalStatus, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMetricOperationalStatus"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var metricOperationalStatus = body; 
										  	//cek apakah ada error atau tidak
										  	if(metricOperationalStatus.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Metric Operational Status has been update.","data":metricOperationalStatus.data});
										  	}else{
										  		res.json(metricOperationalStatus);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		deviceMetricType: function updateDeviceMetricType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataDeviceMetricType = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataDeviceMetricType.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataDeviceMetricType.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / .-:]/gi, '');
				dataDeviceMetricType.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'DEVICE_METRIC_TYPE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'DEVICE_METRIC_TYPE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('deviceMetricType', {"apikey": apikey, "_id": _id}, {body: dataDeviceMetricType, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDeviceMetricType"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var deviceMetricType = body; 
												  	//cek apakah ada error atau tidak
												  	if(deviceMetricType.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Device Metric Type has been update.","data":deviceMetricType.data});
												  	}else{
												  		res.json(deviceMetricType);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('deviceMetricType', {"apikey": apikey, "_id": _id}, {body: dataDeviceMetricType, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDeviceMetricType"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var deviceMetricType = body; 
										  	//cek apakah ada error atau tidak
										  	if(deviceMetricType.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Device Metric Type has been update.","data":deviceMetricType.data});
										  	}else{
										  		res.json(deviceMetricType);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		metricColor: function updateMetricColor(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataMetricColor = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataMetricColor.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataMetricColor.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				dataMetricColor.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'METRIC_COLOR', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'METRIC_COLOR', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('metricColor', {"apikey": apikey, "_id": _id}, {body: dataMetricColor, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMetricColor"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var metricColor = body; 
												  	//cek apakah ada error atau tidak
												  	if(metricColor.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Metric Color has been update.","data":metricColor.data});
												  	}else{
												  		res.json(metricColor);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('metricColor', {"apikey": apikey, "_id": _id}, {body: dataMetricColor, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMetricColor"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var metricColor = body; 
										  	//cek apakah ada error atau tidak
										  	if(metricColor.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Metric Color has been update.","data":metricColor.data});
										  	}else{
										  		res.json(metricColor);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		metricCategory: function updateMetricCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataMetricCategory = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataMetricCategory.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataMetricCategory.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				dataMetricCategory.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'METRIC_CATEGORY', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'METRIC_CATEGORY', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('metricCategory', {"apikey": apikey, "_id": _id}, {body: dataMetricCategory, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMetricCategory"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var metricCategory = body; 
												  	//cek apakah ada error atau tidak
												  	if(metricCategory.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Metric Category has been update.","data":metricCategory.data});
												  	}else{
												  		res.json(metricCategory);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('metricCategory', {"apikey": apikey, "_id": _id}, {body: dataMetricCategory, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMetricCategory"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var metricCategory = body; 
										  	//cek apakah ada error atau tidak
										  	if(metricCategory.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Metric Category has been update.","data":metricCategory.data});
										  	}else{
										  		res.json(metricCategory);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		metricCalibrationType: function updateMetricCalibrationType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataMetricCalibrationType = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataMetricCalibrationType.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataMetricCalibrationType.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				dataMetricCalibrationType.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'METRIC_CALIBRATION_TYPE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'METRIC_CALIBRATION_TYPE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('metricCalibrationType', {"apikey": apikey, "_id": _id}, {body: dataMetricCalibrationType, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMetricCalibrationType"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var metricCalibrationType = body; 
												  	//cek apakah ada error atau tidak
												  	if(metricCalibrationType.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Metric Calibration Type has been update.","data":metricCalibrationType.data});
												  	}else{
												  		res.json(metricCalibrationType);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('metricCalibrationType', {"apikey": apikey, "_id": _id}, {body: dataMetricCalibrationType, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMetricCalibrationType"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var metricCalibrationType = body; 
										  	//cek apakah ada error atau tidak
										  	if(metricCalibrationType.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Metric Calibration Type has been update.","data":metricCalibrationType.data});
										  	}else{
										  		res.json(metricCalibrationType);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		metricCalibrationState: function updateMetricCalibrationState(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataMetricCalibrationState = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataMetricCalibrationState.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataMetricCalibrationState.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				dataMetricCalibrationState.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'METRIC_CALIBRATION_STATE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'METRIC_CALIBRATION_STATE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('metricCalibrationState', {"apikey": apikey, "_id": _id}, {body: dataMetricCalibrationState, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMetricCalibrationState"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var metricCalibrationState = body; 
												  	//cek apakah ada error atau tidak
												  	if(metricCalibrationState.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Metric Calibration State has been update.","data":metricCalibrationState.data});
												  	}else{
												  		res.json(metricCalibrationType);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('metricCalibrationState', {"apikey": apikey, "_id": _id}, {body: dataMetricCalibrationState, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMetricCalibrationState"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var metricCalibrationState = body; 
										  	//cek apakah ada error atau tidak
										  	if(metricCalibrationState.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Metric Calibration State has been update.","data":metricCalibrationState.data});
										  	}else{
										  		res.json(metricCalibrationState);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
    substanceStatus: function updateSubstanceStatus(req, res){
      var ipAddres = req.connection.remoteAddress;
      var apikey = req.params.apikey;
      var _id = req.params._id;

      var dataSubstanceStatus = {};

      if(typeof req.body.code !== 'undefined'){
        var code = req.body.code.trim().toLowerCase();
        dataSubstanceStatus.code = code;
      }

      if(typeof req.body.display !== 'undefined'){
        display = req.body.display;
        dataSubstanceStatus.display = display;
      }

      if(typeof req.body.definition !== 'undefined'){
        var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
        dataSubstanceStatus.definition = definition;
      }

      if(_id == "" || typeof _id == 'undefined'){
        res.json({"err_code": 5, "err_msg": "Id is required."});  
      }else{
        if(validator.isInt(_id)){
          checkApikey(apikey, ipAddres, function(result){
            if(result.err_code == 0){
              checkId(apikey, _id, 'SUBSTANCE_STATUS', function(resultCheckId){
                if(resultCheckId.err_code == 0){
                  if(typeof req.body.code !== 'undefined'){
                    checkCode(apikey, code, 'SUBSTANCE_STATUS', function(resultCode){
                      if(resultCode.err_code == 0){
                        //method, endpoint, params, options, callback
                        ApiFHIR.put('substanceStatus', {"apikey": apikey, "_id": _id}, {body: dataSubstanceStatus, json: true}, function(error, response, body){
                          if(error){
                            res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateSubstanceStatus"});
                          }else{
                            //cek apakah ada error atau tidak
                            var substanceStatus = body; 
                            //cek apakah ada error atau tidak
                            if(substanceStatus.err_code == 0){
                              res.json({"err_code": 0, "err_msg": "Substance Status has been update.","data":substanceStatus.data});
                            }else{
                              res.json(substanceStatus);
                            }
                          }
                        })
                      }else{
                        res.json(resultCode);
                      }
                    })
                  }else{
                    //method, endpoint, params, options, callback
                    ApiFHIR.put('substanceStatus', {"apikey": apikey, "_id": _id}, {body: dataSubstanceStatus, json: true}, function(error, response, body){
                      if(error){
                        res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateSubstanceStatus"});
                      }else{
                        //cek apakah ada error atau tidak
                        var substanceStatus = body; 
                        //cek apakah ada error atau tidak
                        if(substanceStatus.err_code == 0){
                          res.json({"err_code": 0, "err_msg": "Substance Status has been update.","data":substanceStatus.data});
                        }else{
                          res.json(substanceStatus);
                        }
                      }
                    })
                  }
                }else{
                  res.json(resultCheckId);
                }
              })
            }else{
              result.err_code = 500;
              res.json(result);
            } 
          });
        }else{
          res.json({"err_code": 4, "err_msg": "Id must be a number."}); 
        }
      }
    },
    substanceCategory: function updateSubstanceCategory(req, res){
      var ipAddres = req.connection.remoteAddress;
      var apikey = req.params.apikey;
      var _id = req.params._id;

      var datasubstanceCategory = {};

      if(typeof req.body.code !== 'undefined'){
        var code = req.body.code.trim().toLowerCase();
        datasubstanceCategory.code = code;
      }

      if(typeof req.body.display !== 'undefined'){
        display = req.body.display;
        datasubstanceCategory.display = display;
      }

      if(typeof req.body.definition !== 'undefined'){
        var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
        datasubstanceCategory.definition = definition;
      }

      if(_id == "" || typeof _id == 'undefined'){
        res.json({"err_code": 5, "err_msg": "Id is required."});  
      }else{
        if(validator.isInt(_id)){
          checkApikey(apikey, ipAddres, function(result){
            if(result.err_code == 0){
              checkId(apikey, _id, 'SUBSTANCE_CATEGORY', function(resultCheckId){
                if(resultCheckId.err_code == 0){
                  if(typeof req.body.code !== 'undefined'){
                    checkCode(apikey, code, 'SUBSTANCE_CATEGORY', function(resultCode){
                      if(resultCode.err_code == 0){
                        //method, endpoint, params, options, callback
                        ApiFHIR.put('substanceCategory', {"apikey": apikey, "_id": _id}, {body: datasubstanceCategory, json: true}, function(error, response, body){
                          if(error){
                            res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateSubstanceCategory"});
                          }else{
                            //cek apakah ada error atau tidak
                            var substanceCategory = body; 
                            //cek apakah ada error atau tidak
                            if(substanceCategory.err_code == 0){
                              res.json({"err_code": 0, "err_msg": "Substance Category has been update.","data":substanceCategory.data});
                            }else{
                              res.json(substanceCategory);
                            }
                          }
                        })
                      }else{
                        res.json(resultCode);
                      }
                    })
                  }else{
                    //method, endpoint, params, options, callback
                    ApiFHIR.put('substanceCategory', {"apikey": apikey, "_id": _id}, {body: datasubstanceCategory, json: true}, function(error, response, body){
                      if(error){
                        res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateSubstanceCategory"});
                      }else{
                        //cek apakah ada error atau tidak
                        var substanceCategory = body; 
                        //cek apakah ada error atau tidak
                        if(substanceCategory.err_code == 0){
                          res.json({"err_code": 0, "err_msg": "Substance Category has been update.","data":substanceCategory.data});
                        }else{
                          res.json(substanceCategory);
                        }
                      }
                    })
                  }
                }else{
                  res.json(resultCheckId);
                }
              })
            }else{
              result.err_code = 500;
              res.json(result);
            } 
          });
        }else{
          res.json({"err_code": 4, "err_msg": "Id must be a number."}); 
        }
      }
    },
    substanceCode: function updateSubstanceCode(req, res){
      var ipAddres = req.connection.remoteAddress;
      var apikey = req.params.apikey;
      var _id = req.params._id;

      var dataSubstanceCode = {};

      if(typeof req.body.code !== 'undefined'){
        var code = req.body.code.trim().toLowerCase();
        if(!validator.isInt(code)){
        	res.json({"err_code": 1, "err_msg": "Code is number."});  
        }else{
        	dataSubstanceCode.code = code;
        }
      }

      if(typeof req.body.display !== 'undefined'){
        display = req.body.display;
        dataSubstanceCode.display = display;
      }

      if(typeof req.body.definition !== 'undefined'){
        var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
        dataSubstanceCode.definition = definition;
      }

      if(_id == "" || typeof _id == 'undefined'){
        res.json({"err_code": 5, "err_msg": "Id is required."});  
      }else{
        if(validator.isInt(_id)){
          checkApikey(apikey, ipAddres, function(result){
            if(result.err_code == 0){
              checkId(apikey, _id, 'SUBSTANCE_CODE', function(resultCheckId){
                if(resultCheckId.err_code == 0){
                  if(typeof req.body.code !== 'undefined'){
                    checkCode(apikey, code, 'SUBSTANCE_CODE', function(resultCode){
                      if(resultCode.err_code == 0){
                        //method, endpoint, params, options, callback
                        ApiFHIR.put('substanceCode', {"apikey": apikey, "_id": _id}, {body: dataSubstanceCode, json: true}, function(error, response, body){
                          if(error){
                            res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateSubstanceCode"});
                          }else{
                            //cek apakah ada error atau tidak
                            var substanceCode = body; 
                            //cek apakah ada error atau tidak
                            if(substanceCode.err_code == 0){
                              res.json({"err_code": 0, "err_msg": "Substance Code has been update.","data":substanceCode.data});
                            }else{
                              res.json(substanceCode);
                            }
                          }
                        })
                      }else{
                        res.json(resultCode);
                      }
                    })
                  }else{
                    //method, endpoint, params, options, callback
                    ApiFHIR.put('substanceCode', {"apikey": apikey, "_id": _id}, {body: dataSubstanceCode, json: true}, function(error, response, body){
                      if(error){
                        res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateSubstanceCode"});
                      }else{
                        //cek apakah ada error atau tidak
                        var substanceCode = body; 
                        //cek apakah ada error atau tidak
                        if(substanceCode.err_code == 0){
                          res.json({"err_code": 0, "err_msg": "Substance Code has been update.","data":substanceCode.data});
                        }else{
                          res.json(substanceCode);
                        }
                      }
                    })
                  }
                }else{
                  res.json(resultCheckId);
                }
              })
            }else{
              result.err_code = 500;
              res.json(result);
            } 
          });
        }else{
          res.json({"err_code": 4, "err_msg": "Id must be a number."}); 
        }
      }
    },
		organizationType: function updateOrganizationType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataOrganizationType = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataOrganizationType.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				dataOrganizationType.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				dataOrganizationType.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ORGANIZATION_TYPE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ORGANIZATION_TYPE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('organizationType', {"apikey": apikey, "_id": _id}, {body: dataOrganizationType, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateOrganizationType"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var organizationType = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(organizationType.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Organization Type has been update.","data":organizationType.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": organizationType.error, "application": "Api FHIR", "function": "updateOrganizationType"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('organizationType', {"apikey": apikey, "_id": _id}, {body: dataOrganizationType, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateOrganizationType"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var organizationType = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(organizationType.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Organization Type has been update.","data":organizationType.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": organizationType.error, "application": "Api FHIR", "function": "updateOrganizationType"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		contactentityType: function updateContactentityType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataContactentityType = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toUpperCase();
				dataContactentityType.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				dataContactentityType.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				dataContactentityType.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'CONTACT_ENTITY_TYPE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'CONTACT_ENTITY_TYPE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('contactentityType', {"apikey": apikey, "_id": _id}, {body: dataContactentityType, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateContactentityType"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var contactentityType = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(contactentityType.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Contactentity Type has been update.","data":contactentityType.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": contactentityType.error, "application": "Api FHIR", "function": "updateContactentityType"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('contactentityType', {"apikey": apikey, "_id": _id}, {body: dataContactentityType, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateContactentityType"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var contactentityType = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(contactentityType.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Contactentity Type has been update.","data":contactentityType.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": contactentityType.error, "application": "Api FHIR", "function": "updateContactentityType"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		locationStatus: function updateLocationStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataLocationStatus = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataLocationStatus.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				dataLocationStatus.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				dataLocationStatus.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'LOCATION_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'LOCATION_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('locationStatus', {"apikey": apikey, "_id": _id}, {body: dataLocationStatus, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateLocationStatus"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var locationStatus = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(locationStatus.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Location Status has been update.","data":locationStatus.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": locationStatus.error, "application": "Api FHIR", "function": "updateLocationStatus"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('locationStatus', {"apikey": apikey, "_id": _id}, {body: dataLocationStatus, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateLocationStatus"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var locationStatus = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(locationStatus.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Location Status has been update.","data":locationStatus.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": locationStatus.error, "application": "Api FHIR", "function": "updateLocationStatus"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		bedStatus: function updateBedStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataBedStatus = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toUpperCase();
				dataBedStatus.code = code;
			}

			if(typeof req.body.description !== 'undefined'){
				description = req.body.description.replace(/[^\w\s ,]/gi, '');
				dataBedStatus.description = description;
			}


			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'BED_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'BED_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('bedStatus', {"apikey": apikey, "_id": _id}, {body: dataBedStatus, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateBedStatus"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var bedStatus = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(bedStatus.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Bed Status has been update.","data":bedStatus.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": bedStatus.error, "application": "Api FHIR", "function": "updateBedStatus"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('bedStatus', {"apikey": apikey, "_id": _id}, {body: dataBedStatus, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateBedStatus"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var bedStatus = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(bedStatus.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Bed Status has been update.","data":bedStatus.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": bedStatus.error, "application": "Api FHIR", "function": "updateBedStatus"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		locationMode: function updateLocationMode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataLocationMode = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataLocationMode.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				dataLocationMode.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				dataLocationMode.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'LOCATION_MODE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'LOCATION_MODE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('locationMode', {"apikey": apikey, "_id": _id}, {body: dataLocationMode, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateLocationMode"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var locationMode = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(locationMode.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Location Mode has been update.","data":locationMode.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": locationMode.error, "application": "Api FHIR", "function": "updateLocationMode"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('locationMode', {"apikey": apikey, "_id": _id}, {body: dataLocationMode, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateLocationMode"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var locationMode = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(locationMode.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Location Mode has been update.","data":locationMode.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": locationMode.error, "application": "Api FHIR", "function": "updateLocationMode"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		serviceDeliveryLocationRoleType: function updateServiceDeliveryLocationRoleType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toUpperCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'SERVICE_DELIVERY_LOCATION_ROLE_TYPE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'SERVICE_DELIVERY_LOCATION_ROLE_TYPE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('serviceDeliveryLocationRoleType', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateServiceDeliveryLocationRoleType"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var serviceDeliveryLocationRoleType = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(serviceDeliveryLocationRoleType.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Update Service Delivery Location Role Type Code has been update.","data":serviceDeliveryLocationRoleType.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": serviceDeliveryLocationRoleType.error, "application": "Api FHIR", "function": "updateServiceDeliveryLocationRoleType"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('serviceDeliveryLocationRoleType', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateServiceDeliveryLocationRoleType"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var serviceDeliveryLocationRoleType = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(serviceDeliveryLocationRoleType.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Update Service Delivery Location Role Type Code has been update.","data":serviceDeliveryLocationRoleType.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": serviceDeliveryLocationRoleType.error, "application": "Api FHIR", "function": "updateServiceDeliveryLocationRoleTypeCode"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		locationPhysicalType: function updateLocationPhysicalType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataLocationPhysicalType = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataLocationPhysicalType.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				dataLocationPhysicalType.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				dataLocationPhysicalType.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'LOCATION_PHYSICAL_TYPE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'LOCATION_PHYSICAL_TYPE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('locationPhysicalType', {"apikey": apikey, "_id": _id}, {body: dataLocationPhysicalType, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateLocationPhysicalType"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var locationPhysicalType = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(locationPhysicalType.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Location Mode has been update.","data":locationPhysicalType.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": locationPhysicalType.error, "application": "Api FHIR", "function": "updateLocationPhysicalType"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('locationPhysicalType', {"apikey": apikey, "_id": _id}, {body: dataLocationPhysicalType, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateLocationPhysicalType"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var locationPhysicalType = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(locationPhysicalType.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Location Mode has been update.","data":locationPhysicalType.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": locationPhysicalType.error, "application": "Api FHIR", "function": "updateLocationPhysicalType"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		qualificationCode: function updateQualificationCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toUpperCase();
				data.code = code;
			}

			if(typeof req.body.description !== 'undefined'){
				description = req.body.description.replace(/[^\w\s ,]/gi, '');
				data.description = description;
			}


			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'QUALIFICATION_CODE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'QUALIFICATION_CODE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('qualificationCode', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updatequalificationCode"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var qualificationCode = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(qualificationCode.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Qualification Code has been update.","data":qualificationCode.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": qualificationCode.error, "application": "Api FHIR", "function": "updateQualificationCode"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('qualificationCode', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateQualificationCode"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var qualificationCode = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(qualificationCode.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Qualification Code has been update.","data":qualificationCode.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": qualificationCode.error, "application": "Api FHIR", "function": "updateQualificationCode"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		practitionerRoleCode: function updatePractitionerRoleCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'PRACTITIONER_ROLE_CODE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'PRACTITIONER_ROLE_CODE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('practitionerRoleCode', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updatePractitionerRoleCode"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var practitionerRoleCode = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(practitionerRoleCode.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Practitioner Role Code has been update.","data":practitionerRoleCode.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": practitionerRoleCode.error, "application": "Api FHIR", "function": "updatePractitionerRoleCode"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('practitionerRoleCode', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updatePractitionerRoleCode"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var practitionerRoleCode = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(practitionerRoleCode.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Practitioner Role Code has been update.","data":practitionerRoleCode.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": practitionerRoleCode.error, "application": "Api FHIR", "function": "updatePractitionerRoleCode"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		practiceCode: function updatePracticeCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};
			
			if(typeof req.body.code !== 'undefined'){
				//var code = req.body.code.trim();
				var code = req.body.code;
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			
			//console.log(req.body.code);
			/*if(typeof req.body.code != "number"){*/
			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'PRACTICE_CODE', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'PRACTICE_CODE', function(resultCode){
												if(resultCode.err_code == 0){
													//method, endpoint, params, options, callback
													ApiFHIR.put('practiceCode', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updatePracticeCode"});
															}else{
																//cek apakah ada error atau tidak
																var practiceCode = body; 

																//cek apakah ada error atau tidak
																if(practiceCode.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Practice Code has been update.","data":practiceCode.data});
																}else{
																	res.json({"err_code": 3, "err_msg": practiceCode.error, "application": "Api FHIR", "function": "updatePracticeCode"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('practiceCode', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updatePracticeCode"});
													}else{
														//cek apakah ada error atau tidak
														var practiceCode = body; 

														//cek apakah ada error atau tidak
														if(practiceCode.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Practice Code has been update.","data":practiceCode.data});
														}else{
															res.json({"err_code": 3, "err_msg": practiceCode.error, "application": "Api FHIR", "function": "updatePracticeCode"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
			
		},
		daysOfWeek: function updateDaysOfWeek(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'DAYS_OF_WEEK', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'DAYS_OF_WEEK', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('daysOfWeek', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDaysOfWeek"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var daysOfWeek = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(daysOfWeek.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Days Of Week has been update.","data":daysOfWeek.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": daysOfWeek.error, "application": "Api FHIR", "function": "updateDaysOfWeek"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('daysOfWeek', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDaysOfWeek"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var daysOfWeek = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(daysOfWeek.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Days Of Week has been update.","data":daysOfWeek.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": daysOfWeek.error, "application": "Api FHIR", "function": "updateDaysOfWeek"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		serviceCategory: function updateServiceCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			
			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'SERVICE_CATEGORY', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'SERVICE_CATEGORY', function(resultCode){
												if(resultCode.err_code == 0){
													//method, endpoint, params, options, callback
													ApiFHIR.put('serviceCategory', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateServiceCategory"});
															}else{
																//cek apakah ada error atau tidak
																var serviceCategory = body; 

																//cek apakah ada error atau tidak
																if(serviceCategory.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Service Category has been update.","data":serviceCategory.data});
																}else{
																	res.json({"err_code": 3, "err_msg": serviceCategory.error, "application": "Api FHIR", "function": "updateServiceCategory"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('serviceCategory', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateServiceCategory"});
													}else{
														//cek apakah ada error atau tidak
														var serviceCategory = body; 

														//cek apakah ada error atau tidak
														if(serviceCategory.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Service Category has been update.","data":serviceCategory.data});
														}else{
															res.json({"err_code": 3, "err_msg": serviceCategory.error, "application": "Api FHIR", "function": "updateServiceCategory"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		serviceType: function updateServiceType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			
			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'SERVICE_TYPE', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'SERVICE_TYPE', function(resultCode){
												if(resultCode.err_code == 0){
													//method, endpoint, params, options, callback
													ApiFHIR.put('serviceType', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateServiceType"});
															}else{
																//cek apakah ada error atau tidak
																var serviceType = body; 

																//cek apakah ada error atau tidak
																if(serviceType.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Service Type has been update.","data":serviceType.data});
																}else{
																	res.json({"err_code": 3, "err_msg": serviceType.error, "application": "Api FHIR", "function": "updateServiceType"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('serviceType', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateServiceType"});
													}else{
														//cek apakah ada error atau tidak
														var serviceType = body; 

														//cek apakah ada error atau tidak
														if(serviceType.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Service Type has been update.","data":serviceType.data});
														}else{
															res.json({"err_code": 3, "err_msg": serviceType.error, "application": "Api FHIR", "function": "updateServiceType"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		serviceProvisionConditions: function updateServiceProvisionConditions(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'SERVICE_PROVISION_CONDITIONS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'SERVICE_PROVISION_CONDITIONS', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('serviceProvisionConditions', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateServiceProvisionConditions"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var serviceProvisionConditions = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(serviceProvisionConditions.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Service Provision Conditions has been update.","data":serviceProvisionConditions.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": serviceProvisionConditions.error, "application": "Api FHIR", "function": "updateServiceProvisionConditions"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('serviceProvisionConditions', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateServiceProvisionConditions"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var serviceProvisionConditions = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(serviceProvisionConditions.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Service Provision Conditions has been update.","data":serviceProvisionConditions.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": serviceProvisionConditions.error, "application": "Api FHIR", "function": "updateServiceProvisionConditions"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		serviceReferralMethod: function updateServiceReferralMethod(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'SERVICE_REFERRAL_METHOD', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'SERVICE_REFERRAL_METHOD', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('serviceReferralMethod', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateServiceReferralMethod"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var serviceReferralMethod = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(serviceReferralMethod.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Service Referral Method has been update.","data":serviceReferralMethod.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": serviceReferralMethod.error, "application": "Api FHIR", "function": "updateServiceReferralMethod"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('serviceReferralMethod', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateServiceReferralMethod"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var serviceReferralMethod = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(serviceReferralMethod.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Service Referral Method has been update.","data":serviceReferralMethod.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": serviceReferralMethod.error, "application": "Api FHIR", "function": "updateServiceReferralMethod"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		endpointStatus: function updateEndpointStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ENDPOINT_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ENDPOINT_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('endpointStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateEndpointStatus"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var endpointStatus = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(endpointStatus.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Endpoint Status has been update.","data":endpointStatus.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": endpointStatus.error, "application": "Api FHIR", "function": "updateEndpointStatus"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('endpointStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateEndpointStatus"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var endpointStatus = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(endpointStatus.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Endpoint Status has been update.","data":endpointStatus.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": endpointStatus.error, "application": "Api FHIR", "function": "updateEndpointStatus"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		endpointConnectionType: function updateEndpointConnectionType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ENDPOINT_CONNECTION_TYPE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ENDPOINT_CONNECTION_TYPE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('endpointConnectionType', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateEndpointConnectionType"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var endpointConnectionType = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(endpointConnectionType.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Endpoint Connection Type has been update.","data":endpointConnectionType.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": endpointConnectionType.error, "application": "Api FHIR", "function": "updateEndpointConnectionType"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('endpointConnectionType', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateEndpointConnectionType"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var endpointConnectionType = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(endpointConnectionType.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Endpoint Connection Type has been update.","data":endpointConnectionType.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": endpointConnectionType.error, "application": "Api FHIR", "function": "updateEndpointConnectionType"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		endpointPayloadType: function updateEndpointPayloadType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ENDPOINT_PAYLOAD_TYPE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ENDPOINT_PAYLOAD_TYPE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('endpointPayloadType', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateEndpointPayloadType"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var endpointPayloadType = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(endpointPayloadType.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Endpoint Payload Type has been update.","data":endpointPayloadType.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": endpointPayloadType.error, "application": "Api FHIR", "function": "updateEndpointPayloadType"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('endpointPayloadType', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateEndpointPayloadType"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var endpointPayloadType = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(endpointPayloadType.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Endpoint Payload Type has been update.","data":endpointPayloadType.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": endpointPayloadType.error, "application": "Api FHIR", "function": "updateEndpointPayloadType"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		adverseEventCategory: function updateAdverseEventCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataAdverseEventCategory = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toUpperCase();
				dataAdverseEventCategory.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				dataAdverseEventCategory.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				dataAdverseEventCategory.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ADVERSE_EVENT_CATEGORY', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ADVERSE_EVENT_CATEGORY', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('adverseEventCategory', {"apikey": apikey, "_id": _id}, {body: dataAdverseEventCategory, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAdverseEventCategory"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var adverseEventCategory = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(adverseEventCategory.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Adverse Event Category has been update.","data":adverseEventCategory.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": adverseEventCategory.error, "application": "Api FHIR", "function": "updateAdverseEventCategory"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('adverseEventCategory', {"apikey": apikey, "_id": _id}, {body: dataAdverseEventCategory, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAdverseEventCategory"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var adverseEventCategory = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(adverseEventCategory.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Adverse Event Category has been update.","data":adverseEventCategory.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": adverseEventCategory.error, "application": "Api FHIR", "function": "updateAdverseEventCategory"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		adverseEventType: function updateadverseEventType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			
			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'ADVERSE_EVENT_TYPE', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'ADVERSE_EVENT_TYPE', function(resultCode){
												if(resultCode.err_code == 0){
													//method, endpoint, params, options, callback
													ApiFHIR.put('adverseEventType', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAdverseEventType"});
															}else{
																//cek apakah ada error atau tidak
																var adverseEventType = body; 

																//cek apakah ada error atau tidak
																if(adverseEventType.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Adverse Event Type has been update.","data":adverseEventType.data});
																}else{
																	res.json({"err_code": 3, "err_msg": adverseEventType.error, "application": "Api FHIR", "function": "updateAdverseEventType"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('adverseEventType', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAdverseEventType"});
													}else{
														//cek apakah ada error atau tidak
														var adverseEventType = body; 

														//cek apakah ada error atau tidak
														if(adverseEventType.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Adverse Event Type has been update.","data":adverseEventType.data});
														}else{
															res.json({"err_code": 3, "err_msg": adverseEventType.error, "application": "Api FHIR", "function": "updateAdverseEventType"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		adverseEventSeriousness: function updateAdverseEventSeriousness(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ADVERSE_EVENT_Seriousness', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ADVERSE_EVENT_Seriousness', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('adverseEventSeriousness', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAdverseEventSeriousness"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var adverseEventSeriousness = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(adverseEventSeriousness.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Adverse Event Seriousness has been update.","data":adverseEventSeriousness.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": adverseEventSeriousness.error, "application": "Api FHIR", "function": "updateAdverseEventSeriousness"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('adverseEventSeriousness', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAdverseEventSeriousness"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var adverseEventSeriousness = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(adverseEventSeriousness.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Adverse Event Seriousness has been update.","data":adverseEventSeriousness.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": adverseEventSeriousness.error, "application": "Api FHIR", "function": "updateAdverseEventSeriousness"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		adverseEventOutcome: function updateAdverseEventOutcome(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ADVERSE_EVENT_OUTCOME', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ADVERSE_EVENT_OUTCOME', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('adverseEventOutcome', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAdverseEventOutcome"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var adverseEventOutcome = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(adverseEventOutcome.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Adverse Event Outcome has been update.","data":adverseEventOutcome.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": adverseEventOutcome.error, "application": "Api FHIR", "function": "updateAdverseEventOutcome"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('adverseEventOutcome', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAdverseEventOutcome"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var adverseEventOutcome = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(adverseEventOutcome.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Adverse Event Outcome has been update.","data":adverseEventOutcome.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": adverseEventOutcome.error, "application": "Api FHIR", "function": "updateAdverseEventOutcome"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		adverseEventCausality: function updateAdverseEventCausality(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ADVERSE_EVENT_Causality', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ADVERSE_EVENT_Causality', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('adverseEventCausality', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAdverseEventCausality"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var adverseEventCausality = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(adverseEventCausality.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Adverse Event Causality has been update.","data":adverseEventCausality.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": adverseEventCausality.error, "application": "Api FHIR", "function": "updateAdverseEventCausality"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('adverseEventCausality', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAdverseEventCausality"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var adverseEventCausality = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(adverseEventCausality.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Adverse Event Causality has been update.","data":adverseEventCausality.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": adverseEventCausality.error, "application": "Api FHIR", "function": "updateAdverseEventCausality"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		adverseEventCausalityAssess: function updateAdverseEventCausalityAssess(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ADVERSE_EVENT_Causality_Assess', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ADVERSE_EVENT_Causality_Assess', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('adverseEventCausalityAssess', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAdverseEventCausalityAssess"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var adverseEventCausalityAssess = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(adverseEventCausalityAssess.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Adverse Event Causality Assess has been update.","data":adverseEventCausalityAssess.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": adverseEventCausalityAssess.error, "application": "Api FHIR", "function": "updateAdverseEventCausalityAssess"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('adverseEventCausalityAssess', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAdverseEventCausalityAssess"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var adverseEventCausalityAssess = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(adverseEventCausalityAssess.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Adverse Event Causality Assess has been update.","data":adverseEventCausalityAssess.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": adverseEventCausalityAssess.error, "application": "Api FHIR", "function": "updateAdverseEventCausalityAssess"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		adverseEventCausalityMethod: function updateAdverseEventCausalityMethod(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ADVERSE_EVENT_Causality_Method', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ADVERSE_EVENT_Causality_Method', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('adverseEventCausalityMethod', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAdverseEventCausalityMethod"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var adverseEventCausalityMethod = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(adverseEventCausalityMethod.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Adverse Event Causality Method has been update.","data":adverseEventCausalityMethod.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": adverseEventCausalityMethod.error, "application": "Api FHIR", "function": "updateAdverseEventCausalityMethod"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('adverseEventCausalityMethod', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAdverseEventCausalityMethod"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var adverseEventCausalityMethod = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(adverseEventCausalityMethod.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Adverse Event Causality Method has been update.","data":adverseEventCausalityMethod.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": adverseEventCausalityMethod.error, "application": "Api FHIR", "function": "updateAdverseEventCausalityMethod"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		adverseEventCausalityResult: function updateAdverseEventCausalityResult(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ADVERSE_EVENT_Causality_Result', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ADVERSE_EVENT_Causality_Result', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('adverseEventCausalityResult', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAdverseEventCausalityResult"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var adverseEventCausalityResult = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(adverseEventCausalityResult.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Adverse Event Causality Result has been update.","data":adverseEventCausalityResult.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": adverseEventCausalityResult.error, "application": "Api FHIR", "function": "updateAdverseEventCausalityResult"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('adverseEventCausalityResult', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAdverseEventCausalityResult"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var adverseEventCausalityResult = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(adverseEventCausalityResult.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Adverse Event Causality Result has been update.","data":adverseEventCausalityResult.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": adverseEventCausalityResult.error, "application": "Api FHIR", "function": "updateAdverseEventCausalityResult"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		allergyClinicalStatus: function updateAllergyClinicalStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ALLERGY_CLINICAL_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ALLERGY_CLINICAL_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('allergyClinicalStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAllergyClinicalStatus"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var allergyClinicalStatus = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(allergyClinicalStatus.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Allergy Clinical Status has been update.","data":allergyClinicalStatus.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": allergyClinicalStatus.error, "application": "Api FHIR", "function": "updateAllergyClinicalStatus"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('allergyClinicalStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAllergyClinicalStatus"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var allergyClinicalStatus = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(allergyClinicalStatus.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Allergy Clinical Status has been update.","data":allergyClinicalStatus.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": allergyClinicalStatus.error, "application": "Api FHIR", "function": "updateAllergyClinicalStatus"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		allergyVerificationStatus: function updateAllergyVerificationStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ALLERGY_Verification_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ALLERGY_Verification_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('allergyVerificationStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAllergyVerificationStatus"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var allergyVerificationStatus = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(allergyVerificationStatus.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Allergy Verification Status has been update.","data":allergyVerificationStatus.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": allergyVerificationStatus.error, "application": "Api FHIR", "function": "updateAllergyVerificationStatus"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('allergyVerificationStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAllergyVerificationStatus"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var allergyVerificationStatus = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(allergyVerificationStatus.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Allergy Verification Status has been update.","data":allergyVerificationStatus.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": allergyVerificationStatus.error, "application": "Api FHIR", "function": "updateAllergyVerificationStatus"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		allergyIntoleranceType: function updateAllergyIntoleranceType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ALLERGY_INTOLERANCE_TYPE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ALLERGY_INTOLERANCE_TYPE', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('allergyIntoleranceType', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAllergyIntoleranceType"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var allergyIntoleranceType = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(allergyIntoleranceType.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Allergy Intolerance Type has been update.","data":allergyIntoleranceType.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": allergyIntoleranceType.error, "application": "Api FHIR", "function": "updateAllergyIntoleranceType"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('allergyIntoleranceType', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAllergyIntoleranceType"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var allergyIntoleranceType = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(allergyIntoleranceType.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Allergy Intolerance Type has been update.","data":allergyIntoleranceType.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": allergyIntoleranceType.error, "application": "Api FHIR", "function": "updateAllergyIntoleranceType"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		allergyIntoleranceCategory: function updateAllergyIntoleranceCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ALLERGY_INTOLERANCE_Category', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ALLERGY_INTOLERANCE_Category', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('allergyIntoleranceCategory', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAllergyIntoleranceCategory"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var allergyIntoleranceCategory = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(allergyIntoleranceCategory.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Allergy Intolerance Category has been update.","data":allergyIntoleranceCategory.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": allergyIntoleranceCategory.error, "application": "Api FHIR", "function": "updateAllergyIntoleranceCategory"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('allergyIntoleranceCategory', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAllergyIntoleranceCategory"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var allergyIntoleranceCategory = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(allergyIntoleranceCategory.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Allergy Intolerance Category has been update.","data":allergyIntoleranceCategory.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": allergyIntoleranceCategory.error, "application": "Api FHIR", "function": "updateAllergyIntoleranceCategory"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		allergyIntoleranceCriticality: function updateAllergyIntoleranceCriticality(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ALLERGY_INTOLERANCE_CRITICALITY', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ALLERGY_INTOLERANCE_CRITICALITY', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('allergyIntoleranceCriticality', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAllergyIntoleranceCriticality"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var allergyIntoleranceCriticality = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(allergyIntoleranceCriticality.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Allergy Intolerance Criticality has been update.","data":allergyIntoleranceCriticality.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": allergyIntoleranceCriticality.error, "application": "Api FHIR", "function": "updateAllergyIntoleranceCriticality"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('allergyIntoleranceCriticality', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAllergyIntoleranceCriticality"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var allergyIntoleranceCriticality = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(allergyIntoleranceCriticality.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Allergy Intolerance Criticality has been update.","data":allergyIntoleranceCriticality.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": allergyIntoleranceCriticality.error, "application": "Api FHIR", "function": "updateAllergyIntoleranceCriticality"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		allergyIntoleranceCode: function updateAllergyIntoleranceCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'ALLERGY_INTOLERANCE_CODE', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'ALLERGY_INTOLERANCE_CODE', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('allergyIntoleranceCode', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAllergyIntoleranceCode"});
															}else{
																//cek apakah ada error atau tidak
																var allergyIntoleranceCode = body; 

																//cek apakah ada error atau tidak
																if(allergyIntoleranceCode.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Allergy Intolerance Code has been update.","data":allergyIntoleranceCode.data});
																}else{
																	res.json({"err_code": 3, "err_msg": allergyIntoleranceCode.error, "application": "Api FHIR", "function": "updateAllergyIntoleranceCode"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('allergyIntoleranceCode', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAllergyIntoleranceCode"});
													}else{
														//cek apakah ada error atau tidak
														var allergyIntoleranceCode = body; 

														//cek apakah ada error atau tidak
														if(allergyIntoleranceCode.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Allergy Intolerance Code has been update.","data":allergyIntoleranceCode.data});
														}else{
															res.json({"err_code": 3, "err_msg": allergyIntoleranceCode.error, "application": "Api FHIR", "function": "updateAllergyIntoleranceCode"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		substanceCode: function updateSubstanceCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'SUBSTANCE_CODE', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'SUBSTANCE_CODE', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('substanceCode', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateSubstanceCode"});
															}else{
																//cek apakah ada error atau tidak
																var substanceCode = body; 

																//cek apakah ada error atau tidak
																if(substanceCode.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Substance Code has been update.","data":substanceCode.data});
																}else{
																	res.json({"err_code": 3, "err_msg": substanceCode.error, "application": "Api FHIR", "function": "updateSubstanceCode"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('substanceCode', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateSubstanceCode"});
													}else{
														//cek apakah ada error atau tidak
														var substanceCode = body; 

														//cek apakah ada error atau tidak
														if(substanceCode.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Substance Code has been update.","data":substanceCode.data});
														}else{
															res.json({"err_code": 3, "err_msg": substanceCode.error, "application": "Api FHIR", "function": "updateSubstanceCode"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		clinicalFindings: function updateClinicalFindings(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'CLINICAL_FINDINGS', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'CLINICAL_FINDINGS', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('clinicalFindings', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateClinicalFindings"});
															}else{
																//cek apakah ada error atau tidak
																var clinicalFindings = body; 

																//cek apakah ada error atau tidak
																if(clinicalFindings.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Clinical Findings has been update.","data":clinicalFindings.data});
																}else{
																	res.json({"err_code": 3, "err_msg": clinicalFindings.error, "application": "Api FHIR", "function": "updateClinicalFindings"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('clinicalFindings', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateClinicalFindings"});
													}else{
														//cek apakah ada error atau tidak
														var clinicalFindings = body; 

														//cek apakah ada error atau tidak
														if(clinicalFindings.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Clinical Findings has been update.","data":clinicalFindings.data});
														}else{
															res.json({"err_code": 3, "err_msg": clinicalFindings.error, "application": "Api FHIR", "function": "updateClinicalFindings"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		reactionEventSeverity: function updateReactionEventSeverity(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'REACTION_EVENT_SEVERITY', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'REACTION_EVENT_SEVERITY', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('reactionEventSeverity', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
													  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateReactionEventSeverity"});
													  }else{
													  	//cek apakah ada error atau tidak
													  	var reactionEventSeverity = body; 
													  	
													  	//cek apakah ada error atau tidak
													  	if(reactionEventSeverity.err_code == 0){
														  	res.json({"err_code": 0, "err_msg": "Reaction Event Severity has been update.","data":reactionEventSeverity.data});
													  	}else{
													  		res.json({"err_code": 3, "err_msg": reactionEventSeverity.error, "application": "Api FHIR", "function": "updateReactionEventSeverity"});
													  	}
													  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('reactionEventSeverity', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
											  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateReactionEventSeverity"});
											  }else{
											  	//cek apakah ada error atau tidak
											  	var reactionEventSeverity = body; 
											  	
											  	//cek apakah ada error atau tidak
											  	if(reactionEventSeverity.err_code == 0){
												  	res.json({"err_code": 0, "err_msg": "Reaction Event Severity has been update.","data":reactionEventSeverity.data});
											  	}else{
											  		res.json({"err_code": 3, "err_msg": reactionEventSeverity.error, "application": "Api FHIR", "function": "updateReactionEventSeverity"});
											  	}
											  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		routeCodes: function updateRouteCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'ROUTE_CODES', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'ROUTE_CODES', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('routeCodes', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateRouteCodes"});
															}else{
																//cek apakah ada error atau tidak
																var routeCodes = body; 

																//cek apakah ada error atau tidak
																if(routeCodes.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Route Codes has been update.","data":routeCodes.data});
																}else{
																	res.json({"err_code": 3, "err_msg": routeCodes.error, "application": "Api FHIR", "function": "updateRouteCodes"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('routeCodes', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateRouteCodes"});
													}else{
														//cek apakah ada error atau tidak
														var routeCodes = body; 

														//cek apakah ada error atau tidak
														if(routeCodes.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Route Codes has been update.","data":routeCodes.data});
														}else{
															res.json({"err_code": 3, "err_msg": routeCodes.error, "application": "Api FHIR", "function": "updateRouteCodes"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		carePlanStatus: function updateCarePlanStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'CARE_PLAN_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'CARE_PLAN_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('carePlanStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateCarePlanStatus"});
														}else{
															//cek apakah ada error atau tidak
															var carePlanStatus = body; 

															//cek apakah ada error atau tidak
															if(carePlanStatus.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Care Plan Status has been update.","data":carePlanStatus.data});
															}else{
																res.json({"err_code": 3, "err_msg": carePlanStatus.error, "application": "Api FHIR", "function": "updateCarePlanStatus"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('carePlanStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateCarePlanStatus"});
												}else{
													//cek apakah ada error atau tidak
													var carePlanStatus = body; 

													//cek apakah ada error atau tidak
													if(carePlanStatus.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Care Plan Status has been update.","data":carePlanStatus.data});
													}else{
														res.json({"err_code": 3, "err_msg": carePlanStatus.error, "application": "Api FHIR", "function": "updateCarePlanStatus"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		carePlanIntent: function updateCarePlanIntent(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'CARE_PLAN_INTENT', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'CARE_PLAN_INTENT', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('carePlanIntent', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateCarePlanIntent"});
														}else{
															//cek apakah ada error atau tidak
															var carePlanIntent = body; 

															//cek apakah ada error atau tidak
															if(carePlanIntent.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Care Plan Intent has been update.","data":carePlanIntent.data});
															}else{
																res.json({"err_code": 3, "err_msg": carePlanIntent.error, "application": "Api FHIR", "function": "updateCarePlanIntent"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('carePlanIntent', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateCarePlanIntent"});
												}else{
													//cek apakah ada error atau tidak
													var carePlanIntent = body; 

													//cek apakah ada error atau tidak
													if(carePlanIntent.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Care Plan Intent has been update.","data":carePlanIntent.data});
													}else{
														res.json({"err_code": 3, "err_msg": carePlanIntent.error, "application": "Api FHIR", "function": "updateCarePlanIntent"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		carePlanCategory: function updateCarePlanCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'CARE_PLAN_CATEGORY', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'CARE_PLAN_CATEGORY', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('carePlanCategory', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateCarePlanCategory"});
															}else{
																//cek apakah ada error atau tidak
																var carePlanCategory = body; 

																//cek apakah ada error atau tidak
																if(carePlanCategory.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Care Plan Category has been update.","data":carePlanCategory.data});
																}else{
																	res.json({"err_code": 3, "err_msg": carePlanCategory.error, "application": "Api FHIR", "function": "updateCarePlanCategory"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('carePlanCategory', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateCarePlanCategory"});
													}else{
														//cek apakah ada error atau tidak
														var carePlanCategory = body; 

														//cek apakah ada error atau tidak
														if(carePlanCategory.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Care Plan Category has been update.","data":carePlanCategory.data});
														}else{
															res.json({"err_code": 3, "err_msg": carePlanCategory.error, "application": "Api FHIR", "function": "updateCarePlanCategory"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		carePlanActivityOutcome: function updateCarePlanActivityOutcome(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'CARE_PLAN_ACTIVITY_OUTCOME', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'CARE_PLAN_ACTIVITY_OUTCOME', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('carePlanActivityOutcome', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateCarePlanActivityOutcome"});
															}else{
																//cek apakah ada error atau tidak
																var carePlanActivityOutcome = body; 

																//cek apakah ada error atau tidak
																if(carePlanActivityOutcome.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Care Plan Activity Outcome has been update.","data":carePlanActivityOutcome.data});
																}else{
																	res.json({"err_code": 3, "err_msg": carePlanActivityOutcome.error, "application": "Api FHIR", "function": "updateCarePlanActivityOutcome"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('carePlanActivityOutcome', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateCarePlanActivityOutcome"});
													}else{
														//cek apakah ada error atau tidak
														var carePlanActivityOutcome = body; 

														//cek apakah ada error atau tidak
														if(carePlanActivityOutcome.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Care Plan Activity Outcome has been update.","data":carePlanActivityOutcome.data});
														}else{
															res.json({"err_code": 3, "err_msg": carePlanActivityOutcome.error, "application": "Api FHIR", "function": "updateCarePlanActivityOutcome"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		carePlanActivityCategory: function updateCarePlanActivityCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'CARE_PLAN_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'CARE_PLAN_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('carePlanActivityCategory', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateCarePlanActivityCategory"});
														}else{
															//cek apakah ada error atau tidak
															var carePlanActivityCategory = body; 

															//cek apakah ada error atau tidak
															if(carePlanActivityCategory.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Care Plan Activity Category has been update.","data":carePlanActivityCategory.data});
															}else{
																res.json({"err_code": 3, "err_msg": carePlanActivityCategory.error, "application": "Api FHIR", "function": "updateCarePlanActivityCategory"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('carePlanActivityCategory', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateCarePlanActivityCategory"});
												}else{
													//cek apakah ada error atau tidak
													var carePlanActivityCategory = body; 

													//cek apakah ada error atau tidak
													if(carePlanActivityCategory.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Care Plan Activity Category has been update.","data":carePlanActivityCategory.data});
													}else{
														res.json({"err_code": 3, "err_msg": carePlanActivityCategory.error, "application": "Api FHIR", "function": "updateCarePlanActivityCategory"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		carePlanActivity: function updateCarePlanActivity(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'CARE_PLAN_ACTIVITY', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'CARE_PLAN_ACTIVITY', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('carePlanActivity', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateCarePlanActivity"});
															}else{
																//cek apakah ada error atau tidak
																var carePlanActivity = body; 

																//cek apakah ada error atau tidak
																if(carePlanActivity.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Care Plan Activity has been update.","data":carePlanActivity.data});
																}else{
																	res.json({"err_code": 3, "err_msg": carePlanActivity.error, "application": "Api FHIR", "function": "updateCarePlanActivity"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('carePlanActivity', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateCarePlanActivity"});
													}else{
														//cek apakah ada error atau tidak
														var carePlanActivity = body; 

														//cek apakah ada error atau tidak
														if(carePlanActivity.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Care Plan Activity has been update.","data":carePlanActivity.data});
														}else{
															res.json({"err_code": 3, "err_msg": carePlanActivity.error, "application": "Api FHIR", "function": "updateCarePlanActivity"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		activityReason: function updateActivityReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'ACTIVITY_REASON', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'ACTIVITY_REASON', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('activityReason', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateActivityReason"});
															}else{
																//cek apakah ada error atau tidak
																var activityReason = body; 

																//cek apakah ada error atau tidak
																if(activityReason.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Activity Reason has been update.","data":activityReason.data});
																}else{
																	res.json({"err_code": 3, "err_msg": activityReason.error, "application": "Api FHIR", "function": "updateActivityReason"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('activityReason', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateActivityReason"});
													}else{
														//cek apakah ada error atau tidak
														var activityReason = body; 

														//cek apakah ada error atau tidak
														if(activityReason.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Activity Reason has been update.","data":activityReason.data});
														}else{
															res.json({"err_code": 3, "err_msg": activityReason.error, "application": "Api FHIR", "function": "updateActivityReason"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		carePlanActivityStatus: function updateCarePlanActivityStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'CARE_PLAN_ACTIVITY_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'CARE_PLAN_ACTIVITY_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('carePlanActivityStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateCarePlanActivityStatus"});
														}else{
															//cek apakah ada error atau tidak
															var carePlanActivityStatus = body; 

															//cek apakah ada error atau tidak
															if(carePlanActivityStatus.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Care Plan Activity Status has been update.","data":carePlanActivityStatus.data});
															}else{
																res.json({"err_code": 3, "err_msg": carePlanActivityStatus.error, "application": "Api FHIR", "function": "updateCarePlanActivityStatus"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('carePlanActivityStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateCarePlanActivityStatus"});
												}else{
													//cek apakah ada error atau tidak
													var carePlanActivityStatus = body; 

													//cek apakah ada error atau tidak
													if(carePlanActivityStatus.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Care Plan Activity Status has been update.","data":carePlanActivityStatus.data});
													}else{
														res.json({"err_code": 3, "err_msg": carePlanActivityStatus.error, "application": "Api FHIR", "function": "updateCarePlanActivityStatus"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		medicationCodes: function updateMedicationCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'MEDICATION_CODES', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'MEDICATION_CODES', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('medicationCodes', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationCodes"});
															}else{
																//cek apakah ada error atau tidak
																var medicationCodes = body; 

																//cek apakah ada error atau tidak
																if(medicationCodes.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Medication Codes has been update.","data":medicationCodes.data});
																}else{
																	res.json({"err_code": 3, "err_msg": medicationCodes.error, "application": "Api FHIR", "function": "updateMedicationCodes"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('medicationCodes', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationCodes"});
													}else{
														//cek apakah ada error atau tidak
														var medicationCodes = body; 

														//cek apakah ada error atau tidak
														if(medicationCodes.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Medication Codes has been update.","data":medicationCodes.data});
														}else{
															res.json({"err_code": 3, "err_msg": medicationCodes.error, "application": "Api FHIR", "function": "updateMedicationCodes"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		careTeamStatus: function updateCareTeamStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'CARE_TEAM_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'CARE_TEAM_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('careTeamStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateCareTeamStatus"});
														}else{
															//cek apakah ada error atau tidak
															var careTeamStatus = body; 

															//cek apakah ada error atau tidak
															if(careTeamStatus.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Care Team Status has been update.","data":careTeamStatus.data});
															}else{
																res.json({"err_code": 3, "err_msg": careTeamStatus.error, "application": "Api FHIR", "function": "updateCareTeamStatus"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('careTeamStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateCareTeamStatus"});
												}else{
													//cek apakah ada error atau tidak
													var careTeamStatus = body; 

													//cek apakah ada error atau tidak
													if(careTeamStatus.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Care Team Status has been update.","data":careTeamStatus.data});
													}else{
														res.json({"err_code": 3, "err_msg": careTeamStatus.error, "application": "Api FHIR", "function": "updateCareTeamStatus"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		careTeamCategory: function updateCareTeamCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'CARE_TEAM_CATEGORY', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'CARE_TEAM_CATEGORY', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('careTeamCategory', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateCareTeamCategory"});
														}else{
															//cek apakah ada error atau tidak
															var careTeamCategory = body; 

															//cek apakah ada error atau tidak
															if(careTeamCategory.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Care Team Category has been update.","data":careTeamCategory.data});
															}else{
																res.json({"err_code": 3, "err_msg": careTeamCategory.error, "application": "Api FHIR", "function": "updateCareTeamCategory"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('careTeamCategory', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateCareTeamCategory"});
												}else{
													//cek apakah ada error atau tidak
													var careTeamCategory = body; 

													//cek apakah ada error atau tidak
													if(careTeamCategory.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Care Team Category has been update.","data":careTeamCategory.data});
													}else{
														res.json({"err_code": 3, "err_msg": careTeamCategory.error, "application": "Api FHIR", "function": "updateCareTeamCategory"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		participantRole: function updateParticipantRole(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'PARTICIPANT_ROLE', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'PARTICIPANT_ROLE', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('participantRole', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateParticipantRole"});
															}else{
																//cek apakah ada error atau tidak
																var participantRole = body; 

																//cek apakah ada error atau tidak
																if(participantRole.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Participant Role has been update.","data":participantRole.data});
																}else{
																	res.json({"err_code": 3, "err_msg": participantRole.error, "application": "Api FHIR", "function": "updateParticipantRole"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('participantRole', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateParticipantRole"});
													}else{
														//cek apakah ada error atau tidak
														var participantRole = body; 

														//cek apakah ada error atau tidak
														if(participantRole.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Participant Role has been update.","data":participantRole.data});
														}else{
															res.json({"err_code": 3, "err_msg": participantRole.error, "application": "Api FHIR", "function": "updateParticipantRole"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		clinicalImpressionStatus: function updateClinicalImpressionStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'CLINICAL_IMPRESSION_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'CLINICAL_IMPRESSION_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('clinicalImpressionStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateClinicalImpressionStatus"});
														}else{
															//cek apakah ada error atau tidak
															var clinicalImpressionStatus = body; 

															//cek apakah ada error atau tidak
															if(clinicalImpressionStatus.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Clinical Impression Status has been update.","data":clinicalImpressionStatus.data});
															}else{
																res.json({"err_code": 3, "err_msg": clinicalImpressionStatus.error, "application": "Api FHIR", "function": "updateClinicalImpressionStatus"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('clinicalImpressionStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateClinicalImpressionStatus"});
												}else{
													//cek apakah ada error atau tidak
													var clinicalImpressionStatus = body; 

													//cek apakah ada error atau tidak
													if(clinicalImpressionStatus.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Clinical Impression Status has been update.","data":clinicalImpressionStatus.data});
													}else{
														res.json({"err_code": 3, "err_msg": clinicalImpressionStatus.error, "application": "Api FHIR", "function": "updateClinicalImpressionStatus"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		investigationSets: function updateInvestigationSets(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'INVESTIGATION_SETS', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'INVESTIGATION_SETS', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('investigationSets', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateInvestigationSets"});
															}else{
																//cek apakah ada error atau tidak
																var investigationSets = body; 

																//cek apakah ada error atau tidak
																if(investigationSets.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Investigation Sets has been update.","data":investigationSets.data});
																}else{
																	res.json({"err_code": 3, "err_msg": investigationSets.error, "application": "Api FHIR", "function": "updateInvestigationSets"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('investigationSets', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateInvestigationSets"});
													}else{
														//cek apakah ada error atau tidak
														var investigationSets = body; 

														//cek apakah ada error atau tidak
														if(investigationSets.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Investigation Sets has been update.","data":investigationSets.data});
														}else{
															res.json({"err_code": 3, "err_msg": investigationSets.error, "application": "Api FHIR", "function": "updateInvestigationSets"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		clinicalimpressionPrognosis: function updateClinicalimpressionPrognosis(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'CLINICALIMPRESSION_PROGNOSIS', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'CLINICALIMPRESSION_PROGNOSIS', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('clinicalimpressionPrognosis', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateClinicalimpressionPrognosis"});
															}else{
																//cek apakah ada error atau tidak
																var clinicalimpressionPrognosis = body; 

																//cek apakah ada error atau tidak
																if(clinicalimpressionPrognosis.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Clinicalimpression Prognosis has been update.","data":clinicalimpressionPrognosis.data});
																}else{
																	res.json({"err_code": 3, "err_msg": clinicalimpressionPrognosis.error, "application": "Api FHIR", "function": "updateClinicalimpressionPrognosis"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('clinicalimpressionPrognosis', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateClinicalimpressionPrognosis"});
													}else{
														//cek apakah ada error atau tidak
														var clinicalimpressionPrognosis = body; 

														//cek apakah ada error atau tidak
														if(clinicalimpressionPrognosis.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Clinicalimpression Prognosis has been update.","data":clinicalimpressionPrognosis.data});
														}else{
															res.json({"err_code": 3, "err_msg": clinicalimpressionPrognosis.error, "application": "Api FHIR", "function": "updateClinicalimpressionPrognosis"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		conditionClinical: function updateConditionClinical(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'CONDITION_CLINICAL', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'CONDITION_CLINICAL', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('conditionClinical', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateConditionClinical"});
														}else{
															//cek apakah ada error atau tidak
															var conditionClinical = body; 

															//cek apakah ada error atau tidak
															if(conditionClinical.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Condition Clinical has been update.","data":conditionClinical.data});
															}else{
																res.json({"err_code": 3, "err_msg": conditionClinical.error, "application": "Api FHIR", "function": "updateConditionClinical"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('conditionClinical', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateConditionClinical"});
												}else{
													//cek apakah ada error atau tidak
													var conditionClinical = body; 

													//cek apakah ada error atau tidak
													if(conditionClinical.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Condition Clinical has been update.","data":conditionClinical.data});
													}else{
														res.json({"err_code": 3, "err_msg": conditionClinical.error, "application": "Api FHIR", "function": "updateConditionClinical"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		conditionVerStatus: function updateConditionVerStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'CONDITION_VER_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'CONDITION_VER_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('conditionVerStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateConditionVerStatus"});
														}else{
															//cek apakah ada error atau tidak
															var conditionVerStatus = body; 

															//cek apakah ada error atau tidak
															if(conditionVerStatus.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Condition Ver Status has been update.","data":conditionVerStatus.data});
															}else{
																res.json({"err_code": 3, "err_msg": conditionVerStatus.error, "application": "Api FHIR", "function": "updateConditionVerStatus"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('conditionVerStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateConditionVerStatus"});
												}else{
													//cek apakah ada error atau tidak
													var conditionVerStatus = body; 

													//cek apakah ada error atau tidak
													if(conditionVerStatus.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Condition Ver Status has been update.","data":conditionVerStatus.data});
													}else{
														res.json({"err_code": 3, "err_msg": conditionVerStatus.error, "application": "Api FHIR", "function": "updateConditionVerStatus"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		conditionCategory: function updateConditionCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'CONDITION_CATEGORY', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'CONDITION_CATEGORY', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('conditionCategory', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateConditionCategory"});
														}else{
															//cek apakah ada error atau tidak
															var conditionCategory = body; 

															//cek apakah ada error atau tidak
															if(conditionCategory.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Condition Category has been update.","data":conditionCategory.data});
															}else{
																res.json({"err_code": 3, "err_msg": conditionCategory.error, "application": "Api FHIR", "function": "updateConditionCategory"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('conditionCategory', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateConditionCategory"});
												}else{
													//cek apakah ada error atau tidak
													var conditionCategory = body; 

													//cek apakah ada error atau tidak
													if(conditionCategory.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Condition Category has been update.","data":conditionCategory.data});
													}else{
														res.json({"err_code": 3, "err_msg": conditionCategory.error, "application": "Api FHIR", "function": "updateConditionCategory"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		conditionSeverity: function updateConditionSeverity(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'CONDITION_SEVERITY', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'CONDITION_SEVERITY', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('conditionSeverity', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateConditionSeverity"});
															}else{
																//cek apakah ada error atau tidak
																var conditionSeverity = body; 

																//cek apakah ada error atau tidak
																if(conditionSeverity.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Condition Severity has been update.","data":conditionSeverity.data});
																}else{
																	res.json({"err_code": 3, "err_msg": conditionSeverity.error, "application": "Api FHIR", "function": "updateConditionSeverity"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('conditionSeverity', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateConditionSeverity"});
													}else{
														//cek apakah ada error atau tidak
														var conditionSeverity = body; 

														//cek apakah ada error atau tidak
														if(conditionSeverity.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Condition Severity has been update.","data":conditionSeverity.data});
														}else{
															res.json({"err_code": 3, "err_msg": conditionSeverity.error, "application": "Api FHIR", "function": "updateConditionSeverity"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		conditionCode: function updateConditionCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'CONDITION_CODE', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'CONDITION_CODE', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('conditionCode', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateConditionCode"});
															}else{
																//cek apakah ada error atau tidak
																var conditionCode = body; 

																//cek apakah ada error atau tidak
																if(conditionCode.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Condition Code has been update.","data":conditionCode.data});
																}else{
																	res.json({"err_code": 3, "err_msg": conditionCode.error, "application": "Api FHIR", "function": "updateConditionCode"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('conditionCode', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateConditionCode"});
													}else{
														//cek apakah ada error atau tidak
														var conditionCode = body; 

														//cek apakah ada error atau tidak
														if(conditionCode.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Condition Code has been update.","data":conditionCode.data});
														}else{
															res.json({"err_code": 3, "err_msg": conditionCode.error, "application": "Api FHIR", "function": "updateConditionCode"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		bodySite: function updateBodySite(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'BODY_SITE', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'BODY_SITE', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('bodySite', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateBodySite"});
															}else{
																//cek apakah ada error atau tidak
																var bodySite = body; 

																//cek apakah ada error atau tidak
																if(bodySite.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Body Site has been update.","data":bodySite.data});
																}else{
																	res.json({"err_code": 3, "err_msg": bodySite.error, "application": "Api FHIR", "function": "updateBodySite"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('bodySite', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateBodySite"});
													}else{
														//cek apakah ada error atau tidak
														var bodySite = body; 

														//cek apakah ada error atau tidak
														if(bodySite.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Body Site has been update.","data":bodySite.data});
														}else{
															res.json({"err_code": 3, "err_msg": bodySite.error, "application": "Api FHIR", "function": "updateBodySite"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		conditionStage: function updateConditionStage(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'CONDITION_STAGE', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'CONDITION_STAGE', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('conditionStage', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateConditionStage"});
															}else{
																//cek apakah ada error atau tidak
																var conditionStage = body; 

																//cek apakah ada error atau tidak
																if(conditionStage.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Condition Stage has been update.","data":conditionStage.data});
																}else{
																	res.json({"err_code": 3, "err_msg": conditionStage.error, "application": "Api FHIR", "function": "updateConditionStage"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('conditionStage', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateConditionStage"});
													}else{
														//cek apakah ada error atau tidak
														var conditionStage = body; 

														//cek apakah ada error atau tidak
														if(conditionStage.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Condition Stage has been update.","data":conditionStage.data});
														}else{
															res.json({"err_code": 3, "err_msg": conditionStage.error, "application": "Api FHIR", "function": "updateConditionStage"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		manifestationOrSymptom: function updateManifestationOrSymptom(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'MANIFESTATION_OR_SYMPTOM', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'MANIFESTATION_OR_SYMPTOM', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('manifestationOrSymptom', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateManifestationOrSymptom"});
															}else{
																//cek apakah ada error atau tidak
																var manifestationOrSymptom = body; 

																//cek apakah ada error atau tidak
																if(manifestationOrSymptom.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Manifestation Or Symptom has been update.","data":manifestationOrSymptom.data});
																}else{
																	res.json({"err_code": 3, "err_msg": manifestationOrSymptom.error, "application": "Api FHIR", "function": "updateManifestationOrSymptom"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('manifestationOrSymptom', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateManifestationOrSymptom"});
													}else{
														//cek apakah ada error atau tidak
														var manifestationOrSymptom = body; 

														//cek apakah ada error atau tidak
														if(manifestationOrSymptom.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Manifestation Or Symptom has been update.","data":manifestationOrSymptom.data});
														}else{
															res.json({"err_code": 3, "err_msg": manifestationOrSymptom.error, "application": "Api FHIR", "function": "updateManifestationOrSymptom"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		observationStatus: function updateObservationStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'OBSERVATION_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'OBSERVATION_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('observationStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateObservationStatus"});
														}else{
															//cek apakah ada error atau tidak
															var observationStatus = body; 

															//cek apakah ada error atau tidak
															if(observationStatus.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Observation Status has been update.","data":observationStatus.data});
															}else{
																res.json({"err_code": 3, "err_msg": observationStatus.error, "application": "Api FHIR", "function": "updateObservationStatus"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('observationStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateObservationStatus"});
												}else{
													//cek apakah ada error atau tidak
													var observationStatus = body; 

													//cek apakah ada error atau tidak
													if(observationStatus.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Observation Status has been update.","data":observationStatus.data});
													}else{
														res.json({"err_code": 3, "err_msg": observationStatus.error, "application": "Api FHIR", "function": "updateObservationStatus"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		detectedissueCategory: function updateDetectedissueCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toUpperCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'DETECTEDISSUE_CATEGORY ', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'DETECTEDISSUE_CATEGORY ', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('detectedissueCategory', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDetectedissueCategory"});
														}else{
															//cek apakah ada error atau tidak
															var detectedissueCategory = body; 

															//cek apakah ada error atau tidak
															if(detectedissueCategory.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Detectedissue Category has been update.","data":detectedissueCategory.data});
															}else{
																res.json({"err_code": 3, "err_msg": detectedissueCategory.error, "application": "Api FHIR", "function": "updateDetectedissueCategory"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('detectedissueCategory', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDetectedissueCategory"});
												}else{
													//cek apakah ada error atau tidak
													var detectedissueCategory = body; 

													//cek apakah ada error atau tidak
													if(detectedissueCategory.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Detectedissue Category has been update.","data":detectedissueCategory.data});
													}else{
														res.json({"err_code": 3, "err_msg": detectedissueCategory.error, "application": "Api FHIR", "function": "updateDetectedissueCategory"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		detectedissueSeverity: function updateDetectedissueSeverity(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'DETECTEDISSUE_SEVERITY', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'DETECTEDISSUE_SEVERITY', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('detectedissueSeverity', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDetectedissueSeverity"});
														}else{
															//cek apakah ada error atau tidak
															var detectedissueSeverity = body; 

															//cek apakah ada error atau tidak
															if(detectedissueSeverity.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Detectedissue Severity has been update.","data":detectedissueSeverity.data});
															}else{
																res.json({"err_code": 3, "err_msg": detectedissueSeverity.error, "application": "Api FHIR", "function": "updateDetectedissueSeverity"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('detectedissueSeverity', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDetectedissueSeverity"});
												}else{
													//cek apakah ada error atau tidak
													var detectedissueSeverity = body; 

													//cek apakah ada error atau tidak
													if(detectedissueSeverity.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Detectedissue Severity has been update.","data":detectedissueSeverity.data});
													}else{
														res.json({"err_code": 3, "err_msg": detectedissueSeverity.error, "application": "Api FHIR", "function": "updateDetectedissueSeverity"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		detectedissueMitigationAction: function updateDetectedissueMitigationAction(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'DETECTEDISSUE_MITIGATION_ACTION', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'DETECTEDISSUE_MITIGATION_ACTION', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('detectedissueMitigationAction', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDetectedissueMitigationAction"});
														}else{
															//cek apakah ada error atau tidak
															var detectedissueMitigationAction = body; 

															//cek apakah ada error atau tidak
															if(detectedissueMitigationAction.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Detectedissue Mitigation Action has been update.","data":detectedissueMitigationAction.data});
															}else{
																res.json({"err_code": 3, "err_msg": detectedissueMitigationAction.error, "application": "Api FHIR", "function": "updateDetectedissueMitigationAction"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('detectedissueMitigationAction', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDetectedissueMitigationAction"});
												}else{
													//cek apakah ada error atau tidak
													var detectedissueMitigationAction = body; 

													//cek apakah ada error atau tidak
													if(detectedissueMitigationAction.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Detectedissue Mitigation Action has been update.","data":detectedissueMitigationAction.data});
													}else{
														res.json({"err_code": 3, "err_msg": detectedissueMitigationAction.error, "application": "Api FHIR", "function": "updateDetectedissueMitigationAction"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		historyStatus: function updateHistoryStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'HISTORY_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'HISTORY_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('historyStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateHistoryStatus"});
														}else{
															//cek apakah ada error atau tidak
															var historyStatus = body; 

															//cek apakah ada error atau tidak
															if(historyStatus.err_code == 0){
																res.json({"err_code": 0, "err_msg": "History Status has been update.","data":historyStatus.data});
															}else{
																res.json({"err_code": 3, "err_msg": historyStatus.error, "application": "Api FHIR", "function": "updateHistoryStatus"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('historyStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateHistoryStatus"});
												}else{
													//cek apakah ada error atau tidak
													var historyStatus = body; 

													//cek apakah ada error atau tidak
													if(historyStatus.err_code == 0){
														res.json({"err_code": 0, "err_msg": "History Status has been update.","data":historyStatus.data});
													}else{
														res.json({"err_code": 3, "err_msg": historyStatus.error, "application": "Api FHIR", "function": "updateHistoryStatus"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		historyNotDoneReason: function updateHistoryNotDoneReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'HISTORY_NOT_DONE_REASON', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'HISTORY_NOT_DONE_REASON', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('historyNotDoneReason', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateHistoryNotDoneReason"});
														}else{
															//cek apakah ada error atau tidak
															var historyNotDoneReason = body; 

															//cek apakah ada error atau tidak
															if(historyNotDoneReason.err_code == 0){
																res.json({"err_code": 0, "err_msg": "History Not Done Reason has been update.","data":historyNotDoneReason.data});
															}else{
																res.json({"err_code": 3, "err_msg": historyNotDoneReason.error, "application": "Api FHIR", "function": "updateHistoryNotDoneReason"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('historyNotDoneReason', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateHistoryNotDoneReason"});
												}else{
													//cek apakah ada error atau tidak
													var historyNotDoneReason = body; 

													//cek apakah ada error atau tidak
													if(historyNotDoneReason.err_code == 0){
														res.json({"err_code": 0, "err_msg": "History Not Done Reason has been update.","data":historyNotDoneReason.data});
													}else{
														res.json({"err_code": 3, "err_msg": historyNotDoneReason.error, "application": "Api FHIR", "function": "updateHistoryNotDoneReason"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		familyMember: function updateFamilyMember(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toUpperCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'FAMILY_MEMBER', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'FAMILY_MEMBER', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('familyMember', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateFamilyMember"});
														}else{
															//cek apakah ada error atau tidak
															var familyMember = body; 

															//cek apakah ada error atau tidak
															if(familyMember.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Family Member has been update.","data":familyMember.data});
															}else{
																res.json({"err_code": 3, "err_msg": familyMember.error, "application": "Api FHIR", "function": "updateFamilyMember"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('familyMember', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateFamilyMember"});
												}else{
													//cek apakah ada error atau tidak
													var familyMember = body; 

													//cek apakah ada error atau tidak
													if(familyMember.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Family Member has been update.","data":familyMember.data});
													}else{
														res.json({"err_code": 3, "err_msg": familyMember.error, "application": "Api FHIR", "function": "updateFamilyMember"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		conditionOutcome: function updateConditionOutcome(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'CONDITION_OUTCOME', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'CONDITION_OUTCOME', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('conditionOutcome', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateConditionOutcome"});
															}else{
																//cek apakah ada error atau tidak
																var conditionOutcome = body; 

																//cek apakah ada error atau tidak
																if(conditionOutcome.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Condition Outcome has been update.","data":conditionOutcome.data});
																}else{
																	res.json({"err_code": 3, "err_msg": conditionOutcome.error, "application": "Api FHIR", "function": "updateConditionOutcome"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('conditionOutcome', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateConditionOutcome"});
													}else{
														//cek apakah ada error atau tidak
														var conditionOutcome = body; 

														//cek apakah ada error atau tidak
														if(conditionOutcome.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Condition Outcome has been update.","data":conditionOutcome.data});
														}else{
															res.json({"err_code": 3, "err_msg": conditionOutcome.error, "application": "Api FHIR", "function": "updateConditionOutcome"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		riskProbability: function updateRiskProbability(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'RISK_PROBABILITY', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'RISK_PROBABILITY', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('riskProbability', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateRiskProbability"});
														}else{
															//cek apakah ada error atau tidak
															var riskProbability = body; 

															//cek apakah ada error atau tidak
															if(riskProbability.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Risk Probability has been update.","data":riskProbability.data});
															}else{
																res.json({"err_code": 3, "err_msg": riskProbability.error, "application": "Api FHIR", "function": "updateRiskProbability"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('riskProbability', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateRiskProbability"});
												}else{
													//cek apakah ada error atau tidak
													var riskProbability = body; 

													//cek apakah ada error atau tidak
													if(riskProbability.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Risk Probability has been update.","data":riskProbability.data});
													}else{
														res.json({"err_code": 3, "err_msg": riskProbability.error, "application": "Api FHIR", "function": "updateRiskProbability"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		goalStatus: function updateGoalStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'GOAL_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'GOAL_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('goalStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateGoalStatus"});
														}else{
															//cek apakah ada error atau tidak
															var goalStatus = body; 

															//cek apakah ada error atau tidak
															if(goalStatus.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Goal Status has been update.","data":goalStatus.data});
															}else{
																res.json({"err_code": 3, "err_msg": goalStatus.error, "application": "Api FHIR", "function": "updateGoalStatus"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('goalStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateGoalStatus"});
												}else{
													//cek apakah ada error atau tidak
													var goalStatus = body; 

													//cek apakah ada error atau tidak
													if(goalStatus.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Goal Status has been update.","data":goalStatus.data});
													}else{
														res.json({"err_code": 3, "err_msg": goalStatus.error, "application": "Api FHIR", "function": "updateGoalStatus"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		goalCategory: function updateGoalCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'GOAL_CATEGORY', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'GOAL_CATEGORY', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('goalCategory', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateGoalCategory"});
														}else{
															//cek apakah ada error atau tidak
															var goalCategory = body; 

															//cek apakah ada error atau tidak
															if(goalCategory.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Goal Category has been update.","data":goalCategory.data});
															}else{
																res.json({"err_code": 3, "err_msg": goalCategory.error, "application": "Api FHIR", "function": "updateGoalCategory"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('goalCategory', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateGoalCategory"});
												}else{
													//cek apakah ada error atau tidak
													var goalCategory = body; 

													//cek apakah ada error atau tidak
													if(goalCategory.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Goal Category has been update.","data":goalCategory.data});
													}else{
														res.json({"err_code": 3, "err_msg": goalCategory.error, "application": "Api FHIR", "function": "updateGoalCategory"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		goalPriority: function updateGoalPriority(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'GOAL_PRIORITY', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'GOAL_PRIORITY', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('goalPriority', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateGoalPriority"});
														}else{
															//cek apakah ada error atau tidak
															var goalPriority = body; 

															//cek apakah ada error atau tidak
															if(goalPriority.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Goal Priority has been update.","data":goalPriority.data});
															}else{
																res.json({"err_code": 3, "err_msg": goalPriority.error, "application": "Api FHIR", "function": "updateGoalPriority"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('goalPriority', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateGoalPriority"});
												}else{
													//cek apakah ada error atau tidak
													var goalPriority = body; 

													//cek apakah ada error atau tidak
													if(goalPriority.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Goal Priority has been update.","data":goalPriority.data});
													}else{
														res.json({"err_code": 3, "err_msg": goalPriority.error, "application": "Api FHIR", "function": "updateGoalPriority"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		goalStartEvent: function updateGoalStartEvent(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'GOAL_START_EVENT', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'GOAL_START_EVENT', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('goalStartEvent', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateGoalStartEvent"});
															}else{
																//cek apakah ada error atau tidak
																var goalStartEvent = body; 

																//cek apakah ada error atau tidak
																if(goalStartEvent.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Goal Start Event has been update.","data":goalStartEvent.data});
																}else{
																	res.json({"err_code": 3, "err_msg": goalStartEvent.error, "application": "Api FHIR", "function": "updateGoalStartEvent"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('goalStartEvent', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateGoalStartEvent"});
													}else{
														//cek apakah ada error atau tidak
														var goalStartEvent = body; 

														//cek apakah ada error atau tidak
														if(goalStartEvent.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Goal Start Event has been update.","data":goalStartEvent.data});
														}else{
															res.json({"err_code": 3, "err_msg": goalStartEvent.error, "application": "Api FHIR", "function": "updateGoalStartEvent"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		observationCodes: function updateObservationCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'OBSERVATION_CODES', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'OBSERVATION_CODES', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('observationCodes', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateObservationCodes"});
														}else{
															//cek apakah ada error atau tidak
															var observationCodes = body; 

															//cek apakah ada error atau tidak
															if(observationCodes.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Observation Codes has been update.","data":observationCodes.data});
															}else{
																res.json({"err_code": 3, "err_msg": observationCodes.error, "application": "Api FHIR", "function": "updateObservationCodes"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('observationCodes', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateObservationCodes"});
												}else{
													//cek apakah ada error atau tidak
													var observationCodes = body; 

													//cek apakah ada error atau tidak
													if(observationCodes.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Observation Codes has been update.","data":observationCodes.data});
													}else{
														res.json({"err_code": 3, "err_msg": observationCodes.error, "application": "Api FHIR", "function": "updateObservationCodes"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		eventStatus: function updateEventStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}
			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'EVENT_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'EVENT_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//Result, endpoint, params, options, callback
												ApiFHIR.put('eventStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
													if(error){
															res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateEventStatus"});
														}else{
															//cek apakah ada error atau tidak
															var eventStatus = body; 

															//cek apakah ada error atau tidak
															if(eventStatus.err_code == 0){
																res.json({"err_code": 0, "err_msg": "Event Status has been update.","data":eventStatus.data});
															}else{
																res.json({"err_code": 3, "err_msg": eventStatus.error, "application": "Api FHIR", "function": "updateEventStatus"});
															}
														}
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('eventStatus', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
											if(error){
													res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateEventStatus"});
												}else{
													//cek apakah ada error atau tidak
													var eventStatus = body; 

													//cek apakah ada error atau tidak
													if(eventStatus.err_code == 0){
														res.json({"err_code": 0, "err_msg": "Event Status has been update.","data":eventStatus.data});
													}else{
														res.json({"err_code": 3, "err_msg": eventStatus.error, "application": "Api FHIR", "function": "updateEventStatus"});
													}
												}
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		procedureNotPerformedReason: function updateProcedureNotPerformedReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'PROCEDURE_NOT_PERFORMED_REASON', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'PROCEDURE_NOT_PERFORMED_REASON', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('procedureNotPerformedReason', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateProcedureNotPerformedReason"});
															}else{
																//cek apakah ada error atau tidak
																var procedureNotPerformedReason = body; 

																//cek apakah ada error atau tidak
																if(procedureNotPerformedReason.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Procedure Not Performed Reason has been update.","data":procedureNotPerformedReason.data});
																}else{
																	res.json({"err_code": 3, "err_msg": procedureNotPerformedReason.error, "application": "Api FHIR", "function": "updateProcedureNotPerformedReason"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('procedureNotPerformedReason', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateProcedureNotPerformedReason"});
													}else{
														//cek apakah ada error atau tidak
														var procedureNotPerformedReason = body; 

														//cek apakah ada error atau tidak
														if(procedureNotPerformedReason.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Procedure Not Performed Reason has been update.","data":procedureNotPerformedReason.data});
														}else{
															res.json({"err_code": 3, "err_msg": procedureNotPerformedReason.error, "application": "Api FHIR", "function": "updateProcedureNotPerformedReason"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		procedureCategory: function updateProcedureCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'PROCEDURE_CATEGORY', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'PROCEDURE_CATEGORY', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('procedureCategory', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateProcedureCategory"});
															}else{
																//cek apakah ada error atau tidak
																var procedureCategory = body; 

																//cek apakah ada error atau tidak
																if(procedureCategory.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Procedure Category has been update.","data":procedureCategory.data});
																}else{
																	res.json({"err_code": 3, "err_msg": procedureCategory.error, "application": "Api FHIR", "function": "updateProcedureCategory"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('procedureCategory', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateProcedureCategory"});
													}else{
														//cek apakah ada error atau tidak
														var procedureCategory = body; 

														//cek apakah ada error atau tidak
														if(procedureCategory.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Procedure Category has been update.","data":procedureCategory.data});
														}else{
															res.json({"err_code": 3, "err_msg": procedureCategory.error, "application": "Api FHIR", "function": "updateProcedureCategory"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		procedureCode: function updateProcedureCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'PROCEDURE_CODE', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'PROCEDURE_CODE', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('procedureCode', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateProcedureCode"});
															}else{
																//cek apakah ada error atau tidak
																var procedureCode = body; 

																//cek apakah ada error atau tidak
																if(procedureCode.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Procedure Code has been update.","data":procedureCode.data});
																}else{
																	res.json({"err_code": 3, "err_msg": procedureCode.error, "application": "Api FHIR", "function": "updateProcedureCode"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('procedureCode', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateProcedureCode"});
													}else{
														//cek apakah ada error atau tidak
														var procedureCode = body; 

														//cek apakah ada error atau tidak
														if(procedureCode.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Procedure Code has been update.","data":procedureCode.data});
														}else{
															res.json({"err_code": 3, "err_msg": procedureCode.error, "application": "Api FHIR", "function": "updateProcedureCode"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		performerRole: function updatePerformerRole(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'PERFORMER_ROLE', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'PERFORMER_ROLE', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('performerRole', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updatePerformerRole"});
															}else{
																//cek apakah ada error atau tidak
																var performerRole = body; 

																//cek apakah ada error atau tidak
																if(performerRole.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Performer Role has been update.","data":performerRole.data});
																}else{
																	res.json({"err_code": 3, "err_msg": performerRole.error, "application": "Api FHIR", "function": "updatePerformerRole"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('performerRole', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updatePerformerRole"});
													}else{
														//cek apakah ada error atau tidak
														var performerRole = body; 

														//cek apakah ada error atau tidak
														if(performerRole.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Performer Role has been update.","data":performerRole.data});
														}else{
															res.json({"err_code": 3, "err_msg": performerRole.error, "application": "Api FHIR", "function": "updatePerformerRole"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		procedureReason: function updateProcedureReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'PROCEDURE_REASON', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'PROCEDURE_REASON', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('procedureReason', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateProcedureReason"});
															}else{
																//cek apakah ada error atau tidak
																var procedureReason = body; 

																//cek apakah ada error atau tidak
																if(procedureReason.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Procedure Reason has been update.","data":procedureReason.data});
																}else{
																	res.json({"err_code": 3, "err_msg": procedureReason.error, "application": "Api FHIR", "function": "updateProcedureReason"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('procedureReason', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateProcedureReason"});
													}else{
														//cek apakah ada error atau tidak
														var procedureReason = body; 

														//cek apakah ada error atau tidak
														if(procedureReason.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Procedure Reason has been update.","data":procedureReason.data});
														}else{
															res.json({"err_code": 3, "err_msg": procedureReason.error, "application": "Api FHIR", "function": "updateProcedureReason"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		procedureOutcome: function updateProcedureOutcome(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'PROCEDURE_OUTCOME', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'PROCEDURE_OUTCOME', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('procedureOutcome', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateProcedureOutcome"});
															}else{
																//cek apakah ada error atau tidak
																var procedureOutcome = body; 

																//cek apakah ada error atau tidak
																if(procedureOutcome.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Procedure Outcome has been update.","data":procedureOutcome.data});
																}else{
																	res.json({"err_code": 3, "err_msg": procedureOutcome.error, "application": "Api FHIR", "function": "updateProcedureOutcome"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('procedureOutcome', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateProcedureOutcome"});
													}else{
														//cek apakah ada error atau tidak
														var procedureOutcome = body; 

														//cek apakah ada error atau tidak
														if(procedureOutcome.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Procedure Outcome has been update.","data":procedureOutcome.data});
														}else{
															res.json({"err_code": 3, "err_msg": procedureOutcome.error, "application": "Api FHIR", "function": "updateProcedureOutcome"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		procedureFollowup: function updateProcedureFollowup(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'PROCEDURE_FOLLOWUP', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'PROCEDURE_FOLLOWUP', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('procedureFollowup', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateProcedureFollowup"});
															}else{
																//cek apakah ada error atau tidak
																var procedureFollowup = body; 

																//cek apakah ada error atau tidak
																if(procedureFollowup.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Procedure Followup has been update.","data":procedureFollowup.data});
																}else{
																	res.json({"err_code": 3, "err_msg": procedureFollowup.error, "application": "Api FHIR", "function": "updateProcedureFollowup"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('procedureFollowup', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateProcedureFollowup"});
													}else{
														//cek apakah ada error atau tidak
														var procedureFollowup = body; 

														//cek apakah ada error atau tidak
														if(procedureFollowup.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Procedure Followup has been update.","data":procedureFollowup.data});
														}else{
															res.json({"err_code": 3, "err_msg": procedureFollowup.error, "application": "Api FHIR", "function": "updateProcedureFollowup"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		deviceAction: function updateDeviceAction(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'DEVICE_ACTION', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'DEVICE_ACTION', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('deviceAction', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDeviceAction"});
															}else{
																//cek apakah ada error atau tidak
																var deviceAction = body; 

																//cek apakah ada error atau tidak
																if(deviceAction.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Device Action has been update.","data":deviceAction.data});
																}else{
																	res.json({"err_code": 3, "err_msg": deviceAction.error, "application": "Api FHIR", "function": "updateDeviceAction"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('deviceAction', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDeviceAction"});
													}else{
														//cek apakah ada error atau tidak
														var deviceAction = body; 

														//cek apakah ada error atau tidak
														if(deviceAction.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Device Action has been update.","data":deviceAction.data});
														}else{
															res.json({"err_code": 3, "err_msg": deviceAction.error, "application": "Api FHIR", "function": "updateDeviceAction"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		deviceKind: function updateDeviceKind(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'DEVICE_KIND', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'DEVICE_KIND', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('deviceKind', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDeviceKind"});
															}else{
																//cek apakah ada error atau tidak
																var deviceKind = body; 

																//cek apakah ada error atau tidak
																if(deviceKind.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Device Kind has been update.","data":deviceKind.data});
																}else{
																	res.json({"err_code": 3, "err_msg": deviceKind.error, "application": "Api FHIR", "function": "updateDeviceKind"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('deviceKind', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateDeviceKind"});
													}else{
														//cek apakah ada error atau tidak
														var deviceKind = body; 

														//cek apakah ada error atau tidak
														if(deviceKind.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Device Kind has been update.","data":deviceKind.data});
														}else{
															res.json({"err_code": 3, "err_msg": deviceKind.error, "application": "Api FHIR", "function": "updateDeviceKind"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		immunizationStatus: function updateImmunizationStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataimmunizationStatus = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataimmunizationStatus.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataimmunizationStatus.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				dataimmunizationStatus.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'IMMUNIZATION_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'IMMUNIZATION_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('immunizationStatus', {"apikey": apikey, "_id": _id}, {body: dataimmunizationStatus, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateImmunizationStatus"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var immunizationStatus = body; 
												  	//cek apakah ada error atau tidak
												  	if(immunizationStatus.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Immunization Status has been update.","data":immunizationStatus.data});
												  	}else{
												  		res.json(immunizationStatus);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('immunizationStatus', {"apikey": apikey, "_id": _id}, {body: dataimmunizationStatus, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateImmunizationStatus"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var immunizationStatus = body; 
										  	//cek apakah ada error atau tidak
										  	if(immunizationStatus.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Immunization Status has been update.","data":immunizationStatus.data});
										  	}else{
										  		res.json(immunizationStatus);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		vaccineCode: function updateVaccineCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.system !== 'undefined'){
				var system = req.body.system;
				data.system = system;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'VACCINE_CODE', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'VACCINE_CODE', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('vaccineCode', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateVaccineCode"});
															}else{
																//cek apakah ada error atau tidak
																var vaccineCode = body; 

																//cek apakah ada error atau tidak
																if(vaccineCode.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Vaccine Code has been update.","data":vaccineCode.data});
																}else{
																	res.json({"err_code": 3, "err_msg": vaccineCode.error, "application": "Api FHIR", "function": "updateVaccineCode"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('vaccineCode', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateVaccineCode"});
													}else{
														//cek apakah ada error atau tidak
														var vaccineCode = body; 

														//cek apakah ada error atau tidak
														if(vaccineCode.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Vaccine Code has been update.","data":vaccineCode.data});
														}else{
															res.json({"err_code": 3, "err_msg": vaccineCode.error, "application": "Api FHIR", "function": "updateVaccineCode"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		immunizationOrigin: function updateImmunizationOrigin(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataimmunizationOrigin = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataimmunizationOrigin.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataimmunizationOrigin.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				dataimmunizationOrigin.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'IMMUNIZATION_ORIGIN', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'IMMUNIZATION_ORIGIN', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('immunizationOrigin', {"apikey": apikey, "_id": _id}, {body: dataimmunizationOrigin, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateImmunizationOrigin"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var immunizationOrigin = body; 
												  	//cek apakah ada error atau tidak
												  	if(immunizationOrigin.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Immunization Origin has been update.","data":immunizationOrigin.data});
												  	}else{
												  		res.json(immunizationOrigin);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('immunizationOrigin', {"apikey": apikey, "_id": _id}, {body: dataimmunizationOrigin, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateImmunizationOrigin"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var immunizationOrigin = body; 
										  	//cek apakah ada error atau tidak
										  	if(immunizationOrigin.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Immunization Origin has been update.","data":immunizationOrigin.data});
										  	}else{
										  		res.json(immunizationOrigin);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		immunizationSite: function updateImmunizationSite(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataimmunizationSite = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLocaleUpperCase();
				dataimmunizationSite.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataimmunizationSite.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				dataimmunizationSite.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'IMMUNIZATION_SITE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'IMMUNIZATION_SITE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('immunizationSite', {"apikey": apikey, "_id": _id}, {body: dataimmunizationSite, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateImmunizationSite"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var immunizationSite = body; 
												  	//cek apakah ada error atau tidak
												  	if(immunizationSite.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Immunization Site has been update.","data":immunizationSite.data});
												  	}else{
												  		res.json(immunizationSite);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('immunizationSite', {"apikey": apikey, "_id": _id}, {body: dataimmunizationSite, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateImmunizationSite"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var immunizationSite = body; 
										  	//cek apakah ada error atau tidak
										  	if(immunizationSite.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Immunization Site has been update.","data":immunizationSite.data});
										  	}else{
										  		res.json(immunizationSite);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		immunizationRoute: function updateImmunizationRoutes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataimmunizationRoute = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLocaleUpperCase();
				dataimmunizationRoute.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataimmunizationRoute.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				dataimmunizationRoute.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'IMMUNIZATION_ROUTE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'IMMUNIZATION_ROUTE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('immunizationRoute', {"apikey": apikey, "_id": _id}, {body: dataimmunizationRoute, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateImmunizationRoutes"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var immunizationRoute = body; 
												  	//cek apakah ada error atau tidak
												  	if(immunizationRoute.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Immunization Routes has been update.","data":immunizationRoute.data});
												  	}else{
												  		res.json(immunizationRoute);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('immunizationRoute', {"apikey": apikey, "_id": _id}, {body: dataimmunizationRoute, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateImmunizationRoutes"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var immunizationRoute = body; 
										  	//cek apakah ada error atau tidak
										  	if(immunizationRoute.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Immunization Routes has been update.","data":immunizationRoute.data});
										  	}else{
										  		res.json(immunizationRoute);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		immunizationRole: function updateImmunizationRole(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataimmunizationRole = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataimmunizationRole.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataimmunizationRole.display = display;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'IMMUNIZATION_ROLE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'IMMUNIZATION_ROLE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('immunizationRole', {"apikey": apikey, "_id": _id}, {body: dataimmunizationRole, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateImmunizationRole"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var immunizationRole = body; 
												  	//cek apakah ada error atau tidak
												  	if(immunizationRole.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Immunization Role has been update.","data":immunizationRole.data});
												  	}else{
												  		res.json(immunizationRole);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('immunizationRole', {"apikey": apikey, "_id": _id}, {body: dataimmunizationRole, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateImmunizationRole"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var immunizationRole = body; 
										  	//cek apakah ada error atau tidak
										  	if(immunizationRole.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Immunization Role has been update.","data":immunizationRole.data});
										  	}else{
										  		res.json(immunizationRole);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		immunizationReason: function updateImmunizationReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'IMMUNIZATION_REASON', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'IMMUNIZATION_REASON', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('immunizationReason', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateImmunizationReason"});
															}else{
																//cek apakah ada error atau tidak
																var immunizationReason = body; 

																//cek apakah ada error atau tidak
																if(immunizationReason.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Immunization Reason has been update.","data":immunizationReason.data});
																}else{
																	res.json({"err_code": 3, "err_msg": immunizationReason.error, "application": "Api FHIR", "function": "updateImmunizationReason"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('immunizationReason', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateImmunizationReason"});
													}else{
														//cek apakah ada error atau tidak
														var immunizationReason = body; 

														//cek apakah ada error atau tidak
														if(immunizationReason.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Immunization Reason has been update.","data":immunizationReason.data});
														}else{
															res.json({"err_code": 3, "err_msg": immunizationReason.error, "application": "Api FHIR", "function": "updateImmunizationReason"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		noImmunizationReason: function updateNoImmunizationReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datanoImmunizationReason = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toUpperCase();
				datanoImmunizationReason.code = code;
			}
			
			if(typeof req.body.system !== 'undefined'){
				system = req.body.system;
				datanoImmunizationReason.system = system;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datanoImmunizationReason.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				datanoImmunizationReason.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'NO_IMMUNIZATION_REASON', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'NO_IMMUNIZATION_REASON', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('noImmunizationReason', {"apikey": apikey, "_id": _id}, {body: datanoImmunizationReason, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateNoImmunizationReason"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var noImmunizationReason = body; 
												  	//cek apakah ada error atau tidak
												  	if(noImmunizationReason.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "No Immunization Reason has been update.","data":noImmunizationReason.data});
												  	}else{
												  		res.json(noImmunizationReason);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('noImmunizationReason', {"apikey": apikey, "_id": _id}, {body: datanoImmunizationReason, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateNoImmunizationReason"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var noImmunizationReason = body; 
										  	//cek apakah ada error atau tidak
										  	if(noImmunizationReason.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "No Immunization Reason has been update.","data":noImmunizationReason.data});
										  	}else{
										  		res.json(noImmunizationReason);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		vaccinationProtocolDoseTarget: function updateVaccinationProtocolDoseTarget(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'VACCINATION_PROTOCOL_DOSE_TARGET', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'VACCINATION_PROTOCOL_DOSE_TARGET', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('vaccinationProtocolDoseTarget', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateVaccinationProtocolDoseTarget"});
															}else{
																//cek apakah ada error atau tidak
																var vaccinationProtocolDoseTarget = body; 

																//cek apakah ada error atau tidak
																if(vaccinationProtocolDoseTarget.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Vaccination Protocol Dose Target has been update.","data":vaccinationProtocolDoseTarget.data});
																}else{
																	res.json({"err_code": 3, "err_msg": vaccinationProtocolDoseTarget.error, "application": "Api FHIR", "function": "updateVaccinationProtocolDoseTarget"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('vaccinationProtocolDoseTarget', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateVaccinationProtocolDoseTarget"});
													}else{
														//cek apakah ada error atau tidak
														var vaccinationProtocolDoseTarget = body; 

														//cek apakah ada error atau tidak
														if(vaccinationProtocolDoseTarget.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Vaccination Protocol Dose Target has been update.","data":vaccinationProtocolDoseTarget.data});
														}else{
															res.json({"err_code": 3, "err_msg": vaccinationProtocolDoseTarget.error, "application": "Api FHIR", "function": "updateVaccinationProtocolDoseTarget"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		vaccinationProtocolDoseStatus: function updateVaccinationProtocolDoseStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datavaccinationProtocolDoseStatus = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				datavaccinationProtocolDoseStatus.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datavaccinationProtocolDoseStatus.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				datavaccinationProtocolDoseStatus.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'VACCINATION_PROTOCOL_DOSE_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'VACCINATION_PROTOCOL_DOSE_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('vaccinationProtocolDoseStatus', {"apikey": apikey, "_id": _id}, {body: datavaccinationProtocolDoseStatus, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateVaccinationProtocolDoseStatus"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var vaccinationProtocolDoseStatus = body; 
												  	//cek apakah ada error atau tidak
												  	if(vaccinationProtocolDoseStatus.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Vaccination Protocol Dose Status has been update.","data":vaccinationProtocolDoseStatus.data});
												  	}else{
												  		res.json(vaccinationProtocolDoseStatus);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('vaccinationProtocolDoseStatus', {"apikey": apikey, "_id": _id}, {body: datavaccinationProtocolDoseStatus, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateVaccinationProtocolDoseStatus"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var vaccinationProtocolDoseStatus = body; 
										  	//cek apakah ada error atau tidak
										  	if(vaccinationProtocolDoseStatus.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Vaccination Protocol Dose Status has been update.","data":vaccinationProtocolDoseStatus.data});
										  	}else{
										  		res.json(vaccinationProtocolDoseStatus);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		vaccinationProtocolDoseStatusReason: function updateVaccinationProtocolDoseStatusReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datavaccinationProtocolDoseStatusReason = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				datavaccinationProtocolDoseStatusReason.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datavaccinationProtocolDoseStatusReason.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				datavaccinationProtocolDoseStatusReason.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'VACCINATION_PROTOCOL_DOSE_STATUS_REASON', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'VACCINATION_PROTOCOL_DOSE_STATUS_REASON', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('vaccinationProtocolDoseStatusReason', {"apikey": apikey, "_id": _id}, {body: datavaccinationProtocolDoseStatusReason, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateVaccinationProtocolDoseStatusReason"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var vaccinationProtocolDoseStatusReason = body; 
												  	//cek apakah ada error atau tidak
												  	if(vaccinationProtocolDoseStatusReason.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Vaccination Protocol Dose Status Reason has been update.","data":vaccinationProtocolDoseStatusReason.data});
												  	}else{
												  		res.json(vaccinationProtocolDoseStatusReason);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('vaccinationProtocolDoseStatusReason', {"apikey": apikey, "_id": _id}, {body: datavaccinationProtocolDoseStatusReason, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateVaccinationProtocolDoseStatusReason"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var vaccinationProtocolDoseStatusReason = body; 
										  	//cek apakah ada error atau tidak
										  	if(vaccinationProtocolDoseStatusReason.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Vaccination Protocol Dose Status Reason has been update.","data":vaccinationProtocolDoseStatusReason.data});
										  	}else{
										  		res.json(vaccinationProtocolDoseStatusReason);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		immunizationRecommendationTargetDisease: function getImmunizationRecommendationTargetDisease(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'IMMUNIZATION_RECOMMENDATION_TARGET_DISEASE', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'IMMUNIZATION_RECOMMENDATION_TARGET_DISEASE', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('immunizationRecommendationTargetDisease', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationRecommendationTargetDisease"});
															}else{
																//cek apakah ada error atau tidak
																var immunizationRecommendationTargetDisease = body; 

																//cek apakah ada error atau tidak
																if(immunizationRecommendationTargetDisease.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Vaccination Protocol Dose Target has been update.","data":immunizationRecommendationTargetDisease.data});
																}else{
																	res.json({"err_code": 3, "err_msg": immunizationRecommendationTargetDisease.error, "application": "Api FHIR", "function": "getImmunizationRecommendationTargetDisease"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('immunizationRecommendationTargetDisease', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "getImmunizationRecommendationTargetDisease"});
													}else{
														//cek apakah ada error atau tidak
														var immunizationRecommendationTargetDisease = body; 

														//cek apakah ada error atau tidak
														if(immunizationRecommendationTargetDisease.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Immunization Recommendation Target Disease has been update.","data":immunizationRecommendationTargetDisease.data});
														}else{
															res.json({"err_code": 3, "err_msg": immunizationRecommendationTargetDisease.error, "application": "Api FHIR", "function": "getImmunizationRecommendationTargetDisease"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		immunizationRecommendationStatus: function updateImmunizationRecommendationStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataimmunizationRecommendationStatus = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataimmunizationRecommendationStatus.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataimmunizationRecommendationStatus.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				dataimmunizationRecommendationStatus.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'IMMUNIZATION_RECOMMENDATION_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'IMMUNIZATION_RECOMMENDATION_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('immunizationRecommendationStatus', {"apikey": apikey, "_id": _id}, {body: dataimmunizationRecommendationStatus, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateImmunizationRecommendationStatus"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var immunizationRecommendationStatus = body; 
												  	//cek apakah ada error atau tidak
												  	if(immunizationRecommendationStatus.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Immunization Recommendation Status has been update.","data":immunizationRecommendationStatus.data});
												  	}else{
												  		res.json(immunizationRecommendationStatus);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('immunizationRecommendationStatus', {"apikey": apikey, "_id": _id}, {body: dataimmunizationRecommendationStatus, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateImmunizationRecommendationStatus"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var immunizationRecommendationStatus = body; 
										  	//cek apakah ada error atau tidak
										  	if(immunizationRecommendationStatus.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Vaccination Protocol Dose Status Reason has been update.","data":immunizationRecommendationStatus.data});
										  	}else{
										  		res.json(immunizationRecommendationStatus);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		immunizationRecommendationDateCriterion: function updateImmunizationRecommendationDateCriterion(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataimmunizationRecommendationDateCriterion = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				dataimmunizationRecommendationDateCriterion.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataimmunizationRecommendationDateCriterion.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				dataimmunizationRecommendationDateCriterion.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'IMMUNIZATION_RECOMMENDATION_DATE_CRITERION', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'IMMUNIZATION_RECOMMENDATION_DATE_CRITERION', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('immunizationRecommendationDateCriterion', {"apikey": apikey, "_id": _id}, {body: dataimmunizationRecommendationDateCriterion, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateImmunizationRecommendationDateCriterion"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var immunizationRecommendationDateCriterion = body; 
												  	//cek apakah ada error atau tidak
												  	if(immunizationRecommendationDateCriterion.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "VImmunization Recommendation Date Criterion has been update.","data":immunizationRecommendationDateCriterion.data});
												  	}else{
												  		res.json(immunizationRecommendationDateCriterion);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('immunizationRecommendationDateCriterion', {"apikey": apikey, "_id": _id}, {body: dataimmunizationRecommendationDateCriterion, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateImmunizationRecommendationDateCriterion"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var immunizationRecommendationDateCriterion = body; 
										  	//cek apakah ada error atau tidak
										  	if(immunizationRecommendationDateCriterion.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Immunization Recommendation Date Criterion has been update.","data":immunizationRecommendationDateCriterion.data});
										  	}else{
										  		res.json(immunizationRecommendationDateCriterion);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		
		medicationStatus: function updateMedicationStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datamedicationStatus = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				datamedicationStatus.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datamedicationStatus.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				datamedicationStatus.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'MEDICATION_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'MEDICATION_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('medicationStatus', {"apikey": apikey, "_id": _id}, {body: datamedicationStatus, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationStatus"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var medicationStatus = body; 
												  	//cek apakah ada error atau tidak
												  	if(medicationStatus.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Medication Status has been update.","data":medicationStatus.data});
												  	}else{
												  		res.json(medicationStatus);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('medicationStatus', {"apikey": apikey, "_id": _id}, {body: datamedicationStatus, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationStatus"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var medicationStatus = body; 
										  	//cek apakah ada error atau tidak
										  	if(medicationStatus.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Medication Status has been update.","data":medicationStatus.data});
										  	}else{
										  		res.json(medicationStatus);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		medicationFormCodes: function updateMedicationFormCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'MEDICATION_FORM_CODES', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'MEDICATION_FORM_CODES', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('medicationFormCodes', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationFormCodes"});
															}else{
																//cek apakah ada error atau tidak
																var medicationFormCodes = body; 

																//cek apakah ada error atau tidak
																if(medicationFormCodes.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Medication Form Codes has been update.","data":medicationFormCodes.data});
																}else{
																	res.json({"err_code": 3, "err_msg": medicationFormCodes.error, "application": "Api FHIR", "function": "updateMedicationFormCodes"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('medicationFormCodes', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationFormCodes"});
													}else{
														//cek apakah ada error atau tidak
														var medicationFormCodes = body; 

														//cek apakah ada error atau tidak
														if(medicationFormCodes.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Medication Form Codes has been update.","data":medicationFormCodes.data});
														}else{
															res.json({"err_code": 3, "err_msg": medicationFormCodes.error, "application": "Api FHIR", "function": "updateMedicationFormCodes"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		medicationPackageForm: function updateMedicationPackageForm(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datamedicationPackageForm = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				datamedicationPackageForm.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datamedicationPackageForm.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				datamedicationPackageForm.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'MEDICATION_PACKAGE_FORM', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'MEDICATION_PACKAGE_FORM', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('medicationPackageForm', {"apikey": apikey, "_id": _id}, {body: datamedicationPackageForm, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationPackageForm"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var medicationPackageForm = body; 
												  	//cek apakah ada error atau tidak
												  	if(medicationPackageForm.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Medication Package Form has been update.","data":medicationPackageForm.data});
												  	}else{
												  		res.json(medicationPackageForm);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('medicationPackageForm', {"apikey": apikey, "_id": _id}, {body: datamedicationPackageForm, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationPackageForm"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var medicationPackageForm = body; 
										  	//cek apakah ada error atau tidak
										  	if(medicationPackageForm.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Medication Package Form has been update.","data":medicationPackageForm.data});
										  	}else{
										  		res.json(medicationPackageForm);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		
		medicationAdminStatus: function updateMedicationAdminStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datamedicationAdminStatus = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				datamedicationAdminStatus.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datamedicationAdminStatus.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				datamedicationAdminStatus.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'MEDICATION_ADMIN_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'MEDICATION_ADMIN_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('medicationAdminStatus', {"apikey": apikey, "_id": _id}, {body: datamedicationAdminStatus, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationAdminStatus"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var medicationAdminStatus = body; 
												  	//cek apakah ada error atau tidak
												  	if(medicationAdminStatus.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Medication Admin Status has been update.","data":medicationAdminStatus.data});
												  	}else{
												  		res.json(medicationAdminStatus);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('medicationAdminStatus', {"apikey": apikey, "_id": _id}, {body: datamedicationAdminStatus, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationAdminStatus"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var medicationAdminStatus = body; 
										  	//cek apakah ada error atau tidak
										  	if(medicationAdminStatus.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Medication Admin Status has been update.","data":medicationAdminStatus.data});
										  	}else{
										  		res.json(medicationAdminStatus);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		medicationAdminCategory: function updateMedicationAdminCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datamedicationAdminCategory = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				datamedicationAdminCategory.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datamedicationAdminCategory.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				datamedicationAdminCategory.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'MEDICATION_ADMIN_CATEGORY', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'MEDICATION_ADMIN_CATEGORY', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('medicationAdminCategory', {"apikey": apikey, "_id": _id}, {body: datamedicationAdminCategory, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationAdminCategory"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var medicationAdminCategory = body; 
												  	//cek apakah ada error atau tidak
												  	if(medicationAdminCategory.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Medication Category has been update.","data":medicationAdminCategory.data});
												  	}else{
												  		res.json(medicationAdminCategory);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('medicationAdminCategory', {"apikey": apikey, "_id": _id}, {body: datamedicationAdminCategory, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationAdminCategory"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var medicationAdminCategory = body; 
										  	//cek apakah ada error atau tidak
										  	if(medicationAdminCategory.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Medication Category has been update.","data":medicationAdminCategory.data});
										  	}else{
										  		res.json(medicationAdminCategory);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		reasonMedicationNotGivenCodes: function updateReasonMedicationNotGivenCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'REASON_MEDICATION_NOT_GIVEN_CODES', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'REASON_MEDICATION_NOT_GIVEN_CODES', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('reasonMedicationNotGivenCodes', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateReasonMedicationNotGivenCodes"});
															}else{
																//cek apakah ada error atau tidak
																var reasonMedicationNotGivenCodes = body; 

																//cek apakah ada error atau tidak
																if(reasonMedicationNotGivenCodes.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Reason Medication Not Given Codes has been update.","data":reasonMedicationNotGivenCodes.data});
																}else{
																	res.json({"err_code": 3, "err_msg": reasonMedicationNotGivenCodes.error, "application": "Api FHIR", "function": "updateReasonMedicationNotGivenCodes"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('reasonMedicationNotGivenCodes', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateReasonMedicationNotGivenCodes"});
													}else{
														//cek apakah ada error atau tidak
														var reasonMedicationNotGivenCodes = body; 

														//cek apakah ada error atau tidak
														if(reasonMedicationNotGivenCodes.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Reason Medication Not Given Codes has been update.","data":reasonMedicationNotGivenCodes.data});
														}else{
															res.json({"err_code": 3, "err_msg": reasonMedicationNotGivenCodes.error, "application": "Api FHIR", "function": "updateReasonMedicationNotGivenCodes"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		reasonMedicationGivenCodes: function updateReasonMedicationGivenCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datareasonMedicationGivenCodes = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				datareasonMedicationGivenCodes.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datareasonMedicationGivenCodes.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				datareasonMedicationGivenCodes.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'REASON_MEDICATION_GIVEN_CODES', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'REASON_MEDICATION_GIVEN_CODES', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('reasonMedicationGivenCodes', {"apikey": apikey, "_id": _id}, {body: datareasonMedicationGivenCodes, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateReasonMedicationGivenCodes"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var reasonMedicationGivenCodes = body; 
												  	//cek apakah ada error atau tidak
												  	if(reasonMedicationGivenCodes.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Reason Medication Given Codes has been update.","data":reasonMedicationGivenCodes.data});
												  	}else{
												  		res.json(reasonMedicationGivenCodes);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('reasonMedicationGivenCodes', {"apikey": apikey, "_id": _id}, {body: datareasonMedicationGivenCodes, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateReasonMedicationGivenCodes"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var reasonMedicationGivenCodes = body; 
										  	//cek apakah ada error atau tidak
										  	if(reasonMedicationGivenCodes.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Reason Medication Given Codes has been update.","data":reasonMedicationGivenCodes.data});
										  	}else{
										  		res.json(reasonMedicationGivenCodes);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		approachSiteCodes: function updateApproachSiteCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'APPROACH_SITE_CODES', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'APPROACH_SITE_CODES', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('approachSiteCodes', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateApproachSiteCodes"});
															}else{
																//cek apakah ada error atau tidak
																var approachSiteCodes = body; 

																//cek apakah ada error atau tidak
																if(approachSiteCodes.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Approach Site Codes has been update.","data":approachSiteCodes.data});
																}else{
																	res.json({"err_code": 3, "err_msg": approachSiteCodes.error, "application": "Api FHIR", "function": "updateApproachSiteCodes"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('approachSiteCodes', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateApproachSiteCodes"});
													}else{
														//cek apakah ada error atau tidak
														var approachSiteCodes = body; 

														//cek apakah ada error atau tidak
														if(approachSiteCodes.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Approach Site Codes has been update.","data":approachSiteCodes.data});
														}else{
															res.json({"err_code": 3, "err_msg": approachSiteCodes.error, "application": "Api FHIR", "function": "updateApproachSiteCodes"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		administrationMethodCodes: function updateAdministrationMethodCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'ADMINISTRATION_METHOD_CODES', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'ADMINISTRATION_METHOD_CODES', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('administrationMethodCodes', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAdministrationMethodCodes"});
															}else{
																//cek apakah ada error atau tidak
																var administrationMethodCodes = body; 

																//cek apakah ada error atau tidak
																if(administrationMethodCodes.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Administration Method Codes has been update.","data":administrationMethodCodes.data});
																}else{
																	res.json({"err_code": 3, "err_msg": administrationMethodCodes.error, "application": "Api FHIR", "function": "updateAdministrationMethodCodes"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('administrationMethodCodes', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateAdministrationMethodCodes"});
													}else{
														//cek apakah ada error atau tidak
														var administrationMethodCodes = body; 

														//cek apakah ada error atau tidak
														if(administrationMethodCodes.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Administration Method Codes has been update.","data":administrationMethodCodes.data});
														}else{
															res.json({"err_code": 3, "err_msg": administrationMethodCodes.error, "application": "Api FHIR", "function": "updateAdministrationMethodCodes"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		
		medicationDispenseStatus: function updateMedicationDispenseStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datamedicationDispenseStatus = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				datamedicationDispenseStatus.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datamedicationDispenseStatus.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				datamedicationDispenseStatus.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'MEDICATION_DISPENSE_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'MEDICATION_DISPENSE_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('medicationDispenseStatus', {"apikey": apikey, "_id": _id}, {body: datamedicationDispenseStatus, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationDispenseStatus"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var medicationDispenseStatus = body; 
												  	//cek apakah ada error atau tidak
												  	if(medicationDispenseStatus.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Medication Dispense Status has been update.","data":medicationDispenseStatus.data});
												  	}else{
												  		res.json(medicationDispenseStatus);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('medicationDispenseStatus', {"apikey": apikey, "_id": _id}, {body: datamedicationDispenseStatus, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationDispenseStatus"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var medicationDispenseStatus = body; 
										  	//cek apakah ada error atau tidak
										  	if(medicationDispenseStatus.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Medication Dispense Status has been update.","data":medicationDispenseStatus.data});
										  	}else{
										  		res.json(medicationDispenseStatus);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		medicationDispenseCategory: function updateMedicationDispenseCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datamedicationDispenseCategory = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				datamedicationDispenseCategory.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datamedicationDispenseCategory.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				datamedicationDispenseCategory.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'MEDICATION_DISPENSE_CATEGORY', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'MEDICATION_DISPENSE_CATEGORY', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('medicationDispenseCategory', {"apikey": apikey, "_id": _id}, {body: datamedicationDispenseCategory, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationDispenseCategory"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var medicationDispenseCategory = body; 
												  	//cek apakah ada error atau tidak
												  	if(medicationDispenseCategory.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Medication Dispense Category has been update.","data":medicationDispenseCategory.data});
												  	}else{
												  		res.json(medicationDispenseCategory);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('medicationDispenseCategory', {"apikey": apikey, "_id": _id}, {body: datamedicationDispenseCategory, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationDispenseCategory"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var medicationDispenseCategory = body; 
										  	//cek apakah ada error atau tidak
										  	if(medicationDispenseCategory.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Medication Dispense Category has been update.","data":medicationDispenseCategory.data});
										  	}else{
										  		res.json(medicationDispenseCategory);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		actPharmacySupplyType: function updateActPharmacySupplyType(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataactPharmacySupplyType = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toUpperCase();
				dataactPharmacySupplyType.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataactPharmacySupplyType.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				dataactPharmacySupplyType.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ACT_PHARMACY_SUPPLY_TYPE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ACT_PHARMACY_SUPPLY_TYPE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('actPharmacySupplyType', {"apikey": apikey, "_id": _id}, {body: dataactPharmacySupplyType, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateActPharmacySupplyType"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var actPharmacySupplyType = body; 
												  	//cek apakah ada error atau tidak
												  	if(actPharmacySupplyType.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Act Pharmacy Supply Type has been update.","data":actPharmacySupplyType.data});
												  	}else{
												  		res.json(actPharmacySupplyType);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('actPharmacySupplyType', {"apikey": apikey, "_id": _id}, {body: dataactPharmacySupplyType, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateActPharmacySupplyType"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var actPharmacySupplyType = body; 
										  	//cek apakah ada error atau tidak
										  	if(actPharmacySupplyType.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Act Pharmacy Supply Type has been update.","data":actPharmacySupplyType.data});
										  	}else{
										  		res.json(actPharmacySupplyType);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		actSubstanceAdminSubstitutionCode: function updateActSubstanceAdminSubstitutionCode(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataactSubstanceAdminSubstitutionCode = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toUpperCase();
				dataactSubstanceAdminSubstitutionCode.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataactSubstanceAdminSubstitutionCode.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				dataactSubstanceAdminSubstitutionCode.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ACT_SUBSTANCE_ADMIN_SUBSTITUTION_CODE', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ACT_SUBSTANCE_ADMIN_SUBSTITUTION_CODE', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('actSubstanceAdminSubstitutionCode', {"apikey": apikey, "_id": _id}, {body: dataactSubstanceAdminSubstitutionCode, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateActSubstanceAdminSubstitutionCode"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var actSubstanceAdminSubstitutionCode = body; 
												  	//cek apakah ada error atau tidak
												  	if(actSubstanceAdminSubstitutionCode.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Act Substance Admin Substitution Code has been update.","data":actSubstanceAdminSubstitutionCode.data});
												  	}else{
												  		res.json(actSubstanceAdminSubstitutionCode);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('actSubstanceAdminSubstitutionCode', {"apikey": apikey, "_id": _id}, {body: dataactSubstanceAdminSubstitutionCode, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateActSubstanceAdminSubstitutionCode"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var actSubstanceAdminSubstitutionCode = body; 
										  	//cek apakah ada error atau tidak
										  	if(actSubstanceAdminSubstitutionCode.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Act Substance Admin Substitution Code has been update.","data":actSubstanceAdminSubstitutionCode.data});
										  	}else{
										  		res.json(actSubstanceAdminSubstitutionCode);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		actSubstanceAdminSubstitutionReason: function updateActSubstanceAdminSubstitutionReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var dataactSubstanceAdminSubstitutionReason = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toUpperCase();
				dataactSubstanceAdminSubstitutionReason.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				dataactSubstanceAdminSubstitutionReason.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				dataactSubstanceAdminSubstitutionReason.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'ACT_SUBSTANCE_ADMIN_SUBSTITUTION_REASON', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'ACT_SUBSTANCE_ADMIN_SUBSTITUTION_REASON', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('actSubstanceAdminSubstitutionReason', {"apikey": apikey, "_id": _id}, {body: dataactSubstanceAdminSubstitutionReason, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateActSubstanceAdminSubstitutionReason"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var actSubstanceAdminSubstitutionReason = body; 
												  	//cek apakah ada error atau tidak
												  	if(actSubstanceAdminSubstitutionReason.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Act Substance Admin Substitution Reason has been update.","data":actSubstanceAdminSubstitutionReason.data});
												  	}else{
												  		res.json(actSubstanceAdminSubstitutionReason);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('actSubstanceAdminSubstitutionReason', {"apikey": apikey, "_id": _id}, {body: dataactSubstanceAdminSubstitutionReason, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateActSubstanceAdminSubstitutionReason"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var actSubstanceAdminSubstitutionReason = body; 
										  	//cek apakah ada error atau tidak
										  	if(actSubstanceAdminSubstitutionReason.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Act Substance Admin Substitution Reason has been update.","data":actSubstanceAdminSubstitutionReason.data});
										  	}else{
										  		res.json(actSubstanceAdminSubstitutionReason);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		
		medicationRequestStatus: function updateMedicationRequestStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datamedicationRequestStatus = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				datamedicationRequestStatus.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datamedicationRequestStatus.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				datamedicationRequestStatus.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'MEDICATION_REQUEST_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'MEDICATION_REQUEST_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('medicationRequestStatus', {"apikey": apikey, "_id": _id}, {body: datamedicationRequestStatus, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationRequestStatus"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var medicationRequestStatus = body; 
												  	//cek apakah ada error atau tidak
												  	if(medicationRequestStatus.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Medication Request Status has been update.","data":medicationRequestStatus.data});
												  	}else{
												  		res.json(medicationRequestStatus);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('medicationRequestStatus', {"apikey": apikey, "_id": _id}, {body: datamedicationRequestStatus, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationRequestStatus"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var medicationRequestStatus = body; 
										  	//cek apakah ada error atau tidak
										  	if(medicationRequestStatus.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Medication Request Status has been update.","data":medicationRequestStatus.data});
										  	}else{
										  		res.json(medicationRequestStatus);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		medicationRequestIntent: function updateMedicationRequestIntent(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datamedicationRequestIntent = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				datamedicationRequestIntent.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datamedicationRequestIntent.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				datamedicationRequestIntent.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'MEDICATION_REQUEST_INTENT', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'MEDICATION_REQUEST_INTENT', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('medicationRequestIntent', {"apikey": apikey, "_id": _id}, {body: datamedicationRequestIntent, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationRequestIntent"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var medicationRequestIntent = body; 
												  	//cek apakah ada error atau tidak
												  	if(medicationRequestIntent.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Medication Request Intent has been update.","data":medicationRequestIntent.data});
												  	}else{
												  		res.json(medicationRequestIntent);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('medicationRequestIntent', {"apikey": apikey, "_id": _id}, {body: datamedicationRequestIntent, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationRequestIntent"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var medicationRequestIntent = body; 
										  	//cek apakah ada error atau tidak
										  	if(medicationRequestIntent.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Medication Request Intent has been update.","data":medicationRequestIntent.data});
										  	}else{
										  		res.json(medicationRequestIntent);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		medicationRequestCategory: function updateMedicationRequestCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datamedicationRequestCategory = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				datamedicationRequestCategory.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datamedicationRequestCategory.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				datamedicationRequestCategory.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'MEDICATION_REQUEST_CATEGORY', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'MEDICATION_REQUEST_CATEGORY', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('medicationRequestCategory', {"apikey": apikey, "_id": _id}, {body: datamedicationRequestCategory, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationRequestCategory"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var medicationRequestCategory = body; 
												  	//cek apakah ada error atau tidak
												  	if(medicationRequestCategory.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Medication Request Category has been update.","data":medicationRequestCategory.data});
												  	}else{
												  		res.json(medicationRequestCategory);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('medicationRequestCategory', {"apikey": apikey, "_id": _id}, {body: datamedicationRequestCategory, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationRequestCategory"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var medicationRequestCategory = body; 
										  	//cek apakah ada error atau tidak
										  	if(medicationRequestCategory.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Medication Request Category has been update.","data":medicationRequestCategory.data});
										  	}else{
										  		res.json(medicationRequestCategory);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		medicationRequestPriority: function updateMedicationRequestPriority(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datamedicationRequestPriority = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				datamedicationRequestPriority.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datamedicationRequestPriority.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				datamedicationRequestPriority.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'MEDICATION_REQUEST_PRIORITY', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'MEDICATION_REQUEST_PRIORITY', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('medicationRequestPriority', {"apikey": apikey, "_id": _id}, {body: datamedicationRequestPriority, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationRequestPriority"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var medicationRequestPriority = body; 
												  	//cek apakah ada error atau tidak
												  	if(medicationRequestPriority.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Medication Request Priority has been update.","data":medicationRequestPriority.data});
												  	}else{
												  		res.json(medicationRequestPriority);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('medicationRequestPriority', {"apikey": apikey, "_id": _id}, {body: datamedicationRequestPriority, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationRequestPriority"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var medicationRequestPriority = body; 
										  	//cek apakah ada error atau tidak
										  	if(medicationRequestPriority.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Medication Request Priority has been update.","data":medicationRequestPriority.data});
										  	}else{
										  		res.json(medicationRequestPriority);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		medicationCodes: function updateMedicationCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'MEDICATION_CODES', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'MEDICATION_CODES', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('medicationCodes', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationCodes"});
															}else{
																//cek apakah ada error atau tidak
																var medicationCodes = body; 

																//cek apakah ada error atau tidak
																if(medicationCodes.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Medication Codes has been update.","data":medicationCodes.data});
																}else{
																	res.json({"err_code": 3, "err_msg": medicationCodes.error, "application": "Api FHIR", "function": "updateMedicationCodes"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('medicationCodes', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationCodes"});
													}else{
														//cek apakah ada error atau tidak
														var medicationCodes = body; 

														//cek apakah ada error atau tidak
														if(medicationCodes.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Medication Codes has been update.","data":medicationCodes.data});
														}else{
															res.json({"err_code": 3, "err_msg": medicationCodes.error, "application": "Api FHIR", "function": "updateMedicationCodes"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
		substanceAdminSubstitutionReason: function updateSubstanceAdminSubstitutionReason(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datasubstanceAdminSubstitutionReason = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toUpperCase();
				datasubstanceAdminSubstitutionReason.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datasubstanceAdminSubstitutionReason.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				datasubstanceAdminSubstitutionReason.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'SUBSTANCE_ADMIN_SUBSTITUTION_REASON', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'SUBSTANCE_ADMIN_SUBSTITUTION_REASON', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('substanceAdminSubstitutionReason', {"apikey": apikey, "_id": _id}, {body: datasubstanceAdminSubstitutionReason, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateSubstanceAdminSubstitutionReason"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var substanceAdminSubstitutionReason = body; 
												  	//cek apakah ada error atau tidak
												  	if(substanceAdminSubstitutionReason.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Substance Admin Substitution Reason has been update.","data":substanceAdminSubstitutionReason.data});
												  	}else{
												  		res.json(substanceAdminSubstitutionReason);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('substanceAdminSubstitutionReason', {"apikey": apikey, "_id": _id}, {body: datasubstanceAdminSubstitutionReason, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateSubstanceAdminSubstitutionReason"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var substanceAdminSubstitutionReason = body; 
										  	//cek apakah ada error atau tidak
										  	if(substanceAdminSubstitutionReason.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Substance Admin Substitution Reason has been update.","data":substanceAdminSubstitutionReason.data});
										  	}else{
										  		res.json(substanceAdminSubstitutionReason);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		
		medicationStatementStatus: function updateMedicationStatementStatus(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datamedicationStatementStatus = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				datamedicationStatementStatus.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datamedicationStatementStatus.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				datamedicationStatementStatus.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'MEDICATION_STATEMENT_STATUS', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'MEDICATION_STATEMENT_STATUS', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('medicationStatementStatus', {"apikey": apikey, "_id": _id}, {body: datamedicationStatementStatus, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationStatementStatus"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var medicationStatementStatus = body; 
												  	//cek apakah ada error atau tidak
												  	if(medicationStatementStatus.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Medication Statement Status has been update.","data":medicationStatementStatus.data});
												  	}else{
												  		res.json(medicationStatementStatus);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('medicationStatementStatus', {"apikey": apikey, "_id": _id}, {body: datamedicationStatementStatus, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationStatementStatus"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var medicationStatementStatus = body; 
										  	//cek apakah ada error atau tidak
										  	if(medicationStatementStatus.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Medication Statement Status has been update.","data":medicationStatementStatus.data});
										  	}else{
										  		res.json(medicationStatementStatus);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		medicationStatementCategory: function updateMedicationStatementCategory(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datamedicationStatementCategory = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				datamedicationStatementCategory.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datamedicationStatementCategory.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				datamedicationStatementCategory.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'MEDICATION_STATEMENT_CATEGORY', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'MEDICATION_STATEMENT_CATEGORY', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('medicationStatementCategory', {"apikey": apikey, "_id": _id}, {body: datamedicationStatementCategory, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationStatementCategory"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var medicationStatementCategory = body; 
												  	//cek apakah ada error atau tidak
												  	if(medicationStatementCategory.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Medication Statement Category has been update.","data":medicationStatementCategory.data});
												  	}else{
												  		res.json(medicationStatementCategory);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('medicationStatementCategory', {"apikey": apikey, "_id": _id}, {body: datamedicationStatementCategory, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationStatementCategory"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var medicationStatementCategory = body; 
										  	//cek apakah ada error atau tidak
										  	if(medicationStatementCategory.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Medication Statement Category has been update.","data":medicationStatementCategory.data});
										  	}else{
										  		res.json(medicationStatementCategory);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		medicationStatementTaken: function updateMedicationStatementTaken(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var datamedicationStatementTaken = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				datamedicationStatementTaken.code = code;
			}

			if(typeof req.body.display !== 'undefined'){
				display = req.body.display;
				datamedicationStatementTaken.display = display;
			}

			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s , ( ) / . -]/gi, '');
				datamedicationStatementTaken.definition = definition;
			}

			if(_id == "" || typeof _id == 'undefined'){
				res.json({"err_code": 5, "err_msg": "Id is required."});	
			}else{
				if(validator.isInt(_id)){
					checkApikey(apikey, ipAddres, function(result){
						if(result.err_code == 0){
							checkId(apikey, _id, 'MEDICATION_STATEMENT_TAKEN', function(resultCheckId){
								if(resultCheckId.err_code == 0){
									if(typeof req.body.code !== 'undefined'){
										checkCode(apikey, code, 'MEDICATION_STATEMENT_TAKEN', function(resultCode){
											if(resultCode.err_code == 0){
												//method, endpoint, params, options, callback
												ApiFHIR.put('medicationStatementTaken', {"apikey": apikey, "_id": _id}, {body: datamedicationStatementTaken, json: true}, function(error, response, body){
													if(error){
												  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationStatementTaken"});
												  }else{
												  	//cek apakah ada error atau tidak
												  	var medicationStatementTaken = body; 
												  	//cek apakah ada error atau tidak
												  	if(medicationStatementTaken.err_code == 0){
													  	res.json({"err_code": 0, "err_msg": "Medication Statement Taken has been update.","data":medicationStatementTaken.data});
												  	}else{
												  		res.json(medicationStatementTaken);
												  	}
												  }
												})
											}else{
												res.json(resultCode);
											}
										})
									}else{
										//method, endpoint, params, options, callback
										ApiFHIR.put('medicationStatementTaken', {"apikey": apikey, "_id": _id}, {body: datamedicationStatementTaken, json: true}, function(error, response, body){
											if(error){
										  	res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateMedicationStatementTaken"});
										  }else{
										  	//cek apakah ada error atau tidak
										  	var medicationStatementTaken = body; 
										  	//cek apakah ada error atau tidak
										  	if(medicationStatementTaken.err_code == 0){
											  	res.json({"err_code": 0, "err_msg": "Medication Statement Taken has been update.","data":medicationStatementTaken.data});
										  	}else{
										  		res.json(medicationStatementTaken);
										  	}
										  }
										})
									}
								}else{
									res.json(resultCheckId);
								}
							})
						}else{
							result.err_code = 500;
							res.json(result);
						}	
					});
				}else{
					res.json({"err_code": 4, "err_msg": "Id must be a number."});	
				}
			}
		},
		reasonMedicationNotTakenCodes: function updateReasonMedicationNotTakenCodes(req, res){
			var ipAddres = req.connection.remoteAddress;
			var apikey = req.params.apikey;
			var _id = req.params._id;

			var data = {};

			if(typeof req.body.code !== 'undefined'){
				var code = req.body.code.trim().toLowerCase();
				data.code = code;
			}
			if(typeof req.body.display !== 'undefined'){
				var display = req.body.display;
				data.display = display;
			}
			if(typeof req.body.definition !== 'undefined'){
				var definition = req.body.definition.replace(/[^\w\s ,]/gi, '');
				data.definition = definition;
			}

			if(isNaN(code) && typeof code !== 'undefined'){
				res.json({"err_code": 6, "err_msg": "Code is not number"});
			}else{
				if(_id == "" || typeof _id == 'undefined'){
					res.json({"err_code": 5, "err_msg": "Id is required."});	
				}else{
					if(validator.isInt(_id)){
						checkApikey(apikey, ipAddres, function(result){
							if(result.err_code == 0){
								checkId(apikey, _id, 'REASON_MEDICATION_NOT_TAKEN_CODES', function(resultCheckId){
									if(resultCheckId.err_code == 0){
										if(typeof req.body.code !== 'undefined'){
											checkCode(apikey, code, 'REASON_MEDICATION_NOT_TAKEN_CODES', function(resultCode){
												if(resultCode.err_code == 0){
													//Result, endpoint, params, options, callback
													ApiFHIR.put('reasonMedicationNotTakenCodes', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
														if(error){
																res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateReasonMedicationNotTakenCodes"});
															}else{
																//cek apakah ada error atau tidak
																var reasonMedicationNotTakenCodes = body; 

																//cek apakah ada error atau tidak
																if(reasonMedicationNotTakenCodes.err_code == 0){
																	res.json({"err_code": 0, "err_msg": "Reason Medication Not Taken Codes has been update.","data":reasonMedicationNotTakenCodes.data});
																}else{
																	res.json({"err_code": 3, "err_msg": reasonMedicationNotTakenCodes.error, "application": "Api FHIR", "function": "updateReasonMedicationNotTakenCodes"});
																}
															}
													})
												}else{
													res.json(resultCode);
												}
											})
										}else{
											//method, endpoint, params, options, callback
											ApiFHIR.put('reasonMedicationNotTakenCodes', {"apikey": apikey, "_id": _id}, {body: data, json: true}, function(error, response, body){
												if(error){
														res.json({"err_code": 1, "err_msg": error, "application": "Api FHIR", "function": "updateReasonMedicationNotTakenCodes"});
													}else{
														//cek apakah ada error atau tidak
														var reasonMedicationNotTakenCodes = body; 

														//cek apakah ada error atau tidak
														if(reasonMedicationNotTakenCodes.err_code == 0){
															res.json({"err_code": 0, "err_msg": "Reason Medication Not Taken Codes has been update.","data":reasonMedicationNotTakenCodes.data});
														}else{
															res.json({"err_code": 3, "err_msg": reasonMedicationNotTakenCodes.error, "application": "Api FHIR", "function": "updateReasonMedicationNotTakenCodes"});
														}
													}
											})
										}
									}else{
										res.json(resultCheckId);
									}
								})
							}else{
								result.err_code = 500;
								res.json(result);
							}	
						});
					}else{
						res.json({"err_code": 4, "err_msg": "Id must be a number."});	
					}
				}
			}
		},
	}
}

function checkApikey(apikey, ipAddress, callback) {
	//method, endpoint, params, options, callback
	Api.get('check_apikey', {
		"apikey": apikey
	}, {}, function (error, response, body) {
		if (error) {
			x(error);
		} else {
			user = JSON.parse(body);
			//cek apakah ada error atau tidak
			if (user.err_code == 0) {
				//cek jumdata dulu
				if (user.data.length > 0) {
					//check user_role_id == 1 <-- admin/root
					if (user.data[0].user_role_id == 1) {
						x({
							"err_code": 0,
							"status": "root",
							"user_role_id": user.data[0].user_role_id,
							"user_id": user.data[0].user_id
						});
					} else {
						//cek apikey
						if (apikey == user.data[0].user_apikey) {
							//ipaddress
							dataIpAddress = user.data[0].user_ip_address;
							if (dataIpAddress.indexOf(ipAddress) >= 0) {
								//user is active
								if (user.data[0].user_is_active) {
									//cek data user terpenuhi
									x({
										"err_code": 0,
										"status": "active",
										"user_role_id": user.data[0].user_role_id,
										"user_id": user.data[0].user_id
									});
								} else {
									x({
										"err_code": 5,
										"err_msg": "User is not active"
									});
								}
							} else {
								x({
									"err_code": 4,
									"err_msg": "Ip Address not registered"
								});
							}
						} else {
							x({
								"err_code": 3,
								"err_msg": "Wrong apikey"
							});
						}
					}

				} else {
					x({
						"err_code": 2,
						"err_msg": "Wrong apikey"
					});
				}
			} else {
				x({
					"err_code": 1,
					"err_msg": user.error,
					"application": "Api User Management",
					"function": "checkApikey"
				});
			}
		}
	});

	function x(result) {
		callback(result)
	}
}

function checkId(apikey, tableId, tableName, callback) {
	ApiFHIR.get('checkId', {
		"apikey": apikey,
		"id": tableId,
		"name": tableName
	}, {}, function (error, response, body) {
		if (error) {
			x(error);
		} else {
			dataId = JSON.parse(body);
			//cek apakah ada error atau tidak
			if (dataId.err_code == 0) {
				//cek jumdata dulu
				if (dataId.data.length > 0) {
					x({
						"err_code": 0,
						"err_msg": "Id is valid."
					})
				} else {
					x({
						"err_code": 2,
						"err_msg": "Id is not found."
					});
				}
			} else {
				x({
					"err_code": 1,
					"err_msg": dataId.error,
					"application": "API FHIR",
					"function": "checkId"
				});
			}
		}
	});

	function x(result) {
		callback(result)
	}
}

function checkCode(apikey, code, tableName, callback) {
	ApiFHIR.get('checkCode', {
		"apikey": apikey,
		"code": code,
		"name": tableName
	}, {}, function (error, response, body) {
		if (error) {
			x(error);
		} else {
			dataId = JSON.parse(body);
			//cek apakah ada error atau tidak
			if (dataId.err_code == 0) {
				//cek jumdata dulu
				if (dataId.data.length > 0) {
					x({
						"err_code": 2,
						"err_msg": "Code is already exist."
					})
				} else {
					x({
						"err_code": 0,
						"err_msg": "Code is available to used."
					});
				}
			} else {
				x({
					"err_code": 1,
					"err_msg": dataId.error,
					"application": "API FHIR",
					"function": "checkCode"
				});
			}
		}
	});

	function x(result) {
		callback(result)
	}
}

function checkUniqeValue(apikey, fdValue, tableName, callback) {
	ApiFHIR.get('checkUniqeValue', {
		"apikey": apikey,
		"fdvalue": fdValue,
		"tbname": tableName
	}, {}, function (error, response, body) {
		if (error) {
			x(error);
		} else {
			dataId = JSON.parse(body);
			//cek apakah ada error atau tidak
			if (dataId.err_code == 0) {
				//cek jumdata dulu
				if (dataId.data.length > 0) {
					x({
						"err_code": 2,
						"err_msg": "The value is already exist."
					})
				} else {
					x({
						"err_code": 0,
						"err_msg": "The value is available to insert."
					});
				}
			} else {
				x({
					"err_code": 1,
					"err_msg": dataId.error,
					"application": "API FHIR",
					"function": "checkCode"
				});
			}
		}
	});

	function x(result) {
		callback(result)
	}
}

function checkGroupQouta(apikey, groupId, callback) {
	ApiFHIR.get('checkGroupQouta', {
		"apikey": apikey,
		"group_id": groupId
	}, {}, function (error, response, body) {
		if (error) {
			x(error);
		} else {
			quota = JSON.parse(body);
			//cek apakah ada error atau tidak
			if (quota.err_code == 0) {
				//cek jumdata dulu
				if (quota.data.length > 0) {
					groupQuota = parseInt(quota.data[0].quantity);
					memberCount = parseInt(quota.data[0].total_member);

					if (memberCount <= groupQuota) {
						x({
							"err_code": 0,
							"err_msg": "Group quota is ready"
						});
					} else {
						x({
							"err_code": 1,
							"err_msg": "Group quota is full, total member " + groupQuota
						});
					}
				} else {
					x({
						"err_code": 0,
						"err_msg": "Group quota is ready"
					});
				}
			} else {
				x({
					"err_code": 1,
					"err_msg": quota,
					"application": "API FHIR",
					"function": "checkGroupQouta"
				});
			}
		}
	});

	function x(result) {
		callback(result)
	}
}

function checkMemberEntityGroup(apikey, entityId, groupId, callback) {
	ApiFHIR.get('checkMemberEntityGroup', {
		"apikey": apikey,
		"entity_id": entityId,
		"group_id": groupId
	}, {}, function (error, response, body) {
		if (error) {
			x(error);
		} else {
			entity = JSON.parse(body);
			//cek apakah ada error atau tidak
			if (entity.err_code == 0) {
				if (parseInt(entity.data.length) > 0) {
					x({
						"err_code": 2,
						"err_msg": "Member entity already exist in this group."
					});
				} else {
					x({
						"err_code": 0,
						"err_msg": "Member not found in this group."
					});
				}
			} else {
				x({
					"err_code": 1,
					"err_msg": entity,
					"application": "API FHIR",
					"function": "checkMemberEntityGroup"
				});
			}
		}
	});

	function x(result) {
		callback(result)
	}
}

function getFormattedDate() {
	var date = new Date();
	var str = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " " + date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();

	return str;
}

function formatDate(date) {
	var d = new Date(date),
	month = '' + (d.getMonth() + 1),
	day = '' + d.getDate(),
	year = d.getFullYear();

	if (month.length < 2)
		month = '0' + month;
	if (day.length < 2)
		day = '0' + day;

	return [year, month, day].join('-');
}

function removeDuplicates(myArr, prop) {
	return myArr.filter((obj, pos, arr) => {
		return arr.map(mapObj => mapObj[prop]).indexOf(obj[prop]) === pos;
	});
}

module.exports = controller;